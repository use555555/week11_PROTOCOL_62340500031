
Week11GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< Updated upstream
  1 .text         00002b4c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  08002ce4  08002ce4  00012ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f38  08002f38  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002f38  08002f38  00012f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f40  08002f40  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f40  08002f40  00012f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f44  08002f44  00012f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002f48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000374  20000070  08002fb8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003e4  08002fb8  000203e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008390  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000173c  00000000  00000000  00028430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000700  00000000  00000000  00029b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000678  00000000  00000000  0002a270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015986  00000000  00000000  0002a8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007f37  00000000  00000000  0004026e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085e4c  00000000  00000000  000481a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cdff1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001da0  00000000  00000000  000ce044  2**2
=======
  1 .text         00003930  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000025c  08003ac8  08003ac8  00013ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d24  08003d24  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003d24  08003d24  00013d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d2c  08003d2c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d2c  08003d2c  00013d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d30  08003d30  00013d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003d34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000374  20000070  08003da4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003e4  08003da4  000203e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008a8b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017e7  00000000  00000000  00028b2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000718  00000000  00000000  0002a318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000690  00000000  00000000  0002aa30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015986  00000000  00000000  0002b0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008024  00000000  00000000  00040a46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085e89  00000000  00000000  00048a6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ce8f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001df4  00000000  00000000  000ce948  2**2
>>>>>>> Stashed changes
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
<<<<<<< Updated upstream
 80001b8:	08002ccc 	.word	0x08002ccc
=======
 80001b8:	08003ab0 	.word	0x08003ab0
>>>>>>> Stashed changes

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
<<<<<<< Updated upstream
 80001d4:	08002ccc 	.word	0x08002ccc
=======
 80001d4:	08003ab0 	.word	0x08003ab0
>>>>>>> Stashed changes

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

<<<<<<< Updated upstream
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004d6:	f000 fe8d 	bl	80011f4 <HAL_Init>
	/* USER CODE BEGIN Init */
=======
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f000 ff45 	bl	8001364 <HAL_Init>
  /* USER CODE BEGIN Init */
>>>>>>> Stashed changes

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004da:	f000 f831 	bl	8000540 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004de:	f000 f8eb 	bl	80006b8 <MX_GPIO_Init>
	MX_DMA_Init();
 80004e2:	f000 f8c1 	bl	8000668 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80004e6:	f000 f895 	bl	8000614 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	UART2.huart = &huart2;
 80004ea:	4b12      	ldr	r3, [pc, #72]	; (8000534 <main+0x64>)
 80004ec:	4a12      	ldr	r2, [pc, #72]	; (8000538 <main+0x68>)
 80004ee:	601a      	str	r2, [r3, #0]
	UART2.RxLen = 255;
 80004f0:	4b10      	ldr	r3, [pc, #64]	; (8000534 <main+0x64>)
 80004f2:	22ff      	movs	r2, #255	; 0xff
 80004f4:	80da      	strh	r2, [r3, #6]
	UART2.TxLen = 255;
 80004f6:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <main+0x64>)
 80004f8:	22ff      	movs	r2, #255	; 0xff
 80004fa:	809a      	strh	r2, [r3, #4]
	UARTInit(&UART2);
 80004fc:	480d      	ldr	r0, [pc, #52]	; (8000534 <main+0x64>)
 80004fe:	f000 f94b 	bl	8000798 <UARTInit>
	UARTResetStart(&UART2);
 8000502:	480c      	ldr	r0, [pc, #48]	; (8000534 <main+0x64>)
 8000504:	f000 f970 	bl	80007e8 <UARTResetStart>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		int16_t inputChar = UARTReadChar(&UART2);
 8000508:	480a      	ldr	r0, [pc, #40]	; (8000534 <main+0x64>)
 800050a:	f000 f991 	bl	8000830 <UARTReadChar>
 800050e:	4603      	mov	r3, r0
 8000510:	80fb      	strh	r3, [r7, #6]
		if (inputChar != -1)
 8000512:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800051a:	d006      	beq.n	800052a <main+0x5a>
#ifdef UARTDEBUG
			char temp[32];
			sprintf(temp, "Received [%d]\r\n", inputChar);
			UARTTxWrite(&UART2, (uint8_t*) temp, strlen(temp));
#else
			DynamixelProtocal2(MainMemory, 1, inputChar, &UART2);
 800051c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000520:	4b04      	ldr	r3, [pc, #16]	; (8000534 <main+0x64>)
 8000522:	2101      	movs	r1, #1
 8000524:	4805      	ldr	r0, [pc, #20]	; (800053c <main+0x6c>)
 8000526:	f000 fa45 	bl	80009b4 <DynamixelProtocal2>

		}
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		UARTTxDumpBuffer(&UART2);
 800052a:	4802      	ldr	r0, [pc, #8]	; (8000534 <main+0x64>)
 800052c:	f000 f9aa 	bl	8000884 <UARTTxDumpBuffer>
	{
 8000530:	e7ea      	b.n	8000508 <main+0x38>
 8000532:	bf00      	nop
 8000534:	2000008c 	.word	0x2000008c
 8000538:	2000038c 	.word	0x2000038c
 800053c:	200000a4 	.word	0x200000a4

08000540 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	; 0x50
 8000544:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8000546:	f107 0320 	add.w	r3, r7, #32
 800054a:	2230      	movs	r2, #48	; 0x30
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
<<<<<<< Updated upstream
 8000550:	f002 fb2c 	bl	8002bac <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
=======
 8000550:	f003 fa1e 	bl	8003990 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
>>>>>>> Stashed changes
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000564:	2300      	movs	r3, #0
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	4b28      	ldr	r3, [pc, #160]	; (800060c <SystemClock_Config+0xcc>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	4a27      	ldr	r2, [pc, #156]	; (800060c <SystemClock_Config+0xcc>)
 800056e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000572:	6413      	str	r3, [r2, #64]	; 0x40
 8000574:	4b25      	ldr	r3, [pc, #148]	; (800060c <SystemClock_Config+0xcc>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000580:	2300      	movs	r3, #0
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	4b22      	ldr	r3, [pc, #136]	; (8000610 <SystemClock_Config+0xd0>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a21      	ldr	r2, [pc, #132]	; (8000610 <SystemClock_Config+0xd0>)
 800058a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	4b1f      	ldr	r3, [pc, #124]	; (8000610 <SystemClock_Config+0xd0>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800059c:	2302      	movs	r3, #2
 800059e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a0:	2301      	movs	r3, #1
 80005a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a4:	2310      	movs	r3, #16
 80005a6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a8:	2302      	movs	r3, #2
 80005aa:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ac:	2300      	movs	r3, #0
 80005ae:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 80005b0:	2310      	movs	r3, #16
 80005b2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80005b4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005b8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005ba:	2304      	movs	r3, #4
 80005bc:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80005be:	2304      	movs	r3, #4
 80005c0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	4618      	mov	r0, r3
<<<<<<< Updated upstream
 80005c8:	f001 f9bc 	bl	8001944 <HAL_RCC_OscConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x96>
	{
		Error_Handler();
 80005d2:	f000 fcfd 	bl	8000fd0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
=======
 80005c8:	f001 fdf0 	bl	80021ac <HAL_RCC_OscConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005d2:	f000 fd29 	bl	8001028 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
>>>>>>> Stashed changes
 80005d6:	230f      	movs	r3, #15
 80005d8:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005da:	2302      	movs	r3, #2
 80005dc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	2102      	movs	r1, #2
 80005f2:	4618      	mov	r0, r3
<<<<<<< Updated upstream
 80005f4:	f001 fc1e 	bl	8001e34 <HAL_RCC_ClockConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 80005fe:	f000 fce7 	bl	8000fd0 <Error_Handler>
	}
=======
 80005f4:	f002 f852 	bl	800269c <HAL_RCC_ClockConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005fe:	f000 fd13 	bl	8001028 <Error_Handler>
  }
>>>>>>> Stashed changes
}
 8000602:	bf00      	nop
 8000604:	3750      	adds	r7, #80	; 0x50
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40023800 	.word	0x40023800
 8000610:	40007000 	.word	0x40007000

08000614 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000618:	4b11      	ldr	r3, [pc, #68]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 800061a:	4a12      	ldr	r2, [pc, #72]	; (8000664 <MX_USART2_UART_Init+0x50>)
 800061c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800061e:	4b10      	ldr	r3, [pc, #64]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 8000620:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000624:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000626:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800062c:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000632:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 8000634:	2200      	movs	r2, #0
 8000636:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000638:	4b09      	ldr	r3, [pc, #36]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 800063a:	220c      	movs	r2, #12
 800063c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063e:	4b08      	ldr	r3, [pc, #32]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000644:	4b06      	ldr	r3, [pc, #24]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800064a:	4805      	ldr	r0, [pc, #20]	; (8000660 <MX_USART2_UART_Init+0x4c>)
<<<<<<< Updated upstream
 800064c:	f001 fdee 	bl	800222c <HAL_UART_Init>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8000656:	f000 fcbb 	bl	8000fd0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */
=======
 800064c:	f002 fa22 	bl	8002a94 <HAL_UART_Init>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000656:	f000 fce7 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
>>>>>>> Stashed changes

	/* USER CODE END USART2_Init 2 */

}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	2000038c 	.word	0x2000038c
 8000664:	40004400 	.word	0x40004400

08000668 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <MX_DMA_Init+0x4c>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a0f      	ldr	r2, [pc, #60]	; (80006b4 <MX_DMA_Init+0x4c>)
 8000678:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <MX_DMA_Init+0x4c>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800068a:	2200      	movs	r2, #0
 800068c:	2100      	movs	r1, #0
 800068e:	2010      	movs	r0, #16
<<<<<<< Updated upstream
 8000690:	f000 fefd 	bl	800148e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000694:	2010      	movs	r0, #16
 8000696:	f000 ff16 	bl	80014c6 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800069a:	2200      	movs	r2, #0
 800069c:	2100      	movs	r1, #0
 800069e:	2011      	movs	r0, #17
 80006a0:	f000 fef5 	bl	800148e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80006a4:	2011      	movs	r0, #17
 80006a6:	f000 ff0e 	bl	80014c6 <HAL_NVIC_EnableIRQ>
=======
 8000690:	f000 ffb5 	bl	80015fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000694:	2010      	movs	r0, #16
 8000696:	f000 ffce 	bl	8001636 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800069a:	2200      	movs	r2, #0
 800069c:	2100      	movs	r1, #0
 800069e:	2011      	movs	r0, #17
 80006a0:	f000 ffad 	bl	80015fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80006a4:	2011      	movs	r0, #17
 80006a6:	f000 ffc6 	bl	8001636 <HAL_NVIC_EnableIRQ>
>>>>>>> Stashed changes

}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800

080006b8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08a      	sub	sp, #40	; 0x28
 80006bc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]
 80006d2:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <MX_GPIO_Init+0xd0>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a2c      	ldr	r2, [pc, #176]	; (8000788 <MX_GPIO_Init+0xd0>)
 80006d8:	f043 0304 	orr.w	r3, r3, #4
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b2a      	ldr	r3, [pc, #168]	; (8000788 <MX_GPIO_Init+0xd0>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0304 	and.w	r3, r3, #4
 80006e6:	613b      	str	r3, [r7, #16]
 80006e8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	4b26      	ldr	r3, [pc, #152]	; (8000788 <MX_GPIO_Init+0xd0>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a25      	ldr	r2, [pc, #148]	; (8000788 <MX_GPIO_Init+0xd0>)
 80006f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <MX_GPIO_Init+0xd0>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <MX_GPIO_Init+0xd0>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a1e      	ldr	r2, [pc, #120]	; (8000788 <MX_GPIO_Init+0xd0>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <MX_GPIO_Init+0xd0>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	4b18      	ldr	r3, [pc, #96]	; (8000788 <MX_GPIO_Init+0xd0>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a17      	ldr	r2, [pc, #92]	; (8000788 <MX_GPIO_Init+0xd0>)
 800072c:	f043 0302 	orr.w	r3, r3, #2
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b15      	ldr	r3, [pc, #84]	; (8000788 <MX_GPIO_Init+0xd0>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	2120      	movs	r1, #32
 8000742:	4812      	ldr	r0, [pc, #72]	; (800078c <MX_GPIO_Init+0xd4>)
<<<<<<< Updated upstream
 8000744:	f001 f8e4 	bl	8001910 <HAL_GPIO_WritePin>
=======
 8000744:	f001 fd18 	bl	8002178 <HAL_GPIO_WritePin>
>>>>>>> Stashed changes

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000748:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800074c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800074e:	4b10      	ldr	r3, [pc, #64]	; (8000790 <MX_GPIO_Init+0xd8>)
 8000750:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	4619      	mov	r1, r3
 800075c:	480d      	ldr	r0, [pc, #52]	; (8000794 <MX_GPIO_Init+0xdc>)
<<<<<<< Updated upstream
 800075e:	f000 ff53 	bl	8001608 <HAL_GPIO_Init>
=======
 800075e:	f001 fb87 	bl	8001e70 <HAL_GPIO_Init>
>>>>>>> Stashed changes

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000762:	2320      	movs	r3, #32
 8000764:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000766:	2301      	movs	r3, #1
 8000768:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076e:	2300      	movs	r3, #0
 8000770:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	4619      	mov	r1, r3
 8000778:	4804      	ldr	r0, [pc, #16]	; (800078c <MX_GPIO_Init+0xd4>)
<<<<<<< Updated upstream
 800077a:	f000 ff45 	bl	8001608 <HAL_GPIO_Init>
=======
 800077a:	f001 fb79 	bl	8001e70 <HAL_GPIO_Init>
>>>>>>> Stashed changes

}
 800077e:	bf00      	nop
 8000780:	3728      	adds	r7, #40	; 0x28
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40023800 	.word	0x40023800
 800078c:	40020000 	.word	0x40020000
 8000790:	10210000 	.word	0x10210000
 8000794:	40020800 	.word	0x40020800

08000798 <UARTInit>:

/* USER CODE BEGIN 4 */
void UARTInit(UARTStucrture *uart)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.RxLen);
 80007a0:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <UARTInit+0x4c>)
 80007a2:	88db      	ldrh	r3, [r3, #6]
 80007a4:	4619      	mov	r1, r3
 80007a6:	2001      	movs	r0, #1
<<<<<<< Updated upstream
 80007a8:	f002 f9c0 	bl	8002b2c <calloc>
=======
 80007a8:	f003 f8b2 	bl	8003910 <calloc>
>>>>>>> Stashed changes
 80007ac:	4603      	mov	r3, r0
 80007ae:	461a      	mov	r2, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.TxLen);
 80007b4:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <UARTInit+0x4c>)
 80007b6:	889b      	ldrh	r3, [r3, #4]
 80007b8:	4619      	mov	r1, r3
 80007ba:	2001      	movs	r0, #1
<<<<<<< Updated upstream
 80007bc:	f002 f9b6 	bl	8002b2c <calloc>
=======
 80007bc:	f003 f8a8 	bl	8003910 <calloc>
>>>>>>> Stashed changes
 80007c0:	4603      	mov	r3, r0
 80007c2:	461a      	mov	r2, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2200      	movs	r2, #0
 80007cc:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2200      	movs	r2, #0
 80007d2:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2200      	movs	r2, #0
 80007d8:	81da      	strh	r2, [r3, #14]

}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	2000008c 	.word	0x2000008c

080007e8 <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	6818      	ldr	r0, [r3, #0]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	6919      	ldr	r1, [r3, #16]
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	88db      	ldrh	r3, [r3, #6]
 80007fc:	461a      	mov	r2, r3
<<<<<<< Updated upstream
 80007fe:	f001 fdcf 	bl	80023a0 <HAL_UART_Receive_DMA>
=======
 80007fe:	f002 fa03 	bl	8002c08 <HAL_UART_Receive_DMA>
>>>>>>> Stashed changes
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <UARTGetRxHead>:
uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 800080a:	b480      	push	{r7}
 800080c:	b083      	sub	sp, #12
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	88db      	ldrh	r3, [r3, #6]
 8000816:	461a      	mov	r2, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	1ad3      	subs	r3, r2, r3
}
 8000824:	4618      	mov	r0, r3
 8000826:	370c      	adds	r7, #12
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <UARTReadChar>:
int16_t UARTReadChar(UARTStucrture *uart)
{
 8000830:	b590      	push	{r4, r7, lr}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	int16_t Result = -1; // -1 Mean no new data
 8000838:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800083c:	81fb      	strh	r3, [r7, #14]

	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart))
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	8a9b      	ldrh	r3, [r3, #20]
 8000842:	461c      	mov	r4, r3
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f7ff ffe0 	bl	800080a <UARTGetRxHead>
 800084a:	4603      	mov	r3, r0
 800084c:	429c      	cmp	r4, r3
 800084e:	d013      	beq.n	8000878 <UARTReadChar+0x48>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail];
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	691b      	ldr	r3, [r3, #16]
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	8a92      	ldrh	r2, [r2, #20]
 8000858:	4413      	add	r3, r2
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	8a9b      	ldrh	r3, [r3, #20]
 8000862:	3301      	adds	r3, #1
 8000864:	687a      	ldr	r2, [r7, #4]
 8000866:	88d2      	ldrh	r2, [r2, #6]
 8000868:	fb93 f1f2 	sdiv	r1, r3, r2
 800086c:	fb02 f201 	mul.w	r2, r2, r1
 8000870:	1a9b      	subs	r3, r3, r2
 8000872:	b29a      	uxth	r2, r3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	829a      	strh	r2, [r3, #20]

	}
	return Result;
 8000878:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 800087c:	4618      	mov	r0, r3
 800087e:	3714      	adds	r7, #20
 8000880:	46bd      	mov	sp, r7
 8000882:	bd90      	pop	{r4, r7, pc}

08000884 <UARTTxDumpBuffer>:
void UARTTxDumpBuffer(UARTStucrture *uart)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	static uint8_t MultiProcessBlocker = 0;

	if (uart->huart->gState == HAL_UART_STATE_READY && !MultiProcessBlocker)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000894:	b2db      	uxtb	r3, r3
 8000896:	2b20      	cmp	r3, #32
 8000898:	d13d      	bne.n	8000916 <UARTTxDumpBuffer+0x92>
 800089a:	4b21      	ldr	r3, [pc, #132]	; (8000920 <UARTTxDumpBuffer+0x9c>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d139      	bne.n	8000916 <UARTTxDumpBuffer+0x92>
	{
		MultiProcessBlocker = 1;
 80008a2:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <UARTTxDumpBuffer+0x9c>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	701a      	strb	r2, [r3, #0]

		if (uart->TxHead != uart->TxTail)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	89da      	ldrh	r2, [r3, #14]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	899b      	ldrh	r3, [r3, #12]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d02d      	beq.n	8000910 <UARTTxDumpBuffer+0x8c>
		{
			//find len of data in buffer (Circular buffer but do in one way)
			uint16_t sentingLen =
					uart->TxHead > uart->TxTail ?
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	89da      	ldrh	r2, [r3, #14]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 80008bc:	429a      	cmp	r2, r3
 80008be:	d906      	bls.n	80008ce <UARTTxDumpBuffer+0x4a>
							uart->TxHead - uart->TxTail :
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	89da      	ldrh	r2, [r3, #14]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	e005      	b.n	80008da <UARTTxDumpBuffer+0x56>
							uart->TxLen - uart->TxTail;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	889a      	ldrh	r2, [r3, #4]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 80008d6:	1ad3      	subs	r3, r2, r3
 80008d8:	b29b      	uxth	r3, r3
 80008da:	81fb      	strh	r3, [r7, #14]

			//sent data via DMA
			HAL_UART_Transmit_DMA(uart->huart, &(uart->TxBuffer[uart->TxTail]),
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	6818      	ldr	r0, [r3, #0]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	689b      	ldr	r3, [r3, #8]
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	8992      	ldrh	r2, [r2, #12]
 80008e8:	4413      	add	r3, r2
 80008ea:	89fa      	ldrh	r2, [r7, #14]
 80008ec:	4619      	mov	r1, r3
<<<<<<< Updated upstream
 80008ee:	f001 fceb 	bl	80022c8 <HAL_UART_Transmit_DMA>
=======
 80008ee:	f002 f91f 	bl	8002b30 <HAL_UART_Transmit_DMA>
>>>>>>> Stashed changes
					sentingLen);
			//move tail to new position
			uart->TxTail = (uart->TxTail + sentingLen) % uart->TxLen;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	899b      	ldrh	r3, [r3, #12]
 80008f6:	461a      	mov	r2, r3
 80008f8:	89fb      	ldrh	r3, [r7, #14]
 80008fa:	4413      	add	r3, r2
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	8892      	ldrh	r2, [r2, #4]
 8000900:	fb93 f1f2 	sdiv	r1, r3, r2
 8000904:	fb02 f201 	mul.w	r2, r2, r1
 8000908:	1a9b      	subs	r3, r3, r2
 800090a:	b29a      	uxth	r2, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	819a      	strh	r2, [r3, #12]

		}
		MultiProcessBlocker = 0;
 8000910:	4b03      	ldr	r3, [pc, #12]	; (8000920 <UARTTxDumpBuffer+0x9c>)
 8000912:	2200      	movs	r2, #0
 8000914:	701a      	strb	r2, [r3, #0]
	}
}
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	200001b0 	.word	0x200001b0

08000924 <UARTTxWrite>:
void UARTTxWrite(UARTStucrture *uart, uint8_t *pData, uint16_t len)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b086      	sub	sp, #24
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	4613      	mov	r3, r2
 8000930:	80fb      	strh	r3, [r7, #6]
	//check data len is more than buffur?
	uint16_t lenAddBuffer = (len <= uart->TxLen) ? len : uart->TxLen;
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	889b      	ldrh	r3, [r3, #4]
 8000936:	88fa      	ldrh	r2, [r7, #6]
 8000938:	4293      	cmp	r3, r2
 800093a:	bf28      	it	cs
 800093c:	4613      	movcs	r3, r2
 800093e:	82fb      	strh	r3, [r7, #22]
	// find number of data before end of ring buffer
	uint16_t numberOfdataCanCopy =
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8000940:	8afa      	ldrh	r2, [r7, #22]
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	889b      	ldrh	r3, [r3, #4]
 8000946:	4619      	mov	r1, r3
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	89db      	ldrh	r3, [r3, #14]
 800094c:	1acb      	subs	r3, r1, r3
					lenAddBuffer : uart->TxLen - uart->TxHead;
 800094e:	4293      	cmp	r3, r2
 8000950:	bfa8      	it	ge
 8000952:	4613      	movge	r3, r2
	uint16_t numberOfdataCanCopy =
 8000954:	82bb      	strh	r3, [r7, #20]
	//copy data to the buffer
	memcpy(&(uart->TxBuffer[uart->TxHead]), pData, numberOfdataCanCopy);
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	689b      	ldr	r3, [r3, #8]
 800095a:	68fa      	ldr	r2, [r7, #12]
 800095c:	89d2      	ldrh	r2, [r2, #14]
 800095e:	4413      	add	r3, r2
 8000960:	8aba      	ldrh	r2, [r7, #20]
 8000962:	68b9      	ldr	r1, [r7, #8]
 8000964:	4618      	mov	r0, r3
<<<<<<< Updated upstream
 8000966:	f002 f913 	bl	8002b90 <memcpy>
=======
 8000966:	f003 f805 	bl	8003974 <memcpy>
>>>>>>> Stashed changes

	//Move Head to new position

	uart->TxHead = (uart->TxHead + lenAddBuffer) % uart->TxLen;
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	89db      	ldrh	r3, [r3, #14]
 800096e:	461a      	mov	r2, r3
 8000970:	8afb      	ldrh	r3, [r7, #22]
 8000972:	4413      	add	r3, r2
 8000974:	68fa      	ldr	r2, [r7, #12]
 8000976:	8892      	ldrh	r2, [r2, #4]
 8000978:	fb93 f1f2 	sdiv	r1, r3, r2
 800097c:	fb02 f201 	mul.w	r2, r2, r1
 8000980:	1a9b      	subs	r3, r3, r2
 8000982:	b29a      	uxth	r2, r3
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	81da      	strh	r2, [r3, #14]
	//Check that we copy all data That We can?
	if (lenAddBuffer != numberOfdataCanCopy)
 8000988:	8afa      	ldrh	r2, [r7, #22]
 800098a:	8abb      	ldrh	r3, [r7, #20]
 800098c:	429a      	cmp	r2, r3
 800098e:	d00a      	beq.n	80009a6 <UARTTxWrite+0x82>
	{
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	6898      	ldr	r0, [r3, #8]
 8000994:	8abb      	ldrh	r3, [r7, #20]
 8000996:	68ba      	ldr	r2, [r7, #8]
 8000998:	18d1      	adds	r1, r2, r3
				lenAddBuffer - numberOfdataCanCopy);
 800099a:	8afa      	ldrh	r2, [r7, #22]
 800099c:	8abb      	ldrh	r3, [r7, #20]
 800099e:	1ad3      	subs	r3, r2, r3
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 80009a0:	461a      	mov	r2, r3
<<<<<<< Updated upstream
 80009a2:	f002 f8f5 	bl	8002b90 <memcpy>
=======
 80009a2:	f002 ffe7 	bl	8003974 <memcpy>
>>>>>>> Stashed changes
	}
	UARTTxDumpBuffer(uart);
 80009a6:	68f8      	ldr	r0, [r7, #12]
 80009a8:	f7ff ff6c 	bl	8000884 <UARTTxDumpBuffer>

}
 80009ac:	bf00      	nop
 80009ae:	3718      	adds	r7, #24
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <DynamixelProtocal2>:


void DynamixelProtocal2(uint8_t *Memory, uint8_t MotorID, int16_t dataIn,
		UARTStucrture *uart)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b09a      	sub	sp, #104	; 0x68
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	60f8      	str	r0, [r7, #12]
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	460b      	mov	r3, r1
 80009c0:	72fb      	strb	r3, [r7, #11]
 80009c2:	4613      	mov	r3, r2
 80009c4:	813b      	strh	r3, [r7, #8]
	static uint16_t packetSize = 0;
	static uint16_t CRC_accum;
	static uint16_t ParamNum = 0;

	//State Machine
	switch (State)
 80009c6:	4b84      	ldr	r3, [pc, #528]	; (8000bd8 <DynamixelProtocal2+0x224>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2b0a      	cmp	r3, #10
<<<<<<< Updated upstream
 80009cc:	f200 828e 	bhi.w	8000eec <DynamixelProtocal2+0x538>
=======
 80009cc:	f200 82d5 	bhi.w	8000f7a <DynamixelProtocal2+0x5c6>
>>>>>>> Stashed changes
 80009d0:	a201      	add	r2, pc, #4	; (adr r2, 80009d8 <DynamixelProtocal2+0x24>)
 80009d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d6:	bf00      	nop
 80009d8:	08000a05 	.word	0x08000a05
 80009dc:	08000a17 	.word	0x08000a17
 80009e0:	08000a29 	.word	0x08000a29
 80009e4:	08000a4b 	.word	0x08000a4b
 80009e8:	08000a63 	.word	0x08000a63
 80009ec:	08000a99 	.word	0x08000a99
 80009f0:	08000aab 	.word	0x08000aab
 80009f4:	08000ac9 	.word	0x08000ac9
 80009f8:	08000adf 	.word	0x08000adf
 80009fc:	08000b23 	.word	0x08000b23
 8000a00:	08000b73 	.word	0x08000b73
	{
	case DNMXP_idle:
		if (dataIn == 0xFF)
 8000a04:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000a08:	2bff      	cmp	r3, #255	; 0xff
<<<<<<< Updated upstream
 8000a0a:	f040 826a 	bne.w	8000ee2 <DynamixelProtocal2+0x52e>
=======
 8000a0a:	f040 82b1 	bne.w	8000f70 <DynamixelProtocal2+0x5bc>
>>>>>>> Stashed changes
			State = DNMXP_1stHeader;
 8000a0e:	4b72      	ldr	r3, [pc, #456]	; (8000bd8 <DynamixelProtocal2+0x224>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	701a      	strb	r2, [r3, #0]
		break;
<<<<<<< Updated upstream
 8000a14:	e265      	b.n	8000ee2 <DynamixelProtocal2+0x52e>
=======
 8000a14:	e2ac      	b.n	8000f70 <DynamixelProtocal2+0x5bc>
>>>>>>> Stashed changes
	case DNMXP_1stHeader:
		if (dataIn == 0xFF)
 8000a16:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000a1a:	2bff      	cmp	r3, #255	; 0xff
<<<<<<< Updated upstream
 8000a1c:	f040 8263 	bne.w	8000ee6 <DynamixelProtocal2+0x532>
=======
 8000a1c:	f040 82aa 	bne.w	8000f74 <DynamixelProtocal2+0x5c0>
>>>>>>> Stashed changes
			State = DNMXP_2ndHeader;
 8000a20:	4b6d      	ldr	r3, [pc, #436]	; (8000bd8 <DynamixelProtocal2+0x224>)
 8000a22:	2202      	movs	r2, #2
 8000a24:	701a      	strb	r2, [r3, #0]
		break;
<<<<<<< Updated upstream
 8000a26:	e25e      	b.n	8000ee6 <DynamixelProtocal2+0x532>
=======
 8000a26:	e2a5      	b.n	8000f74 <DynamixelProtocal2+0x5c0>
>>>>>>> Stashed changes
	case DNMXP_2ndHeader:
		if (dataIn == 0xFD)
 8000a28:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000a2c:	2bfd      	cmp	r3, #253	; 0xfd
 8000a2e:	d103      	bne.n	8000a38 <DynamixelProtocal2+0x84>
			State = DNMXP_3rdHeader;
 8000a30:	4b69      	ldr	r3, [pc, #420]	; (8000bd8 <DynamixelProtocal2+0x224>)
 8000a32:	2203      	movs	r2, #3
 8000a34:	701a      	strb	r2, [r3, #0]
		else if (dataIn == 0xFF)
			; //do nothing
		else
			State = DNMXP_idle;
		break;
<<<<<<< Updated upstream
 8000a36:	e258      	b.n	8000eea <DynamixelProtocal2+0x536>
		else if (dataIn == 0xFF)
 8000a38:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000a3c:	2bff      	cmp	r3, #255	; 0xff
 8000a3e:	f000 8254 	beq.w	8000eea <DynamixelProtocal2+0x536>
=======
 8000a36:	e29f      	b.n	8000f78 <DynamixelProtocal2+0x5c4>
		else if (dataIn == 0xFF)
 8000a38:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000a3c:	2bff      	cmp	r3, #255	; 0xff
 8000a3e:	f000 829b 	beq.w	8000f78 <DynamixelProtocal2+0x5c4>
>>>>>>> Stashed changes
			State = DNMXP_idle;
 8000a42:	4b65      	ldr	r3, [pc, #404]	; (8000bd8 <DynamixelProtocal2+0x224>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	701a      	strb	r2, [r3, #0]
		break;
<<<<<<< Updated upstream
 8000a48:	e24f      	b.n	8000eea <DynamixelProtocal2+0x536>
=======
 8000a48:	e296      	b.n	8000f78 <DynamixelProtocal2+0x5c4>
>>>>>>> Stashed changes
	case DNMXP_3rdHeader:
		if (dataIn == 0x00)
 8000a4a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d103      	bne.n	8000a5a <DynamixelProtocal2+0xa6>
			State = DNMXP_Reserved;
 8000a52:	4b61      	ldr	r3, [pc, #388]	; (8000bd8 <DynamixelProtocal2+0x224>)
 8000a54:	2204      	movs	r2, #4
 8000a56:	701a      	strb	r2, [r3, #0]
		else
			State = DNMXP_idle;
		break;
<<<<<<< Updated upstream
 8000a58:	e248      	b.n	8000eec <DynamixelProtocal2+0x538>
=======
 8000a58:	e28f      	b.n	8000f7a <DynamixelProtocal2+0x5c6>
>>>>>>> Stashed changes
			State = DNMXP_idle;
 8000a5a:	4b5f      	ldr	r3, [pc, #380]	; (8000bd8 <DynamixelProtocal2+0x224>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	701a      	strb	r2, [r3, #0]
		break;
<<<<<<< Updated upstream
 8000a60:	e244      	b.n	8000eec <DynamixelProtocal2+0x538>
=======
 8000a60:	e28b      	b.n	8000f7a <DynamixelProtocal2+0x5c6>
>>>>>>> Stashed changes
	case DNMXP_Reserved:
		if ((dataIn == MotorID) | (dataIn == 0xFE))
 8000a62:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000a66:	7afb      	ldrb	r3, [r7, #11]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	bf0c      	ite	eq
 8000a6c:	2301      	moveq	r3, #1
 8000a6e:	2300      	movne	r3, #0
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000a76:	2bfe      	cmp	r3, #254	; 0xfe
 8000a78:	bf0c      	ite	eq
 8000a7a:	2301      	moveq	r3, #1
 8000a7c:	2300      	movne	r3, #0
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	4313      	orrs	r3, r2
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d003      	beq.n	8000a90 <DynamixelProtocal2+0xdc>
			State = DNMXP_ID;
 8000a88:	4b53      	ldr	r3, [pc, #332]	; (8000bd8 <DynamixelProtocal2+0x224>)
 8000a8a:	2205      	movs	r2, #5
 8000a8c:	701a      	strb	r2, [r3, #0]
		else
			State = DNMXP_idle;
		break;
<<<<<<< Updated upstream
 8000a8e:	e22d      	b.n	8000eec <DynamixelProtocal2+0x538>
=======
 8000a8e:	e274      	b.n	8000f7a <DynamixelProtocal2+0x5c6>
>>>>>>> Stashed changes
			State = DNMXP_idle;
 8000a90:	4b51      	ldr	r3, [pc, #324]	; (8000bd8 <DynamixelProtocal2+0x224>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	701a      	strb	r2, [r3, #0]
		break;
<<<<<<< Updated upstream
 8000a96:	e229      	b.n	8000eec <DynamixelProtocal2+0x538>
=======
 8000a96:	e270      	b.n	8000f7a <DynamixelProtocal2+0x5c6>
>>>>>>> Stashed changes
	case DNMXP_ID:
		datalen = dataIn & 0xFF;
 8000a98:	893b      	ldrh	r3, [r7, #8]
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	b29a      	uxth	r2, r3
 8000a9e:	4b4f      	ldr	r3, [pc, #316]	; (8000bdc <DynamixelProtocal2+0x228>)
 8000aa0:	801a      	strh	r2, [r3, #0]
		State = DNMXP_LEN1;
 8000aa2:	4b4d      	ldr	r3, [pc, #308]	; (8000bd8 <DynamixelProtocal2+0x224>)
 8000aa4:	2206      	movs	r2, #6
 8000aa6:	701a      	strb	r2, [r3, #0]
		break;
<<<<<<< Updated upstream
 8000aa8:	e220      	b.n	8000eec <DynamixelProtocal2+0x538>
=======
 8000aa8:	e267      	b.n	8000f7a <DynamixelProtocal2+0x5c6>
>>>>>>> Stashed changes
	case DNMXP_LEN1:
		datalen |= (dataIn & 0xFF) << 8;
 8000aaa:	893b      	ldrh	r3, [r7, #8]
 8000aac:	021b      	lsls	r3, r3, #8
 8000aae:	b21a      	sxth	r2, r3
 8000ab0:	4b4a      	ldr	r3, [pc, #296]	; (8000bdc <DynamixelProtocal2+0x228>)
 8000ab2:	881b      	ldrh	r3, [r3, #0]
 8000ab4:	b21b      	sxth	r3, r3
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	b21b      	sxth	r3, r3
 8000aba:	b29a      	uxth	r2, r3
 8000abc:	4b47      	ldr	r3, [pc, #284]	; (8000bdc <DynamixelProtocal2+0x228>)
 8000abe:	801a      	strh	r2, [r3, #0]
		State = DNMXP_LEN2;
 8000ac0:	4b45      	ldr	r3, [pc, #276]	; (8000bd8 <DynamixelProtocal2+0x224>)
 8000ac2:	2207      	movs	r2, #7
 8000ac4:	701a      	strb	r2, [r3, #0]
		break;
<<<<<<< Updated upstream
 8000ac6:	e211      	b.n	8000eec <DynamixelProtocal2+0x538>
=======
 8000ac6:	e258      	b.n	8000f7a <DynamixelProtocal2+0x5c6>
>>>>>>> Stashed changes
	case DNMXP_LEN2:
		inst = dataIn;
 8000ac8:	893b      	ldrh	r3, [r7, #8]
 8000aca:	b2da      	uxtb	r2, r3
 8000acc:	4b44      	ldr	r3, [pc, #272]	; (8000be0 <DynamixelProtocal2+0x22c>)
 8000ace:	701a      	strb	r2, [r3, #0]
		ParamNum = 0;
 8000ad0:	4b44      	ldr	r3, [pc, #272]	; (8000be4 <DynamixelProtocal2+0x230>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	801a      	strh	r2, [r3, #0]
		State = DNMXP_Inst;
 8000ad6:	4b40      	ldr	r3, [pc, #256]	; (8000bd8 <DynamixelProtocal2+0x224>)
 8000ad8:	2208      	movs	r2, #8
 8000ada:	701a      	strb	r2, [r3, #0]
		break;
<<<<<<< Updated upstream
 8000adc:	e206      	b.n	8000eec <DynamixelProtocal2+0x538>
=======
 8000adc:	e24d      	b.n	8000f7a <DynamixelProtocal2+0x5c6>
>>>>>>> Stashed changes
	case DNMXP_Inst:
		if (datalen > 3)
 8000ade:	4b3f      	ldr	r3, [pc, #252]	; (8000bdc <DynamixelProtocal2+0x228>)
 8000ae0:	881b      	ldrh	r3, [r3, #0]
 8000ae2:	2b03      	cmp	r3, #3
 8000ae4:	d910      	bls.n	8000b08 <DynamixelProtocal2+0x154>
		{
			parameter[0] = dataIn;
 8000ae6:	893b      	ldrh	r3, [r7, #8]
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	4b3f      	ldr	r3, [pc, #252]	; (8000be8 <DynamixelProtocal2+0x234>)
 8000aec:	701a      	strb	r2, [r3, #0]
			CollectedData = 1; //inst 1 + para[0] 1
 8000aee:	4b3f      	ldr	r3, [pc, #252]	; (8000bec <DynamixelProtocal2+0x238>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	801a      	strh	r2, [r3, #0]
			State = DNMXP_ParameterCollect;
 8000af4:	4b38      	ldr	r3, [pc, #224]	; (8000bd8 <DynamixelProtocal2+0x224>)
 8000af6:	2209      	movs	r2, #9
 8000af8:	701a      	strb	r2, [r3, #0]
			ParamNum += 1;
 8000afa:	4b3a      	ldr	r3, [pc, #232]	; (8000be4 <DynamixelProtocal2+0x230>)
 8000afc:	881b      	ldrh	r3, [r3, #0]
 8000afe:	3301      	adds	r3, #1
 8000b00:	b29a      	uxth	r2, r3
 8000b02:	4b38      	ldr	r3, [pc, #224]	; (8000be4 <DynamixelProtocal2+0x230>)
 8000b04:	801a      	strh	r2, [r3, #0]
			CRCCheck = dataIn & 0xff;
			State = DNMXP_CRCAndExecute;
			ParamNumnow = ParamNum;
		}

		break;
<<<<<<< Updated upstream
 8000b06:	e1f1      	b.n	8000eec <DynamixelProtocal2+0x538>
=======
 8000b06:	e238      	b.n	8000f7a <DynamixelProtocal2+0x5c6>
>>>>>>> Stashed changes
			CRCCheck = dataIn & 0xff;
 8000b08:	893b      	ldrh	r3, [r7, #8]
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	b29a      	uxth	r2, r3
 8000b0e:	4b38      	ldr	r3, [pc, #224]	; (8000bf0 <DynamixelProtocal2+0x23c>)
 8000b10:	801a      	strh	r2, [r3, #0]
			State = DNMXP_CRCAndExecute;
 8000b12:	4b31      	ldr	r3, [pc, #196]	; (8000bd8 <DynamixelProtocal2+0x224>)
 8000b14:	220a      	movs	r2, #10
 8000b16:	701a      	strb	r2, [r3, #0]
			ParamNumnow = ParamNum;
 8000b18:	4b32      	ldr	r3, [pc, #200]	; (8000be4 <DynamixelProtocal2+0x230>)
 8000b1a:	881a      	ldrh	r2, [r3, #0]
 8000b1c:	4b35      	ldr	r3, [pc, #212]	; (8000bf4 <DynamixelProtocal2+0x240>)
 8000b1e:	801a      	strh	r2, [r3, #0]
		break;
<<<<<<< Updated upstream
 8000b20:	e1e4      	b.n	8000eec <DynamixelProtocal2+0x538>
=======
 8000b20:	e22b      	b.n	8000f7a <DynamixelProtocal2+0x5c6>
>>>>>>> Stashed changes
	case DNMXP_ParameterCollect:

		if (datalen-3 > CollectedData)
 8000b22:	4b2e      	ldr	r3, [pc, #184]	; (8000bdc <DynamixelProtocal2+0x228>)
 8000b24:	881b      	ldrh	r3, [r3, #0]
 8000b26:	3b03      	subs	r3, #3
 8000b28:	4a30      	ldr	r2, [pc, #192]	; (8000bec <DynamixelProtocal2+0x238>)
 8000b2a:	8812      	ldrh	r2, [r2, #0]
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	dd13      	ble.n	8000b58 <DynamixelProtocal2+0x1a4>
		{
			parameter[CollectedData] = dataIn;
 8000b30:	4b2e      	ldr	r3, [pc, #184]	; (8000bec <DynamixelProtocal2+0x238>)
 8000b32:	881b      	ldrh	r3, [r3, #0]
 8000b34:	461a      	mov	r2, r3
 8000b36:	893b      	ldrh	r3, [r7, #8]
 8000b38:	b2d9      	uxtb	r1, r3
 8000b3a:	4b2b      	ldr	r3, [pc, #172]	; (8000be8 <DynamixelProtocal2+0x234>)
 8000b3c:	5499      	strb	r1, [r3, r2]
			CollectedData++;
 8000b3e:	4b2b      	ldr	r3, [pc, #172]	; (8000bec <DynamixelProtocal2+0x238>)
 8000b40:	881b      	ldrh	r3, [r3, #0]
 8000b42:	3301      	adds	r3, #1
 8000b44:	b29a      	uxth	r2, r3
 8000b46:	4b29      	ldr	r3, [pc, #164]	; (8000bec <DynamixelProtocal2+0x238>)
 8000b48:	801a      	strh	r2, [r3, #0]
			ParamNum += 1;
 8000b4a:	4b26      	ldr	r3, [pc, #152]	; (8000be4 <DynamixelProtocal2+0x230>)
 8000b4c:	881b      	ldrh	r3, [r3, #0]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	b29a      	uxth	r2, r3
 8000b52:	4b24      	ldr	r3, [pc, #144]	; (8000be4 <DynamixelProtocal2+0x230>)
 8000b54:	801a      	strh	r2, [r3, #0]
		{
			CRCCheck = dataIn & 0xff;
			State = DNMXP_CRCAndExecute;
			ParamNumnow = ParamNum;
		}
		break;
<<<<<<< Updated upstream
 8000b56:	e1c9      	b.n	8000eec <DynamixelProtocal2+0x538>
=======
 8000b56:	e210      	b.n	8000f7a <DynamixelProtocal2+0x5c6>
>>>>>>> Stashed changes
			CRCCheck = dataIn & 0xff;
 8000b58:	893b      	ldrh	r3, [r7, #8]
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	b29a      	uxth	r2, r3
 8000b5e:	4b24      	ldr	r3, [pc, #144]	; (8000bf0 <DynamixelProtocal2+0x23c>)
 8000b60:	801a      	strh	r2, [r3, #0]
			State = DNMXP_CRCAndExecute;
 8000b62:	4b1d      	ldr	r3, [pc, #116]	; (8000bd8 <DynamixelProtocal2+0x224>)
 8000b64:	220a      	movs	r2, #10
 8000b66:	701a      	strb	r2, [r3, #0]
			ParamNumnow = ParamNum;
 8000b68:	4b1e      	ldr	r3, [pc, #120]	; (8000be4 <DynamixelProtocal2+0x230>)
 8000b6a:	881a      	ldrh	r2, [r3, #0]
 8000b6c:	4b21      	ldr	r3, [pc, #132]	; (8000bf4 <DynamixelProtocal2+0x240>)
 8000b6e:	801a      	strh	r2, [r3, #0]
		break;
<<<<<<< Updated upstream
 8000b70:	e1bc      	b.n	8000eec <DynamixelProtocal2+0x538>
=======
 8000b70:	e203      	b.n	8000f7a <DynamixelProtocal2+0x5c6>
>>>>>>> Stashed changes
	case DNMXP_CRCAndExecute:
		CRCCheck |= (dataIn & 0xff) << 8;
 8000b72:	893b      	ldrh	r3, [r7, #8]
 8000b74:	021b      	lsls	r3, r3, #8
 8000b76:	b21a      	sxth	r2, r3
 8000b78:	4b1d      	ldr	r3, [pc, #116]	; (8000bf0 <DynamixelProtocal2+0x23c>)
 8000b7a:	881b      	ldrh	r3, [r3, #0]
 8000b7c:	b21b      	sxth	r3, r3
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	b21b      	sxth	r3, r3
 8000b82:	b29a      	uxth	r2, r3
 8000b84:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <DynamixelProtocal2+0x23c>)
 8000b86:	801a      	strh	r2, [r3, #0]
		//Check CRC
		CRC_accum = 0;
 8000b88:	4b1b      	ldr	r3, [pc, #108]	; (8000bf8 <DynamixelProtocal2+0x244>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	801a      	strh	r2, [r3, #0]
		packetSize = datalen + 7;
 8000b8e:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <DynamixelProtocal2+0x228>)
 8000b90:	881b      	ldrh	r3, [r3, #0]
 8000b92:	3307      	adds	r3, #7
 8000b94:	b29a      	uxth	r2, r3
 8000b96:	4b19      	ldr	r3, [pc, #100]	; (8000bfc <DynamixelProtocal2+0x248>)
 8000b98:	801a      	strh	r2, [r3, #0]
		//check overlapse buffer
		if (uart->RxTail - packetSize >= 0) //not overlapse
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	8a9b      	ldrh	r3, [r3, #20]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	4b16      	ldr	r3, [pc, #88]	; (8000bfc <DynamixelProtocal2+0x248>)
 8000ba2:	881b      	ldrh	r3, [r3, #0]
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	db2a      	blt.n	8000c00 <DynamixelProtocal2+0x24c>
		{
			CRC_accum = update_crc(CRC_accum,
 8000baa:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <DynamixelProtocal2+0x244>)
 8000bac:	8818      	ldrh	r0, [r3, #0]
					&(uart->RxBuffer[uart->RxTail - packetSize]),
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	691b      	ldr	r3, [r3, #16]
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	8a92      	ldrh	r2, [r2, #20]
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	4a10      	ldr	r2, [pc, #64]	; (8000bfc <DynamixelProtocal2+0x248>)
 8000bba:	8812      	ldrh	r2, [r2, #0]
 8000bbc:	1a8a      	subs	r2, r1, r2
 8000bbe:	1899      	adds	r1, r3, r2
			CRC_accum = update_crc(CRC_accum,
 8000bc0:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <DynamixelProtocal2+0x248>)
 8000bc2:	881b      	ldrh	r3, [r3, #0]
 8000bc4:	3b02      	subs	r3, #2
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	461a      	mov	r2, r3
<<<<<<< Updated upstream
 8000bca:	f000 f9b3 	bl	8000f34 <update_crc>
=======
 8000bca:	f000 f9df 	bl	8000f8c <update_crc>
>>>>>>> Stashed changes
 8000bce:	4603      	mov	r3, r0
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <DynamixelProtocal2+0x244>)
 8000bd4:	801a      	strh	r2, [r3, #0]
 8000bd6:	e041      	b.n	8000c5c <DynamixelProtocal2+0x2a8>
 8000bd8:	200001b1 	.word	0x200001b1
 8000bdc:	200001b2 	.word	0x200001b2
 8000be0:	200001b4 	.word	0x200001b4
 8000be4:	200001b6 	.word	0x200001b6
 8000be8:	200001b8 	.word	0x200001b8
 8000bec:	200002b8 	.word	0x200002b8
 8000bf0:	200002ba 	.word	0x200002ba
 8000bf4:	200001ae 	.word	0x200001ae
 8000bf8:	200002bc 	.word	0x200002bc
 8000bfc:	200002be 	.word	0x200002be
					packetSize - 2);
		}
		else//overlapse
		{
			uint16_t firstPartStart = uart->RxTail - packetSize + uart->RxLen;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	8a9a      	ldrh	r2, [r3, #20]
 8000c04:	4bb6      	ldr	r3, [pc, #728]	; (8000ee0 <DynamixelProtocal2+0x52c>)
 8000c06:	881b      	ldrh	r3, [r3, #0]
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	b29a      	uxth	r2, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	88db      	ldrh	r3, [r3, #6]
 8000c10:	4413      	add	r3, r2
 8000c12:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
			CRC_accum = update_crc(CRC_accum, &(uart->RxBuffer[firstPartStart]),
 8000c16:	4bb3      	ldr	r3, [pc, #716]	; (8000ee4 <DynamixelProtocal2+0x530>)
 8000c18:	8818      	ldrh	r0, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	691a      	ldr	r2, [r3, #16]
 8000c1e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000c22:	18d1      	adds	r1, r2, r3
					uart->RxLen - firstPartStart);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	88da      	ldrh	r2, [r3, #6]
			CRC_accum = update_crc(CRC_accum, &(uart->RxBuffer[firstPartStart]),
 8000c28:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	461a      	mov	r2, r3
<<<<<<< Updated upstream
 8000c32:	f000 f97f 	bl	8000f34 <update_crc>
=======
 8000c32:	f000 f9ab 	bl	8000f8c <update_crc>
>>>>>>> Stashed changes
 8000c36:	4603      	mov	r3, r0
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4baa      	ldr	r3, [pc, #680]	; (8000ee4 <DynamixelProtocal2+0x530>)
 8000c3c:	801a      	strh	r2, [r3, #0]
			CRC_accum = update_crc(CRC_accum, uart->RxBuffer, uart->RxTail - 2);
 8000c3e:	4ba9      	ldr	r3, [pc, #676]	; (8000ee4 <DynamixelProtocal2+0x530>)
 8000c40:	8818      	ldrh	r0, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6919      	ldr	r1, [r3, #16]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	8a9b      	ldrh	r3, [r3, #20]
 8000c4a:	3b02      	subs	r3, #2
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	461a      	mov	r2, r3
<<<<<<< Updated upstream
 8000c50:	f000 f970 	bl	8000f34 <update_crc>
=======
 8000c50:	f000 f99c 	bl	8000f8c <update_crc>
>>>>>>> Stashed changes
 8000c54:	4603      	mov	r3, r0
 8000c56:	461a      	mov	r2, r3
 8000c58:	4ba2      	ldr	r3, [pc, #648]	; (8000ee4 <DynamixelProtocal2+0x530>)
 8000c5a:	801a      	strh	r2, [r3, #0]

		}
		CRCnow = CRC_accum;
 8000c5c:	4ba1      	ldr	r3, [pc, #644]	; (8000ee4 <DynamixelProtocal2+0x530>)
 8000c5e:	881a      	ldrh	r2, [r3, #0]
 8000c60:	4ba1      	ldr	r3, [pc, #644]	; (8000ee8 <DynamixelProtocal2+0x534>)
 8000c62:	801a      	strh	r2, [r3, #0]
		if (CRC_accum == CRCCheck)
 8000c64:	4b9f      	ldr	r3, [pc, #636]	; (8000ee4 <DynamixelProtocal2+0x530>)
 8000c66:	881a      	ldrh	r2, [r3, #0]
 8000c68:	4ba0      	ldr	r3, [pc, #640]	; (8000eec <DynamixelProtocal2+0x538>)
 8000c6a:	881b      	ldrh	r3, [r3, #0]
 8000c6c:	429a      	cmp	r2, r3
<<<<<<< Updated upstream
 8000c6e:	f040 810e 	bne.w	8000e8e <DynamixelProtocal2+0x4da>
=======
 8000c6e:	f040 8155 	bne.w	8000f1c <DynamixelProtocal2+0x568>
>>>>>>> Stashed changes
		{
			switch (inst)
 8000c72:	4b9f      	ldr	r3, [pc, #636]	; (8000ef0 <DynamixelProtocal2+0x53c>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b03      	cmp	r3, #3
 8000c78:	f000 8096 	beq.w	8000da8 <DynamixelProtocal2+0x3f4>
 8000c7c:	2b03      	cmp	r3, #3
<<<<<<< Updated upstream
 8000c7e:	f300 80dc 	bgt.w	8000e3a <DynamixelProtocal2+0x486>
=======
 8000c7e:	f300 8104 	bgt.w	8000e8a <DynamixelProtocal2+0x4d6>
>>>>>>> Stashed changes
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d002      	beq.n	8000c8c <DynamixelProtocal2+0x2d8>
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	d02a      	beq.n	8000ce0 <DynamixelProtocal2+0x32c>
<<<<<<< Updated upstream
 8000c8a:	e0d6      	b.n	8000e3a <DynamixelProtocal2+0x486>
=======
 8000c8a:	e0fe      	b.n	8000e8a <DynamixelProtocal2+0x4d6>
>>>>>>> Stashed changes
			{
			case 0x01:// ping
			{
				//create packet template
				uint8_t temp[] =
 8000c8c:	4a99      	ldr	r2, [pc, #612]	; (8000ef4 <DynamixelProtocal2+0x540>)
 8000c8e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000c92:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c94:	c303      	stmia	r3!, {r0, r1}
 8000c96:	801a      	strh	r2, [r3, #0]
 8000c98:	3302      	adds	r3, #2
 8000c9a:	0c12      	lsrs	r2, r2, #16
 8000c9c:	701a      	strb	r2, [r3, #0]
				{ 0xff, 0xff, 0xfd, 0x00, 0x00, 0x05, 0x00, 0x55, 0x00, 0x00, 0x00 };
				//config MotorID
				temp[4] = MotorID;
 8000c9e:	7afb      	ldrb	r3, [r7, #11]
 8000ca0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
				//calcuate CRC
				uint16_t crc_calc = update_crc(0, temp, 9);
 8000ca4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ca8:	2209      	movs	r2, #9
 8000caa:	4619      	mov	r1, r3
 8000cac:	2000      	movs	r0, #0
<<<<<<< Updated upstream
 8000cae:	f000 f941 	bl	8000f34 <update_crc>
=======
 8000cae:	f000 f96d 	bl	8000f8c <update_crc>
>>>>>>> Stashed changes
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				temp[9] = crc_calc & 0xff;
 8000cb8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
				temp[10] = (crc_calc >> 8) & 0xFF;
 8000cc2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000cc6:	0a1b      	lsrs	r3, r3, #8
 8000cc8:	b29b      	uxth	r3, r3
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
				//Sent Response Packet
				UARTTxWrite(uart, temp, 11);
 8000cd0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000cd4:	220b      	movs	r2, #11
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f7ff fe23 	bl	8000924 <UARTTxWrite>
				break;
<<<<<<< Updated upstream
 8000cde:	e0fc      	b.n	8000eda <DynamixelProtocal2+0x526>
=======
 8000cde:	e143      	b.n	8000f68 <DynamixelProtocal2+0x5b4>
>>>>>>> Stashed changes
			}

			case 0x02://READ
			{
<<<<<<< Updated upstream
				uint16_t startAddr = (parameter[0]&0xFF)|(parameter[1]<<8 &0xFF);
 8000ce0:	4b8a      	ldr	r3, [pc, #552]	; (8000f0c <DynamixelProtocal2+0x558>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
				startAddrnow = startAddr;
 8000ce8:	4a89      	ldr	r2, [pc, #548]	; (8000f10 <DynamixelProtocal2+0x55c>)
 8000cea:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8000cee:	8013      	strh	r3, [r2, #0]
				uint16_t numberOfDataToRead = (parameter[2]&0xFF)|(parameter[3]<<8 &0xFF);
 8000cf0:	4b86      	ldr	r3, [pc, #536]	; (8000f0c <DynamixelProtocal2+0x558>)
 8000cf2:	789b      	ldrb	r3, [r3, #2]
 8000cf4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
				numberOfDataToReadnow = numberOfDataToRead;
 8000cf8:	4a86      	ldr	r2, [pc, #536]	; (8000f14 <DynamixelProtocal2+0x560>)
 8000cfa:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8000cfe:	8013      	strh	r3, [r2, #0]
				uint8_t temp[] = {0xff,0xff,0xfd,0x00,0x00,0x00,0x00,0x55,0x00};
 8000d00:	4a85      	ldr	r2, [pc, #532]	; (8000f18 <DynamixelProtocal2+0x564>)
 8000d02:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d06:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d08:	c303      	stmia	r3!, {r0, r1}
 8000d0a:	701a      	strb	r2, [r3, #0]
				temp[4] = MotorID;
 8000d0c:	7afb      	ldrb	r3, [r7, #11]
 8000d0e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
				temp[5] = (numberOfDataToRead + 4) & 0xff ; // +inst+err+crc1+crc2
 8000d12:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	3304      	adds	r3, #4
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
				temp[6] = ((numberOfDataToRead + 4)>>8) & 0xff ;
 8000d20:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8000d24:	3304      	adds	r3, #4
 8000d26:	121b      	asrs	r3, r3, #8
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
				uint16_t crc_calc = update_crc(0, temp, 9);
 8000d2e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d32:	2209      	movs	r2, #9
 8000d34:	4619      	mov	r1, r3
 8000d36:	2000      	movs	r0, #0
 8000d38:	f000 f8fc 	bl	8000f34 <update_crc>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
				crc_calc = update_crc(crc_calc ,&(Memory[startAddr]),numberOfDataToRead);
 8000d42:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	18d1      	adds	r1, r2, r3
 8000d4a:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8000d4e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 f8ee 	bl	8000f34 <update_crc>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
				uint8_t crctemp[2];
				crctemp[0] = crc_calc&0xff;
 8000d5e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
				crctemp[1] = (crc_calc>>8)&0xff;
 8000d68:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000d6c:	0a1b      	lsrs	r3, r3, #8
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
				UARTTxWrite(uart, temp,9);
 8000d76:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d7a:	2209      	movs	r2, #9
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f7ff fdd0 	bl	8000924 <UARTTxWrite>
				UARTTxWrite(uart, &(Memory[startAddr]),numberOfDataToRead);
 8000d84:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8000d88:	68fa      	ldr	r2, [r7, #12]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8000d90:	4619      	mov	r1, r3
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f7ff fdc6 	bl	8000924 <UARTTxWrite>
				UARTTxWrite(uart, crctemp,2);
 8000d98:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d9c:	2202      	movs	r2, #2
 8000d9e:	4619      	mov	r1, r3
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f7ff fdbf 	bl	8000924 <UARTTxWrite>
				break;
 8000da6:	e098      	b.n	8000eda <DynamixelProtocal2+0x526>
=======
				uint16_t startAddr = ((parameter[1]& 0xFF) <<8)|(parameter[0]&0xFF);
 8000ce0:	4b85      	ldr	r3, [pc, #532]	; (8000ef8 <DynamixelProtocal2+0x544>)
 8000ce2:	785b      	ldrb	r3, [r3, #1]
 8000ce4:	021b      	lsls	r3, r3, #8
 8000ce6:	b21a      	sxth	r2, r3
 8000ce8:	4b83      	ldr	r3, [pc, #524]	; (8000ef8 <DynamixelProtocal2+0x544>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	b21b      	sxth	r3, r3
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	b21b      	sxth	r3, r3
 8000cf2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
				startAddrnow = startAddr;
 8000cf6:	4a81      	ldr	r2, [pc, #516]	; (8000efc <DynamixelProtocal2+0x548>)
 8000cf8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8000cfc:	8013      	strh	r3, [r2, #0]
				uint16_t numberOfDataToRead = (parameter[2]&0xFF)|(parameter[3]<<8 &0xFF);
 8000cfe:	4b7e      	ldr	r3, [pc, #504]	; (8000ef8 <DynamixelProtocal2+0x544>)
 8000d00:	789b      	ldrb	r3, [r3, #2]
 8000d02:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
				numberOfDataToReadnow = numberOfDataToRead;
 8000d06:	4a7e      	ldr	r2, [pc, #504]	; (8000f00 <DynamixelProtocal2+0x54c>)
 8000d08:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000d0c:	8013      	strh	r3, [r2, #0]
				uint8_t temp[] = {0xff,0xff,0xfd,0x00,0x00,0x00,0x00,0x55,0x00};
 8000d0e:	4a7d      	ldr	r2, [pc, #500]	; (8000f04 <DynamixelProtocal2+0x550>)
 8000d10:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d14:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d16:	c303      	stmia	r3!, {r0, r1}
 8000d18:	701a      	strb	r2, [r3, #0]
				temp[4] = MotorID;
 8000d1a:	7afb      	ldrb	r3, [r7, #11]
 8000d1c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
				temp[5] = (numberOfDataToRead + 4) & 0xff ; // +inst+err+crc1+crc2
 8000d20:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	3304      	adds	r3, #4
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				temp[6] = ((numberOfDataToRead + 4)>>8) & 0xff ;
 8000d2e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000d32:	3304      	adds	r3, #4
 8000d34:	121b      	asrs	r3, r3, #8
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
				uint16_t crc_calc = update_crc(0, temp, 9);
 8000d3c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d40:	2209      	movs	r2, #9
 8000d42:	4619      	mov	r1, r3
 8000d44:	2000      	movs	r0, #0
 8000d46:	f000 f921 	bl	8000f8c <update_crc>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
				crc_calc = update_crc(crc_calc ,&(Memory[startAddr]),numberOfDataToRead);
 8000d50:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8000d54:	68fa      	ldr	r2, [r7, #12]
 8000d56:	18d1      	adds	r1, r2, r3
 8000d58:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8000d5c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000d60:	4618      	mov	r0, r3
 8000d62:	f000 f913 	bl	8000f8c <update_crc>
 8000d66:	4603      	mov	r3, r0
 8000d68:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
				uint8_t crctemp[2];
				crctemp[0] = crc_calc&0xff;
 8000d6c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
				crctemp[1] = (crc_calc>>8)&0xff;
 8000d76:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000d7a:	0a1b      	lsrs	r3, r3, #8
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				UARTTxWrite(uart, temp,9);
 8000d84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d88:	2209      	movs	r2, #9
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff fdc9 	bl	8000924 <UARTTxWrite>
				UARTTxWrite(uart, &(Memory[startAddr]),numberOfDataToRead);
 8000d92:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8000d96:	68fa      	ldr	r2, [r7, #12]
 8000d98:	4413      	add	r3, r2
 8000d9a:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8000d9e:	4619      	mov	r1, r3
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f7ff fdbf 	bl	8000924 <UARTTxWrite>
				UARTTxWrite(uart, crctemp,2);
 8000da6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000daa:	2202      	movs	r2, #2
 8000dac:	4619      	mov	r1, r3
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f7ff fdb8 	bl	8000924 <UARTTxWrite>
				break;
 8000db4:	e0d8      	b.n	8000f68 <DynamixelProtocal2+0x5b4>
>>>>>>> Stashed changes
			}
			case 0x03://WRITE
			{
				//LAB
<<<<<<< Updated upstream
<<<<<<< HEAD
				uint16_t writeAddr = ((parameter[1]& 0xFF) <<8)|(parameter[0]&0xFF);
 8000db6:	4b55      	ldr	r3, [pc, #340]	; (8000f0c <DynamixelProtocal2+0x558>)
=======
				uint16_t writeAddrStart = ((parameter[1]& 0xFF) <<8)|(parameter[0]&0xFF);
 8000db6:	4b50      	ldr	r3, [pc, #320]	; (8000ef8 <DynamixelProtocal2+0x544>)
>>>>>>> Stashed changes
 8000db8:	785b      	ldrb	r3, [r3, #1]
 8000dba:	021b      	lsls	r3, r3, #8
 8000dbc:	b21a      	sxth	r2, r3
 8000dbe:	4b4e      	ldr	r3, [pc, #312]	; (8000ef8 <DynamixelProtocal2+0x544>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	b21b      	sxth	r3, r3
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	b21b      	sxth	r3, r3
<<<<<<< Updated upstream
 8000dc8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
				uint16_t dataWrite = ((parameter[2]& 0xFF) <<8)|(parameter[3]&0xFF);
 8000dcc:	4b4f      	ldr	r3, [pc, #316]	; (8000f0c <DynamixelProtocal2+0x558>)
 8000dce:	789b      	ldrb	r3, [r3, #2]
 8000dd0:	021b      	lsls	r3, r3, #8
 8000dd2:	b21a      	sxth	r2, r3
 8000dd4:	4b4d      	ldr	r3, [pc, #308]	; (8000f0c <DynamixelProtocal2+0x558>)
 8000dd6:	78db      	ldrb	r3, [r3, #3]
 8000dd8:	b21b      	sxth	r3, r3
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	b21b      	sxth	r3, r3
 8000dde:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
=======
				uint16_t writeAddr = (parameter[0]&0xFF)|(parameter[1]<<8 &0xFF);
 8000da8:	4b58      	ldr	r3, [pc, #352]	; (8000f0c <DynamixelProtocal2+0x558>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
				uint8_t dataWrite = (parameter[2]&0xFF);
 8000db0:	4b56      	ldr	r3, [pc, #344]	; (8000f0c <DynamixelProtocal2+0x558>)
 8000db2:	789b      	ldrb	r3, [r3, #2]
 8000db4:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
>>>>>>> parent of 879a57c (Finalize in new project)
				writeAddrnow = writeAddr;
 8000db8:	4a58      	ldr	r2, [pc, #352]	; (8000f1c <DynamixelProtocal2+0x568>)
 8000dba:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000dbe:	8013      	strh	r3, [r2, #0]
				dataWritenow = dataWrite;
 8000dc0:	4a57      	ldr	r2, [pc, #348]	; (8000f20 <DynamixelProtocal2+0x56c>)
 8000dc2:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8000dc6:	7013      	strb	r3, [r2, #0]
				uint8_t temp[] = { 0xff, 0xff, 0xfd, 0x00, 0x00, 0x04, 0x00, 0x55, 0x00, 0x00, 0x00 };
 8000dc8:	4a56      	ldr	r2, [pc, #344]	; (8000f24 <DynamixelProtocal2+0x570>)
 8000dca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dce:	ca07      	ldmia	r2, {r0, r1, r2}
 8000dd0:	c303      	stmia	r3!, {r0, r1}
 8000dd2:	801a      	strh	r2, [r3, #0]
 8000dd4:	3302      	adds	r3, #2
 8000dd6:	0c12      	lsrs	r2, r2, #16
 8000dd8:	701a      	strb	r2, [r3, #0]
				if(writeAddr > 0xFE)
 8000dda:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000dde:	2bfe      	cmp	r3, #254	; 0xfe
 8000de0:	d903      	bls.n	8000dea <DynamixelProtocal2+0x436>
				{
					temp[8] = 0x04;
 8000de2:	2304      	movs	r3, #4
 8000de4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8000de8:	e006      	b.n	8000df8 <DynamixelProtocal2+0x444>
				}
				else
				{
					Memory[writeAddr] = dataWrite;
 8000dea:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	4413      	add	r3, r2
 8000df2:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 8000df6:	701a      	strb	r2, [r3, #0]
				}
				temp[4] = MotorID;
 8000df8:	7afb      	ldrb	r3, [r7, #11]
 8000dfa:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
				uint16_t crc_calc = update_crc(0, temp, 9);
 8000dfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e02:	2209      	movs	r2, #9
 8000e04:	4619      	mov	r1, r3
 8000e06:	2000      	movs	r0, #0
 8000e08:	f000 f894 	bl	8000f34 <update_crc>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
				temp[9] = crc_calc & 0xff;
 8000e12:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				temp[10] = (crc_calc >> 8) & 0xFF;
 8000e1c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000e20:	0a1b      	lsrs	r3, r3, #8
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				UARTTxWrite(uart, temp, 11);
 8000e2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e2e:	220b      	movs	r2, #11
 8000e30:	4619      	mov	r1, r3
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f7ff fd76 	bl	8000924 <UARTTxWrite>
				break;
 8000e38:	e04f      	b.n	8000eda <DynamixelProtocal2+0x526>
=======
 8000dc8:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
				uint8_t temp[] = {0xff, 0xff, 0xfd, 0x00, 0x00, 0x04, 0x00, 0x55, 0x00, 0x00, 0x00};
 8000dcc:	4a4e      	ldr	r2, [pc, #312]	; (8000f08 <DynamixelProtocal2+0x554>)
 8000dce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dd2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000dd4:	c303      	stmia	r3!, {r0, r1}
 8000dd6:	801a      	strh	r2, [r3, #0]
 8000dd8:	3302      	adds	r3, #2
 8000dda:	0c12      	lsrs	r2, r2, #16
 8000ddc:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < CollectedData - 2; ++i)
 8000dde:	2300      	movs	r3, #0
 8000de0:	667b      	str	r3, [r7, #100]	; 0x64
 8000de2:	e02b      	b.n	8000e3c <DynamixelProtocal2+0x488>
				{
					writeAddrnow = writeAddrStart+i;
 8000de4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000de6:	b29a      	uxth	r2, r3
 8000de8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000dec:	4413      	add	r3, r2
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	4b46      	ldr	r3, [pc, #280]	; (8000f0c <DynamixelProtocal2+0x558>)
 8000df2:	801a      	strh	r2, [r3, #0]
					dataWritenow = parameter[2+i];
 8000df4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000df6:	3302      	adds	r3, #2
 8000df8:	4a3f      	ldr	r2, [pc, #252]	; (8000ef8 <DynamixelProtocal2+0x544>)
 8000dfa:	5cd3      	ldrb	r3, [r2, r3]
 8000dfc:	b29a      	uxth	r2, r3
 8000dfe:	4b44      	ldr	r3, [pc, #272]	; (8000f10 <DynamixelProtocal2+0x55c>)
 8000e00:	801a      	strh	r2, [r3, #0]
					if(writeAddrStart+i > 0xFE)
 8000e02:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8000e06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e08:	4413      	add	r3, r2
 8000e0a:	2bfe      	cmp	r3, #254	; 0xfe
 8000e0c:	dd07      	ble.n	8000e1e <DynamixelProtocal2+0x46a>
					{
						temp[8] = 0x04;
 8000e0e:	2304      	movs	r3, #4
 8000e10:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
						i = CollectedData - 2;
 8000e14:	4b3f      	ldr	r3, [pc, #252]	; (8000f14 <DynamixelProtocal2+0x560>)
 8000e16:	881b      	ldrh	r3, [r3, #0]
 8000e18:	3b02      	subs	r3, #2
 8000e1a:	667b      	str	r3, [r7, #100]	; 0x64
 8000e1c:	e00b      	b.n	8000e36 <DynamixelProtocal2+0x482>
					}
					else
					{
						Memory[writeAddrStart+i] = parameter[2+i];
 8000e1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e20:	1c9a      	adds	r2, r3, #2
 8000e22:	f8b7 105e 	ldrh.w	r1, [r7, #94]	; 0x5e
 8000e26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e28:	440b      	add	r3, r1
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	440b      	add	r3, r1
 8000e30:	4931      	ldr	r1, [pc, #196]	; (8000ef8 <DynamixelProtocal2+0x544>)
 8000e32:	5c8a      	ldrb	r2, [r1, r2]
 8000e34:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < CollectedData - 2; ++i)
 8000e36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e38:	3301      	adds	r3, #1
 8000e3a:	667b      	str	r3, [r7, #100]	; 0x64
 8000e3c:	4b35      	ldr	r3, [pc, #212]	; (8000f14 <DynamixelProtocal2+0x560>)
 8000e3e:	881b      	ldrh	r3, [r3, #0]
 8000e40:	3b02      	subs	r3, #2
 8000e42:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000e44:	429a      	cmp	r2, r3
 8000e46:	dbcd      	blt.n	8000de4 <DynamixelProtocal2+0x430>
					}
				}
				temp[4] = MotorID;
 8000e48:	7afb      	ldrb	r3, [r7, #11]
 8000e4a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				uint16_t crc_calc = update_crc(0, temp, 9);
 8000e4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e52:	2209      	movs	r2, #9
 8000e54:	4619      	mov	r1, r3
 8000e56:	2000      	movs	r0, #0
 8000e58:	f000 f898 	bl	8000f8c <update_crc>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
				temp[9] = crc_calc & 0xff;
 8000e62:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
				temp[10] = (crc_calc >> 8) & 0xFF;
 8000e6c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8000e70:	0a1b      	lsrs	r3, r3, #8
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
				UARTTxWrite(uart, temp, 11);
 8000e7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e7e:	220b      	movs	r2, #11
 8000e80:	4619      	mov	r1, r3
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff fd4e 	bl	8000924 <UARTTxWrite>
				break;
 8000e88:	e06e      	b.n	8000f68 <DynamixelProtocal2+0x5b4>
>>>>>>> Stashed changes


			}
			default: //Unknown Inst
			{
				uint8_t temp[] =
<<<<<<< Updated upstream
 8000e3a:	4a3b      	ldr	r2, [pc, #236]	; (8000f28 <DynamixelProtocal2+0x574>)
 8000e3c:	f107 0320 	add.w	r3, r7, #32
 8000e40:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e42:	c303      	stmia	r3!, {r0, r1}
 8000e44:	801a      	strh	r2, [r3, #0]
 8000e46:	3302      	adds	r3, #2
 8000e48:	0c12      	lsrs	r2, r2, #16
 8000e4a:	701a      	strb	r2, [r3, #0]
				{ 0xff, 0xff, 0xfd, 0x00, 0x00, 0x05, 0x00, 0x55, 0x02, 0x00,
						0x00 };
				temp[4] = MotorID;
 8000e4c:	7afb      	ldrb	r3, [r7, #11]
 8000e4e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				uint16_t crc_calc = update_crc(0, temp, 9);
 8000e52:	f107 0320 	add.w	r3, r7, #32
 8000e56:	2209      	movs	r2, #9
 8000e58:	4619      	mov	r1, r3
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f000 f86a 	bl	8000f34 <update_crc>
 8000e60:	4603      	mov	r3, r0
 8000e62:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				temp[9] = crc_calc & 0xff;
 8000e66:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
				temp[10] = (crc_calc >> 8) & 0xFF;
 8000e70:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000e74:	0a1b      	lsrs	r3, r3, #8
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				UARTTxWrite(uart, temp, 11);
 8000e7e:	f107 0320 	add.w	r3, r7, #32
 8000e82:	220b      	movs	r2, #11
 8000e84:	4619      	mov	r1, r3
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff fd4c 	bl	8000924 <UARTTxWrite>

				break;
 8000e8c:	e025      	b.n	8000eda <DynamixelProtocal2+0x526>
=======
 8000e8a:	4a23      	ldr	r2, [pc, #140]	; (8000f18 <DynamixelProtocal2+0x564>)
 8000e8c:	f107 031c 	add.w	r3, r7, #28
 8000e90:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e92:	c303      	stmia	r3!, {r0, r1}
 8000e94:	801a      	strh	r2, [r3, #0]
 8000e96:	3302      	adds	r3, #2
 8000e98:	0c12      	lsrs	r2, r2, #16
 8000e9a:	701a      	strb	r2, [r3, #0]
				{ 0xff, 0xff, 0xfd, 0x00, 0x00, 0x05, 0x00, 0x55, 0x02, 0x00,
						0x00 };
				temp[4] = MotorID;
 8000e9c:	7afb      	ldrb	r3, [r7, #11]
 8000e9e:	f887 3020 	strb.w	r3, [r7, #32]
				uint16_t crc_calc = update_crc(0, temp, 9);
 8000ea2:	f107 031c 	add.w	r3, r7, #28
 8000ea6:	2209      	movs	r2, #9
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	2000      	movs	r0, #0
 8000eac:	f000 f86e 	bl	8000f8c <update_crc>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
				temp[9] = crc_calc & 0xff;
 8000eb6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				temp[10] = (crc_calc >> 8) & 0xFF;
 8000ec0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8000ec4:	0a1b      	lsrs	r3, r3, #8
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				UARTTxWrite(uart, temp, 11);
 8000ece:	f107 031c 	add.w	r3, r7, #28
 8000ed2:	220b      	movs	r2, #11
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f7ff fd24 	bl	8000924 <UARTTxWrite>

				break;
 8000edc:	e044      	b.n	8000f68 <DynamixelProtocal2+0x5b4>
 8000ede:	bf00      	nop
 8000ee0:	200002be 	.word	0x200002be
 8000ee4:	200002bc 	.word	0x200002bc
 8000ee8:	200001a4 	.word	0x200001a4
 8000eec:	200002ba 	.word	0x200002ba
 8000ef0:	200001b4 	.word	0x200001b4
 8000ef4:	08003ac8 	.word	0x08003ac8
 8000ef8:	200001b8 	.word	0x200001b8
 8000efc:	200001aa 	.word	0x200001aa
 8000f00:	200001ac 	.word	0x200001ac
 8000f04:	08003ad4 	.word	0x08003ad4
 8000f08:	08003ae0 	.word	0x08003ae0
 8000f0c:	200001a6 	.word	0x200001a6
 8000f10:	200001a8 	.word	0x200001a8
 8000f14:	200002b8 	.word	0x200002b8
 8000f18:	08003aec 	.word	0x08003aec
>>>>>>> Stashed changes
			}
			}
		}
		else //crc error
		{
			uint8_t temp[] =
<<<<<<< Updated upstream
 8000e8e:	4a27      	ldr	r2, [pc, #156]	; (8000f2c <DynamixelProtocal2+0x578>)
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e96:	c303      	stmia	r3!, {r0, r1}
 8000e98:	801a      	strh	r2, [r3, #0]
 8000e9a:	3302      	adds	r3, #2
 8000e9c:	0c12      	lsrs	r2, r2, #16
 8000e9e:	701a      	strb	r2, [r3, #0]
			{ 0xff, 0xff, 0xfd, 0x00, 0x00, 0x05, 0x00, 0x55, 0x03, 0x00, 0x00 };
			temp[4] = MotorID;
 8000ea0:	7afb      	ldrb	r3, [r7, #11]
 8000ea2:	763b      	strb	r3, [r7, #24]
			uint16_t crc_calc = update_crc(0, temp, 9);
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	2209      	movs	r2, #9
 8000eaa:	4619      	mov	r1, r3
 8000eac:	2000      	movs	r0, #0
 8000eae:	f000 f841 	bl	8000f34 <update_crc>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
			temp[9] = crc_calc & 0xff;
 8000eb8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	777b      	strb	r3, [r7, #29]
			temp[10] = (crc_calc >> 8) & 0xFF;
 8000ec0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8000ec4:	0a1b      	lsrs	r3, r3, #8
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	77bb      	strb	r3, [r7, #30]
			UARTTxWrite(uart, temp, 11);
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	220b      	movs	r2, #11
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f7ff fd25 	bl	8000924 <UARTTxWrite>
		}
		State = DNMXP_idle;
 8000eda:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <DynamixelProtocal2+0x57c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	701a      	strb	r2, [r3, #0]
		break;
 8000ee0:	e004      	b.n	8000eec <DynamixelProtocal2+0x538>
		break;
 8000ee2:	bf00      	nop
 8000ee4:	e002      	b.n	8000eec <DynamixelProtocal2+0x538>
		break;
 8000ee6:	bf00      	nop
 8000ee8:	e000      	b.n	8000eec <DynamixelProtocal2+0x538>
		break;
 8000eea:	bf00      	nop
	}

}
 8000eec:	bf00      	nop
 8000eee:	3768      	adds	r7, #104	; 0x68
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	200002be 	.word	0x200002be
 8000ef8:	200002bc 	.word	0x200002bc
 8000efc:	200001a4 	.word	0x200001a4
 8000f00:	200002ba 	.word	0x200002ba
 8000f04:	200001b4 	.word	0x200001b4
 8000f08:	08002ce4 	.word	0x08002ce4
 8000f0c:	200001b8 	.word	0x200001b8
 8000f10:	200001aa 	.word	0x200001aa
 8000f14:	200001ac 	.word	0x200001ac
 8000f18:	08002cf0 	.word	0x08002cf0
 8000f1c:	200001a6 	.word	0x200001a6
 8000f20:	200001a8 	.word	0x200001a8
 8000f24:	08002cfc 	.word	0x08002cfc
 8000f28:	08002d08 	.word	0x08002d08
 8000f2c:	08002d14 	.word	0x08002d14
 8000f30:	200001b1 	.word	0x200001b1

08000f34 <update_crc>:
unsigned short update_crc(unsigned short crc_accum, unsigned char *data_blk_ptr,
		unsigned short data_blk_size)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	463b      	mov	r3, r7
 8000f3e:	6019      	str	r1, [r3, #0]
 8000f40:	4611      	mov	r1, r2
 8000f42:	1dbb      	adds	r3, r7, #6
 8000f44:	4602      	mov	r2, r0
 8000f46:	801a      	strh	r2, [r3, #0]
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	460a      	mov	r2, r1
 8000f4c:	801a      	strh	r2, [r3, #0]
	unsigned short i, j;
	unsigned short crc_table[256] =
 8000f4e:	f107 030c 	add.w	r3, r7, #12
 8000f52:	4a1e      	ldr	r2, [pc, #120]	; (8000fcc <update_crc+0x98>)
 8000f54:	4618      	mov	r0, r3
 8000f56:	4611      	mov	r1, r2
 8000f58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	f001 fe17 	bl	8002b90 <memcpy>
=======
 8000f1c:	4a19      	ldr	r2, [pc, #100]	; (8000f84 <DynamixelProtocal2+0x5d0>)
 8000f1e:	f107 0310 	add.w	r3, r7, #16
 8000f22:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f24:	c303      	stmia	r3!, {r0, r1}
 8000f26:	801a      	strh	r2, [r3, #0]
 8000f28:	3302      	adds	r3, #2
 8000f2a:	0c12      	lsrs	r2, r2, #16
 8000f2c:	701a      	strb	r2, [r3, #0]
			{ 0xff, 0xff, 0xfd, 0x00, 0x00, 0x05, 0x00, 0x55, 0x03, 0x00, 0x00 };
			temp[4] = MotorID;
 8000f2e:	7afb      	ldrb	r3, [r7, #11]
 8000f30:	753b      	strb	r3, [r7, #20]
			uint16_t crc_calc = update_crc(0, temp, 9);
 8000f32:	f107 0310 	add.w	r3, r7, #16
 8000f36:	2209      	movs	r2, #9
 8000f38:	4619      	mov	r1, r3
 8000f3a:	2000      	movs	r0, #0
 8000f3c:	f000 f826 	bl	8000f8c <update_crc>
 8000f40:	4603      	mov	r3, r0
 8000f42:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
			temp[9] = crc_calc & 0xff;
 8000f46:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	767b      	strb	r3, [r7, #25]
			temp[10] = (crc_calc >> 8) & 0xFF;
 8000f4e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8000f52:	0a1b      	lsrs	r3, r3, #8
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	76bb      	strb	r3, [r7, #26]
			UARTTxWrite(uart, temp, 11);
 8000f5a:	f107 0310 	add.w	r3, r7, #16
 8000f5e:	220b      	movs	r2, #11
 8000f60:	4619      	mov	r1, r3
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff fcde 	bl	8000924 <UARTTxWrite>
		}
		State = DNMXP_idle;
 8000f68:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <DynamixelProtocal2+0x5d4>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	701a      	strb	r2, [r3, #0]
		break;
 8000f6e:	e004      	b.n	8000f7a <DynamixelProtocal2+0x5c6>
		break;
 8000f70:	bf00      	nop
 8000f72:	e002      	b.n	8000f7a <DynamixelProtocal2+0x5c6>
		break;
 8000f74:	bf00      	nop
 8000f76:	e000      	b.n	8000f7a <DynamixelProtocal2+0x5c6>
		break;
 8000f78:	bf00      	nop
	}

}
 8000f7a:	bf00      	nop
 8000f7c:	3768      	adds	r7, #104	; 0x68
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	08003af8 	.word	0x08003af8
 8000f88:	200001b1 	.word	0x200001b1

08000f8c <update_crc>:
unsigned short update_crc(unsigned short crc_accum, unsigned char *data_blk_ptr,
		unsigned short data_blk_size)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	463b      	mov	r3, r7
 8000f96:	6019      	str	r1, [r3, #0]
 8000f98:	4611      	mov	r1, r2
 8000f9a:	1dbb      	adds	r3, r7, #6
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	801a      	strh	r2, [r3, #0]
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	460a      	mov	r2, r1
 8000fa4:	801a      	strh	r2, [r3, #0]
	unsigned short i, j;
	unsigned short crc_table[256] =
 8000fa6:	f107 030c 	add.w	r3, r7, #12
 8000faa:	4a1e      	ldr	r2, [pc, #120]	; (8001024 <update_crc+0x98>)
 8000fac:	4618      	mov	r0, r3
 8000fae:	4611      	mov	r1, r2
 8000fb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	f002 fcdd 	bl	8003974 <memcpy>
>>>>>>> Stashed changes
			0x0246, 0x024C, 0x8249, 0x0258, 0x825D, 0x8257, 0x0252, 0x0270,
			0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261, 0x0220,
			0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231, 0x8213,
			0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202 };

	for (j = 0; j < data_blk_size; j++)
<<<<<<< Updated upstream
 8000f62:	2300      	movs	r3, #0
 8000f64:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8000f68:	e023      	b.n	8000fb2 <update_crc+0x7e>
	{
		i = ((unsigned short) (crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 8000f6a:	1dbb      	adds	r3, r7, #6
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	0a1b      	lsrs	r3, r3, #8
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000f76:	4639      	mov	r1, r7
 8000f78:	6809      	ldr	r1, [r1, #0]
 8000f7a:	440b      	add	r3, r1
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	4053      	eors	r3, r2
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 8000f8a:	1dbb      	adds	r3, r7, #6
 8000f8c:	881b      	ldrh	r3, [r3, #0]
 8000f8e:	021b      	lsls	r3, r3, #8
 8000f90:	b21a      	sxth	r2, r3
 8000f92:	f8b7 120c 	ldrh.w	r1, [r7, #524]	; 0x20c
 8000f96:	f107 030c 	add.w	r3, r7, #12
 8000f9a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000f9e:	b21b      	sxth	r3, r3
 8000fa0:	4053      	eors	r3, r2
 8000fa2:	b21a      	sxth	r2, r3
 8000fa4:	1dbb      	adds	r3, r7, #6
 8000fa6:	801a      	strh	r2, [r3, #0]
	for (j = 0; j < data_blk_size; j++)
 8000fa8:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000fac:	3301      	adds	r3, #1
 8000fae:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8000fb8:	881b      	ldrh	r3, [r3, #0]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d3d5      	bcc.n	8000f6a <update_crc+0x36>
	}

	return crc_accum;
 8000fbe:	1dbb      	adds	r3, r7, #6
 8000fc0:	881b      	ldrh	r3, [r3, #0]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	08002d20 	.word	0x08002d20

08000fd0 <Error_Handler>:
=======
 8000fba:	2300      	movs	r3, #0
 8000fbc:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8000fc0:	e023      	b.n	800100a <update_crc+0x7e>
	{
		i = ((unsigned short) (crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 8000fc2:	1dbb      	adds	r3, r7, #6
 8000fc4:	881b      	ldrh	r3, [r3, #0]
 8000fc6:	0a1b      	lsrs	r3, r3, #8
 8000fc8:	b29a      	uxth	r2, r3
 8000fca:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000fce:	4639      	mov	r1, r7
 8000fd0:	6809      	ldr	r1, [r1, #0]
 8000fd2:	440b      	add	r3, r1
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	4053      	eors	r3, r2
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 8000fe2:	1dbb      	adds	r3, r7, #6
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	021b      	lsls	r3, r3, #8
 8000fe8:	b21a      	sxth	r2, r3
 8000fea:	f8b7 120c 	ldrh.w	r1, [r7, #524]	; 0x20c
 8000fee:	f107 030c 	add.w	r3, r7, #12
 8000ff2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000ff6:	b21b      	sxth	r3, r3
 8000ff8:	4053      	eors	r3, r2
 8000ffa:	b21a      	sxth	r2, r3
 8000ffc:	1dbb      	adds	r3, r7, #6
 8000ffe:	801a      	strh	r2, [r3, #0]
	for (j = 0; j < data_blk_size; j++)
 8001000:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8001004:	3301      	adds	r3, #1
 8001006:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	429a      	cmp	r2, r3
 8001014:	d3d5      	bcc.n	8000fc2 <update_crc+0x36>
	}

	return crc_accum;
 8001016:	1dbb      	adds	r3, r7, #6
 8001018:	881b      	ldrh	r3, [r3, #0]
}
 800101a:	4618      	mov	r0, r3
 800101c:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	08003b04 	.word	0x08003b04

08001028 <Error_Handler>:
>>>>>>> Stashed changes
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
<<<<<<< Updated upstream
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
=======
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< Updated upstream
 8000fd4:	b672      	cpsid	i
}
 8000fd6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <Error_Handler+0x8>
	...

08000fdc <HAL_MspInit>:
=======
 800102c:	b672      	cpsid	i
}
 800102e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001030:	e7fe      	b.n	8001030 <Error_Handler+0x8>
	...

08001034 <HAL_MspInit>:
>>>>>>> Stashed changes
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< Updated upstream
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
=======
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< Updated upstream
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	4b10      	ldr	r3, [pc, #64]	; (8001028 <HAL_MspInit+0x4c>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fea:	4a0f      	ldr	r2, [pc, #60]	; (8001028 <HAL_MspInit+0x4c>)
 8000fec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ff2:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <HAL_MspInit+0x4c>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	603b      	str	r3, [r7, #0]
 8001002:	4b09      	ldr	r3, [pc, #36]	; (8001028 <HAL_MspInit+0x4c>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	4a08      	ldr	r2, [pc, #32]	; (8001028 <HAL_MspInit+0x4c>)
 8001008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800100c:	6413      	str	r3, [r2, #64]	; 0x40
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <HAL_MspInit+0x4c>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800101a:	2007      	movs	r0, #7
 800101c:	f000 fa2c 	bl	8001478 <HAL_NVIC_SetPriorityGrouping>
=======
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	4b10      	ldr	r3, [pc, #64]	; (8001080 <HAL_MspInit+0x4c>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001042:	4a0f      	ldr	r2, [pc, #60]	; (8001080 <HAL_MspInit+0x4c>)
 8001044:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001048:	6453      	str	r3, [r2, #68]	; 0x44
 800104a:	4b0d      	ldr	r3, [pc, #52]	; (8001080 <HAL_MspInit+0x4c>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	603b      	str	r3, [r7, #0]
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <HAL_MspInit+0x4c>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	4a08      	ldr	r2, [pc, #32]	; (8001080 <HAL_MspInit+0x4c>)
 8001060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001064:	6413      	str	r3, [r2, #64]	; 0x40
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_MspInit+0x4c>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001072:	2007      	movs	r0, #7
 8001074:	f000 fab8 	bl	80015e8 <HAL_NVIC_SetPriorityGrouping>
>>>>>>> Stashed changes
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< Updated upstream
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40023800 	.word	0x40023800

0800102c <HAL_UART_MspInit>:
=======
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40023800 	.word	0x40023800

08001084 <HAL_UART_MspInit>:
>>>>>>> Stashed changes
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
<<<<<<< Updated upstream
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	; 0x28
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a19      	ldr	r2, [pc, #100]	; (80010b0 <HAL_UART_MspInit+0x84>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d12b      	bne.n	80010a6 <HAL_UART_MspInit+0x7a>
=======
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	; 0x28
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a4c      	ldr	r2, [pc, #304]	; (80011d4 <HAL_UART_MspInit+0x150>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	f040 8091 	bne.w	80011ca <HAL_UART_MspInit+0x146>
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
<<<<<<< Updated upstream
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <HAL_UART_MspInit+0x88>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	4a17      	ldr	r2, [pc, #92]	; (80010b4 <HAL_UART_MspInit+0x88>)
 8001058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800105c:	6413      	str	r3, [r2, #64]	; 0x40
 800105e:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <HAL_UART_MspInit+0x88>)
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <HAL_UART_MspInit+0x88>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a10      	ldr	r2, [pc, #64]	; (80010b4 <HAL_UART_MspInit+0x88>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <HAL_UART_MspInit+0x88>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
=======
 80010a8:	2300      	movs	r3, #0
 80010aa:	613b      	str	r3, [r7, #16]
 80010ac:	4b4a      	ldr	r3, [pc, #296]	; (80011d8 <HAL_UART_MspInit+0x154>)
 80010ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b0:	4a49      	ldr	r2, [pc, #292]	; (80011d8 <HAL_UART_MspInit+0x154>)
 80010b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b6:	6413      	str	r3, [r2, #64]	; 0x40
 80010b8:	4b47      	ldr	r3, [pc, #284]	; (80011d8 <HAL_UART_MspInit+0x154>)
 80010ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c4:	2300      	movs	r3, #0
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	4b43      	ldr	r3, [pc, #268]	; (80011d8 <HAL_UART_MspInit+0x154>)
 80010ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010cc:	4a42      	ldr	r2, [pc, #264]	; (80011d8 <HAL_UART_MspInit+0x154>)
 80010ce:	f043 0301 	orr.w	r3, r3, #1
 80010d2:	6313      	str	r3, [r2, #48]	; 0x30
 80010d4:	4b40      	ldr	r3, [pc, #256]	; (80011d8 <HAL_UART_MspInit+0x154>)
 80010d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	68fb      	ldr	r3, [r7, #12]
>>>>>>> Stashed changes
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
<<<<<<< Updated upstream
 8001086:	230c      	movs	r3, #12
 8001088:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108a:	2302      	movs	r3, #2
 800108c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001092:	2303      	movs	r3, #3
 8001094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001096:	2307      	movs	r3, #7
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	4619      	mov	r1, r3
 80010a0:	4805      	ldr	r0, [pc, #20]	; (80010b8 <HAL_UART_MspInit+0x8c>)
 80010a2:	f000 fab1 	bl	8001608 <HAL_GPIO_Init>
=======
 80010e0:	230c      	movs	r3, #12
 80010e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e4:	2302      	movs	r3, #2
 80010e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ec:	2303      	movs	r3, #3
 80010ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010f0:	2307      	movs	r3, #7
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	4619      	mov	r1, r3
 80010fa:	4838      	ldr	r0, [pc, #224]	; (80011dc <HAL_UART_MspInit+0x158>)
 80010fc:	f000 feb8 	bl	8001e70 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001100:	4b37      	ldr	r3, [pc, #220]	; (80011e0 <HAL_UART_MspInit+0x15c>)
 8001102:	4a38      	ldr	r2, [pc, #224]	; (80011e4 <HAL_UART_MspInit+0x160>)
 8001104:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001106:	4b36      	ldr	r3, [pc, #216]	; (80011e0 <HAL_UART_MspInit+0x15c>)
 8001108:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800110c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800110e:	4b34      	ldr	r3, [pc, #208]	; (80011e0 <HAL_UART_MspInit+0x15c>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001114:	4b32      	ldr	r3, [pc, #200]	; (80011e0 <HAL_UART_MspInit+0x15c>)
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800111a:	4b31      	ldr	r3, [pc, #196]	; (80011e0 <HAL_UART_MspInit+0x15c>)
 800111c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001120:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001122:	4b2f      	ldr	r3, [pc, #188]	; (80011e0 <HAL_UART_MspInit+0x15c>)
 8001124:	2200      	movs	r2, #0
 8001126:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001128:	4b2d      	ldr	r3, [pc, #180]	; (80011e0 <HAL_UART_MspInit+0x15c>)
 800112a:	2200      	movs	r2, #0
 800112c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800112e:	4b2c      	ldr	r3, [pc, #176]	; (80011e0 <HAL_UART_MspInit+0x15c>)
 8001130:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001134:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001136:	4b2a      	ldr	r3, [pc, #168]	; (80011e0 <HAL_UART_MspInit+0x15c>)
 8001138:	2200      	movs	r2, #0
 800113a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800113c:	4b28      	ldr	r3, [pc, #160]	; (80011e0 <HAL_UART_MspInit+0x15c>)
 800113e:	2200      	movs	r2, #0
 8001140:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001142:	4827      	ldr	r0, [pc, #156]	; (80011e0 <HAL_UART_MspInit+0x15c>)
 8001144:	f000 fa92 	bl	800166c <HAL_DMA_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800114e:	f7ff ff6b 	bl	8001028 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a22      	ldr	r2, [pc, #136]	; (80011e0 <HAL_UART_MspInit+0x15c>)
 8001156:	639a      	str	r2, [r3, #56]	; 0x38
 8001158:	4a21      	ldr	r2, [pc, #132]	; (80011e0 <HAL_UART_MspInit+0x15c>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800115e:	4b22      	ldr	r3, [pc, #136]	; (80011e8 <HAL_UART_MspInit+0x164>)
 8001160:	4a22      	ldr	r2, [pc, #136]	; (80011ec <HAL_UART_MspInit+0x168>)
 8001162:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001164:	4b20      	ldr	r3, [pc, #128]	; (80011e8 <HAL_UART_MspInit+0x164>)
 8001166:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800116a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800116c:	4b1e      	ldr	r3, [pc, #120]	; (80011e8 <HAL_UART_MspInit+0x164>)
 800116e:	2240      	movs	r2, #64	; 0x40
 8001170:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001172:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <HAL_UART_MspInit+0x164>)
 8001174:	2200      	movs	r2, #0
 8001176:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001178:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <HAL_UART_MspInit+0x164>)
 800117a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800117e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001180:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <HAL_UART_MspInit+0x164>)
 8001182:	2200      	movs	r2, #0
 8001184:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001186:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <HAL_UART_MspInit+0x164>)
 8001188:	2200      	movs	r2, #0
 800118a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800118c:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <HAL_UART_MspInit+0x164>)
 800118e:	2200      	movs	r2, #0
 8001190:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001192:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <HAL_UART_MspInit+0x164>)
 8001194:	2200      	movs	r2, #0
 8001196:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001198:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <HAL_UART_MspInit+0x164>)
 800119a:	2200      	movs	r2, #0
 800119c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800119e:	4812      	ldr	r0, [pc, #72]	; (80011e8 <HAL_UART_MspInit+0x164>)
 80011a0:	f000 fa64 	bl	800166c <HAL_DMA_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80011aa:	f7ff ff3d 	bl	8001028 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a0d      	ldr	r2, [pc, #52]	; (80011e8 <HAL_UART_MspInit+0x164>)
 80011b2:	635a      	str	r2, [r3, #52]	; 0x34
 80011b4:	4a0c      	ldr	r2, [pc, #48]	; (80011e8 <HAL_UART_MspInit+0x164>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2100      	movs	r1, #0
 80011be:	2026      	movs	r0, #38	; 0x26
 80011c0:	f000 fa1d 	bl	80015fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011c4:	2026      	movs	r0, #38	; 0x26
 80011c6:	f000 fa36 	bl	8001636 <HAL_NVIC_EnableIRQ>
>>>>>>> Stashed changes
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
<<<<<<< Updated upstream
 80010a6:	bf00      	nop
 80010a8:	3728      	adds	r7, #40	; 0x28
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40004400 	.word	0x40004400
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40020000 	.word	0x40020000

080010bc <NMI_Handler>:
=======
 80011ca:	bf00      	nop
 80011cc:	3728      	adds	r7, #40	; 0x28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40004400 	.word	0x40004400
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40020000 	.word	0x40020000
 80011e0:	200002cc 	.word	0x200002cc
 80011e4:	40026088 	.word	0x40026088
 80011e8:	2000032c 	.word	0x2000032c
 80011ec:	400260a0 	.word	0x400260a0

080011f0 <NMI_Handler>:
>>>>>>> Stashed changes
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< Updated upstream
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
=======
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
<<<<<<< Updated upstream
 80010c0:	e7fe      	b.n	80010c0 <NMI_Handler+0x4>

080010c2 <HardFault_Handler>:
=======
 80011f4:	e7fe      	b.n	80011f4 <NMI_Handler+0x4>

080011f6 <HardFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< Updated upstream
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0
=======
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 80010c6:	e7fe      	b.n	80010c6 <HardFault_Handler+0x4>

080010c8 <MemManage_Handler>:
=======
 80011fa:	e7fe      	b.n	80011fa <HardFault_Handler+0x4>

080011fc <MemManage_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< Updated upstream
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
=======
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 80010cc:	e7fe      	b.n	80010cc <MemManage_Handler+0x4>

080010ce <BusFault_Handler>:
=======
 8001200:	e7fe      	b.n	8001200 <MemManage_Handler+0x4>

08001202 <BusFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< Updated upstream
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0
=======
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 80010d2:	e7fe      	b.n	80010d2 <BusFault_Handler+0x4>

080010d4 <UsageFault_Handler>:
=======
 8001206:	e7fe      	b.n	8001206 <BusFault_Handler+0x4>

08001208 <UsageFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< Updated upstream
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
=======
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 80010d8:	e7fe      	b.n	80010d8 <UsageFault_Handler+0x4>

080010da <SVC_Handler>:
=======
 800120c:	e7fe      	b.n	800120c <UsageFault_Handler+0x4>

0800120e <SVC_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< Updated upstream
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0
=======
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< Updated upstream
 80010de:	bf00      	nop
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <DebugMon_Handler>:
=======
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <DebugMon_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< Updated upstream
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
=======
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< Updated upstream
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <PendSV_Handler>:
=======
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <PendSV_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< Updated upstream
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0
=======
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< Updated upstream
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <SysTick_Handler>:
=======
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <SysTick_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< Updated upstream
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
=======
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< Updated upstream
 8001108:	f000 f8c6 	bl	8001298 <HAL_IncTick>
=======
 800123c:	f000 f8e4 	bl	8001408 <HAL_IncTick>
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< Updated upstream
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}

08001110 <_sbrk>:
=======
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}

08001244 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001248:	4802      	ldr	r0, [pc, #8]	; (8001254 <DMA1_Stream5_IRQHandler+0x10>)
 800124a:	f000 fba7 	bl	800199c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	200002cc 	.word	0x200002cc

08001258 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800125c:	4802      	ldr	r0, [pc, #8]	; (8001268 <DMA1_Stream6_IRQHandler+0x10>)
 800125e:	f000 fb9d 	bl	800199c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	2000032c 	.word	0x2000032c

0800126c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001270:	4802      	ldr	r0, [pc, #8]	; (800127c <USART2_IRQHandler+0x10>)
 8001272:	f001 fcf9 	bl	8002c68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	2000038c 	.word	0x2000038c

08001280 <_sbrk>:
>>>>>>> Stashed changes
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
<<<<<<< Updated upstream
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
=======
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
<<<<<<< Updated upstream
 8001118:	4a14      	ldr	r2, [pc, #80]	; (800116c <_sbrk+0x5c>)
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <_sbrk+0x60>)
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	613b      	str	r3, [r7, #16]
=======
 8001288:	4a14      	ldr	r2, [pc, #80]	; (80012dc <_sbrk+0x5c>)
 800128a:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <_sbrk+0x60>)
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
<<<<<<< Updated upstream
 8001124:	4b13      	ldr	r3, [pc, #76]	; (8001174 <_sbrk+0x64>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d102      	bne.n	8001132 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800112c:	4b11      	ldr	r3, [pc, #68]	; (8001174 <_sbrk+0x64>)
 800112e:	4a12      	ldr	r2, [pc, #72]	; (8001178 <_sbrk+0x68>)
 8001130:	601a      	str	r2, [r3, #0]
=======
 8001294:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <_sbrk+0x64>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d102      	bne.n	80012a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800129c:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <_sbrk+0x64>)
 800129e:	4a12      	ldr	r2, [pc, #72]	; (80012e8 <_sbrk+0x68>)
 80012a0:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
<<<<<<< Updated upstream
 8001132:	4b10      	ldr	r3, [pc, #64]	; (8001174 <_sbrk+0x64>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4413      	add	r3, r2
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	429a      	cmp	r2, r3
 800113e:	d207      	bcs.n	8001150 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001140:	f001 fcfc 	bl	8002b3c <__errno>
 8001144:	4603      	mov	r3, r0
 8001146:	220c      	movs	r2, #12
 8001148:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800114a:	f04f 33ff 	mov.w	r3, #4294967295
 800114e:	e009      	b.n	8001164 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001150:	4b08      	ldr	r3, [pc, #32]	; (8001174 <_sbrk+0x64>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001156:	4b07      	ldr	r3, [pc, #28]	; (8001174 <_sbrk+0x64>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4413      	add	r3, r2
 800115e:	4a05      	ldr	r2, [pc, #20]	; (8001174 <_sbrk+0x64>)
 8001160:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001162:	68fb      	ldr	r3, [r7, #12]
}
 8001164:	4618      	mov	r0, r3
 8001166:	3718      	adds	r7, #24
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20020000 	.word	0x20020000
 8001170:	00000400 	.word	0x00000400
 8001174:	200002c0 	.word	0x200002c0
 8001178:	200003e8 	.word	0x200003e8

0800117c <SystemInit>:
=======
 80012a2:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <_sbrk+0x64>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4413      	add	r3, r2
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d207      	bcs.n	80012c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012b0:	f002 fb36 	bl	8003920 <__errno>
 80012b4:	4603      	mov	r3, r0
 80012b6:	220c      	movs	r2, #12
 80012b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ba:	f04f 33ff 	mov.w	r3, #4294967295
 80012be:	e009      	b.n	80012d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <_sbrk+0x64>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012c6:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <_sbrk+0x64>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4413      	add	r3, r2
 80012ce:	4a05      	ldr	r2, [pc, #20]	; (80012e4 <_sbrk+0x64>)
 80012d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012d2:	68fb      	ldr	r3, [r7, #12]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20020000 	.word	0x20020000
 80012e0:	00000400 	.word	0x00000400
 80012e4:	200002c0 	.word	0x200002c0
 80012e8:	200003e8 	.word	0x200003e8

080012ec <SystemInit>:
>>>>>>> Stashed changes
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< Updated upstream
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <SystemInit+0x20>)
 8001182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001186:	4a05      	ldr	r2, [pc, #20]	; (800119c <SystemInit+0x20>)
 8001188:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800118c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012f0:	4b06      	ldr	r3, [pc, #24]	; (800130c <SystemInit+0x20>)
 80012f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012f6:	4a05      	ldr	r2, [pc, #20]	; (800130c <SystemInit+0x20>)
 80012f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> Stashed changes

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< Updated upstream
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <Reset_Handler>:
=======
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <Reset_Handler>:
>>>>>>> Stashed changes

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
<<<<<<< Updated upstream
 80011a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011a4:	480d      	ldr	r0, [pc, #52]	; (80011dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011a6:	490e      	ldr	r1, [pc, #56]	; (80011e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011a8:	4a0e      	ldr	r2, [pc, #56]	; (80011e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011ac:	e002      	b.n	80011b4 <LoopCopyDataInit>

080011ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011b2:	3304      	adds	r3, #4

080011b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b8:	d3f9      	bcc.n	80011ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ba:	4a0b      	ldr	r2, [pc, #44]	; (80011e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011bc:	4c0b      	ldr	r4, [pc, #44]	; (80011ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80011be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c0:	e001      	b.n	80011c6 <LoopFillZerobss>

080011c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c4:	3204      	adds	r2, #4

080011c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c8:	d3fb      	bcc.n	80011c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011ca:	f7ff ffd7 	bl	800117c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ce:	f001 fcbb 	bl	8002b48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011d2:	f7ff f97d 	bl	80004d0 <main>
  bx  lr    
 80011d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80011d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80011e4:	08002f48 	.word	0x08002f48
  ldr r2, =_sbss
 80011e8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80011ec:	200003e4 	.word	0x200003e4

080011f0 <ADC_IRQHandler>:
=======
 8001310:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001348 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001314:	480d      	ldr	r0, [pc, #52]	; (800134c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001316:	490e      	ldr	r1, [pc, #56]	; (8001350 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001318:	4a0e      	ldr	r2, [pc, #56]	; (8001354 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800131a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800131c:	e002      	b.n	8001324 <LoopCopyDataInit>

0800131e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800131e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001322:	3304      	adds	r3, #4

08001324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001328:	d3f9      	bcc.n	800131e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800132a:	4a0b      	ldr	r2, [pc, #44]	; (8001358 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800132c:	4c0b      	ldr	r4, [pc, #44]	; (800135c <LoopFillZerobss+0x26>)
  movs r3, #0
 800132e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001330:	e001      	b.n	8001336 <LoopFillZerobss>

08001332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001334:	3204      	adds	r2, #4

08001336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001338:	d3fb      	bcc.n	8001332 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800133a:	f7ff ffd7 	bl	80012ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800133e:	f002 faf5 	bl	800392c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001342:	f7ff f8c5 	bl	80004d0 <main>
  bx  lr    
 8001346:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001348:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800134c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001350:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001354:	08003d34 	.word	0x08003d34
  ldr r2, =_sbss
 8001358:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800135c:	200003e4 	.word	0x200003e4

08001360 <ADC_IRQHandler>:
>>>>>>> Stashed changes
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
<<<<<<< Updated upstream
 80011f0:	e7fe      	b.n	80011f0 <ADC_IRQHandler>
	...

080011f4 <HAL_Init>:
=======
 8001360:	e7fe      	b.n	8001360 <ADC_IRQHandler>
	...

08001364 <HAL_Init>:
>>>>>>> Stashed changes
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< Updated upstream
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011f8:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <HAL_Init+0x40>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a0d      	ldr	r2, [pc, #52]	; (8001234 <HAL_Init+0x40>)
 80011fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001202:	6013      	str	r3, [r2, #0]
=======
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001368:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <HAL_Init+0x40>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a0d      	ldr	r2, [pc, #52]	; (80013a4 <HAL_Init+0x40>)
 800136e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001372:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
<<<<<<< Updated upstream
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <HAL_Init+0x40>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a0a      	ldr	r2, [pc, #40]	; (8001234 <HAL_Init+0x40>)
 800120a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800120e:	6013      	str	r3, [r2, #0]
=======
 8001374:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <HAL_Init+0x40>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a0a      	ldr	r2, [pc, #40]	; (80013a4 <HAL_Init+0x40>)
 800137a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800137e:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< Updated upstream
 8001210:	4b08      	ldr	r3, [pc, #32]	; (8001234 <HAL_Init+0x40>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a07      	ldr	r2, [pc, #28]	; (8001234 <HAL_Init+0x40>)
 8001216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800121a:	6013      	str	r3, [r2, #0]
=======
 8001380:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <HAL_Init+0x40>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a07      	ldr	r2, [pc, #28]	; (80013a4 <HAL_Init+0x40>)
 8001386:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800138a:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< Updated upstream
 800121c:	2003      	movs	r0, #3
 800121e:	f000 f92b 	bl	8001478 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001222:	2000      	movs	r0, #0
 8001224:	f000 f808 	bl	8001238 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001228:	f7ff fed8 	bl	8000fdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40023c00 	.word	0x40023c00

08001238 <HAL_InitTick>:
=======
 800138c:	2003      	movs	r0, #3
 800138e:	f000 f92b 	bl	80015e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001392:	2000      	movs	r0, #0
 8001394:	f000 f808 	bl	80013a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001398:	f7ff fe4c 	bl	8001034 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40023c00 	.word	0x40023c00

080013a8 <HAL_InitTick>:
>>>>>>> Stashed changes
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< Updated upstream
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <HAL_InitTick+0x54>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <HAL_InitTick+0x58>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	4619      	mov	r1, r3
 800124a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001252:	fbb2 f3f3 	udiv	r3, r2, r3
 8001256:	4618      	mov	r0, r3
 8001258:	f000 f943 	bl	80014e2 <HAL_SYSTICK_Config>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e00e      	b.n	8001284 <HAL_InitTick+0x4c>
=======
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013b0:	4b12      	ldr	r3, [pc, #72]	; (80013fc <HAL_InitTick+0x54>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4b12      	ldr	r3, [pc, #72]	; (8001400 <HAL_InitTick+0x58>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	4619      	mov	r1, r3
 80013ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013be:	fbb3 f3f1 	udiv	r3, r3, r1
 80013c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 f943 	bl	8001652 <HAL_SYSTICK_Config>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e00e      	b.n	80013f4 <HAL_InitTick+0x4c>
>>>>>>> Stashed changes
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< Updated upstream
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2b0f      	cmp	r3, #15
 800126a:	d80a      	bhi.n	8001282 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800126c:	2200      	movs	r2, #0
 800126e:	6879      	ldr	r1, [r7, #4]
 8001270:	f04f 30ff 	mov.w	r0, #4294967295
 8001274:	f000 f90b 	bl	800148e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001278:	4a06      	ldr	r2, [pc, #24]	; (8001294 <HAL_InitTick+0x5c>)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6013      	str	r3, [r2, #0]
=======
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b0f      	cmp	r3, #15
 80013da:	d80a      	bhi.n	80013f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013dc:	2200      	movs	r2, #0
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	f04f 30ff 	mov.w	r0, #4294967295
 80013e4:	f000 f90b 	bl	80015fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013e8:	4a06      	ldr	r2, [pc, #24]	; (8001404 <HAL_InitTick+0x5c>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< Updated upstream
 800127e:	2300      	movs	r3, #0
 8001280:	e000      	b.n	8001284 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
}
 8001284:	4618      	mov	r0, r3
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000000 	.word	0x20000000
 8001290:	20000008 	.word	0x20000008
 8001294:	20000004 	.word	0x20000004

08001298 <HAL_IncTick>:
=======
 80013ee:	2300      	movs	r3, #0
 80013f0:	e000      	b.n	80013f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000000 	.word	0x20000000
 8001400:	20000008 	.word	0x20000008
 8001404:	20000004 	.word	0x20000004

08001408 <HAL_IncTick>:
>>>>>>> Stashed changes
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< Updated upstream
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_IncTick+0x20>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HAL_IncTick+0x24>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4413      	add	r3, r2
 80012a8:	4a04      	ldr	r2, [pc, #16]	; (80012bc <HAL_IncTick+0x24>)
 80012aa:	6013      	str	r3, [r2, #0]
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	20000008 	.word	0x20000008
 80012bc:	200003d0 	.word	0x200003d0

080012c0 <HAL_GetTick>:
=======
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800140c:	4b06      	ldr	r3, [pc, #24]	; (8001428 <HAL_IncTick+0x20>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	461a      	mov	r2, r3
 8001412:	4b06      	ldr	r3, [pc, #24]	; (800142c <HAL_IncTick+0x24>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4413      	add	r3, r2
 8001418:	4a04      	ldr	r2, [pc, #16]	; (800142c <HAL_IncTick+0x24>)
 800141a:	6013      	str	r3, [r2, #0]
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	20000008 	.word	0x20000008
 800142c:	200003d0 	.word	0x200003d0

08001430 <HAL_GetTick>:
>>>>>>> Stashed changes
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< Updated upstream
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return uwTick;
 80012c4:	4b03      	ldr	r3, [pc, #12]	; (80012d4 <HAL_GetTick+0x14>)
 80012c6:	681b      	ldr	r3, [r3, #0]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	200003d0 	.word	0x200003d0

080012d8 <__NVIC_SetPriorityGrouping>:
=======
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  return uwTick;
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <HAL_GetTick+0x14>)
 8001436:	681b      	ldr	r3, [r3, #0]
}
 8001438:	4618      	mov	r0, r3
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	200003d0 	.word	0x200003d0

08001448 <__NVIC_SetPriorityGrouping>:
>>>>>>> Stashed changes
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< Updated upstream
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e8:	4b0c      	ldr	r3, [pc, #48]	; (800131c <__NVIC_SetPriorityGrouping+0x44>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ee:	68ba      	ldr	r2, [r7, #8]
 80012f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f4:	4013      	ands	r3, r2
 80012f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001300:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800130a:	4a04      	ldr	r2, [pc, #16]	; (800131c <__NVIC_SetPriorityGrouping+0x44>)
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	60d3      	str	r3, [r2, #12]
}
 8001310:	bf00      	nop
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <__NVIC_GetPriorityGrouping>:
=======
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001458:	4b0c      	ldr	r3, [pc, #48]	; (800148c <__NVIC_SetPriorityGrouping+0x44>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800145e:	68ba      	ldr	r2, [r7, #8]
 8001460:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001464:	4013      	ands	r3, r2
 8001466:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001470:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001478:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800147a:	4a04      	ldr	r2, [pc, #16]	; (800148c <__NVIC_SetPriorityGrouping+0x44>)
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	60d3      	str	r3, [r2, #12]
}
 8001480:	bf00      	nop
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <__NVIC_GetPriorityGrouping>:
>>>>>>> Stashed changes
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< Updated upstream
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001324:	4b04      	ldr	r3, [pc, #16]	; (8001338 <__NVIC_GetPriorityGrouping+0x18>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	0a1b      	lsrs	r3, r3, #8
 800132a:	f003 0307 	and.w	r3, r3, #7
}
 800132e:	4618      	mov	r0, r3
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <__NVIC_EnableIRQ>:
=======
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001494:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	0a1b      	lsrs	r3, r3, #8
 800149a:	f003 0307 	and.w	r3, r3, #7
}
 800149e:	4618      	mov	r0, r3
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <__NVIC_EnableIRQ>:
>>>>>>> Stashed changes
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< Updated upstream
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	2b00      	cmp	r3, #0
 800134c:	db0b      	blt.n	8001366 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	f003 021f 	and.w	r2, r3, #31
 8001354:	4907      	ldr	r1, [pc, #28]	; (8001374 <__NVIC_EnableIRQ+0x38>)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	095b      	lsrs	r3, r3, #5
 800135c:	2001      	movs	r0, #1
 800135e:	fa00 f202 	lsl.w	r2, r0, r2
 8001362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	e000e100 	.word	0xe000e100

08001378 <__NVIC_SetPriority>:
=======
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	db0b      	blt.n	80014d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	f003 021f 	and.w	r2, r3, #31
 80014c4:	4907      	ldr	r1, [pc, #28]	; (80014e4 <__NVIC_EnableIRQ+0x38>)
 80014c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ca:	095b      	lsrs	r3, r3, #5
 80014cc:	2001      	movs	r0, #1
 80014ce:	fa00 f202 	lsl.w	r2, r0, r2
 80014d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	e000e100 	.word	0xe000e100

080014e8 <__NVIC_SetPriority>:
>>>>>>> Stashed changes
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< Updated upstream
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	6039      	str	r1, [r7, #0]
 8001382:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001388:	2b00      	cmp	r3, #0
 800138a:	db0a      	blt.n	80013a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	b2da      	uxtb	r2, r3
 8001390:	490c      	ldr	r1, [pc, #48]	; (80013c4 <__NVIC_SetPriority+0x4c>)
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	0112      	lsls	r2, r2, #4
 8001398:	b2d2      	uxtb	r2, r2
 800139a:	440b      	add	r3, r1
 800139c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	6039      	str	r1, [r7, #0]
 80014f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	db0a      	blt.n	8001512 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	490c      	ldr	r1, [pc, #48]	; (8001534 <__NVIC_SetPriority+0x4c>)
 8001502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001506:	0112      	lsls	r2, r2, #4
 8001508:	b2d2      	uxtb	r2, r2
 800150a:	440b      	add	r3, r1
 800150c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> Stashed changes
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< Updated upstream
 80013a0:	e00a      	b.n	80013b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	4908      	ldr	r1, [pc, #32]	; (80013c8 <__NVIC_SetPriority+0x50>)
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	f003 030f 	and.w	r3, r3, #15
 80013ae:	3b04      	subs	r3, #4
 80013b0:	0112      	lsls	r2, r2, #4
 80013b2:	b2d2      	uxtb	r2, r2
 80013b4:	440b      	add	r3, r1
 80013b6:	761a      	strb	r2, [r3, #24]
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	e000e100 	.word	0xe000e100
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <NVIC_EncodePriority>:
=======
 8001510:	e00a      	b.n	8001528 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	b2da      	uxtb	r2, r3
 8001516:	4908      	ldr	r1, [pc, #32]	; (8001538 <__NVIC_SetPriority+0x50>)
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	f003 030f 	and.w	r3, r3, #15
 800151e:	3b04      	subs	r3, #4
 8001520:	0112      	lsls	r2, r2, #4
 8001522:	b2d2      	uxtb	r2, r2
 8001524:	440b      	add	r3, r1
 8001526:	761a      	strb	r2, [r3, #24]
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	e000e100 	.word	0xe000e100
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <NVIC_EncodePriority>:
>>>>>>> Stashed changes
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< Updated upstream
 80013cc:	b480      	push	{r7}
 80013ce:	b089      	sub	sp, #36	; 0x24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	61fb      	str	r3, [r7, #28]
=======
 800153c:	b480      	push	{r7}
 800153e:	b089      	sub	sp, #36	; 0x24
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< Updated upstream
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	f1c3 0307 	rsb	r3, r3, #7
 80013e6:	2b04      	cmp	r3, #4
 80013e8:	bf28      	it	cs
 80013ea:	2304      	movcs	r3, #4
 80013ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3304      	adds	r3, #4
 80013f2:	2b06      	cmp	r3, #6
 80013f4:	d902      	bls.n	80013fc <NVIC_EncodePriority+0x30>
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	3b03      	subs	r3, #3
 80013fa:	e000      	b.n	80013fe <NVIC_EncodePriority+0x32>
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001400:	f04f 32ff 	mov.w	r2, #4294967295
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	43da      	mvns	r2, r3
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	401a      	ands	r2, r3
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001414:	f04f 31ff 	mov.w	r1, #4294967295
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	fa01 f303 	lsl.w	r3, r1, r3
 800141e:	43d9      	mvns	r1, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001424:	4313      	orrs	r3, r2
         );
}
 8001426:	4618      	mov	r0, r3
 8001428:	3724      	adds	r7, #36	; 0x24
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
	...

08001434 <SysTick_Config>:
=======
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	f1c3 0307 	rsb	r3, r3, #7
 8001556:	2b04      	cmp	r3, #4
 8001558:	bf28      	it	cs
 800155a:	2304      	movcs	r3, #4
 800155c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	3304      	adds	r3, #4
 8001562:	2b06      	cmp	r3, #6
 8001564:	d902      	bls.n	800156c <NVIC_EncodePriority+0x30>
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	3b03      	subs	r3, #3
 800156a:	e000      	b.n	800156e <NVIC_EncodePriority+0x32>
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001570:	f04f 32ff 	mov.w	r2, #4294967295
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43da      	mvns	r2, r3
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	401a      	ands	r2, r3
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001584:	f04f 31ff 	mov.w	r1, #4294967295
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	fa01 f303 	lsl.w	r3, r1, r3
 800158e:	43d9      	mvns	r1, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001594:	4313      	orrs	r3, r2
         );
}
 8001596:	4618      	mov	r0, r3
 8001598:	3724      	adds	r7, #36	; 0x24
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
	...

080015a4 <SysTick_Config>:
>>>>>>> Stashed changes
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< Updated upstream
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3b01      	subs	r3, #1
 8001440:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001444:	d301      	bcc.n	800144a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001446:	2301      	movs	r3, #1
 8001448:	e00f      	b.n	800146a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800144a:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <SysTick_Config+0x40>)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3b01      	subs	r3, #1
 8001450:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001452:	210f      	movs	r1, #15
 8001454:	f04f 30ff 	mov.w	r0, #4294967295
 8001458:	f7ff ff8e 	bl	8001378 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <SysTick_Config+0x40>)
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001462:	4b04      	ldr	r3, [pc, #16]	; (8001474 <SysTick_Config+0x40>)
 8001464:	2207      	movs	r2, #7
 8001466:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	e000e010 	.word	0xe000e010

08001478 <HAL_NVIC_SetPriorityGrouping>:
=======
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015b4:	d301      	bcc.n	80015ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015b6:	2301      	movs	r3, #1
 80015b8:	e00f      	b.n	80015da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ba:	4a0a      	ldr	r2, [pc, #40]	; (80015e4 <SysTick_Config+0x40>)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3b01      	subs	r3, #1
 80015c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015c2:	210f      	movs	r1, #15
 80015c4:	f04f 30ff 	mov.w	r0, #4294967295
 80015c8:	f7ff ff8e 	bl	80014e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015cc:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <SysTick_Config+0x40>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015d2:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <SysTick_Config+0x40>)
 80015d4:	2207      	movs	r2, #7
 80015d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	e000e010 	.word	0xe000e010

080015e8 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> Stashed changes
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< Updated upstream
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
=======
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< Updated upstream
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f7ff ff29 	bl	80012d8 <__NVIC_SetPriorityGrouping>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_NVIC_SetPriority>:
=======
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff ff29 	bl	8001448 <__NVIC_SetPriorityGrouping>
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_NVIC_SetPriority>:
>>>>>>> Stashed changes
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< Updated upstream
 800148e:	b580      	push	{r7, lr}
 8001490:	b086      	sub	sp, #24
 8001492:	af00      	add	r7, sp, #0
 8001494:	4603      	mov	r3, r0
 8001496:	60b9      	str	r1, [r7, #8]
 8001498:	607a      	str	r2, [r7, #4]
 800149a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
=======
 80015fe:	b580      	push	{r7, lr}
 8001600:	b086      	sub	sp, #24
 8001602:	af00      	add	r7, sp, #0
 8001604:	4603      	mov	r3, r0
 8001606:	60b9      	str	r1, [r7, #8]
 8001608:	607a      	str	r2, [r7, #4]
 800160a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< Updated upstream
 80014a0:	f7ff ff3e 	bl	8001320 <__NVIC_GetPriorityGrouping>
 80014a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	68b9      	ldr	r1, [r7, #8]
 80014aa:	6978      	ldr	r0, [r7, #20]
 80014ac:	f7ff ff8e 	bl	80013cc <NVIC_EncodePriority>
 80014b0:	4602      	mov	r2, r0
 80014b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b6:	4611      	mov	r1, r2
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff5d 	bl	8001378 <__NVIC_SetPriority>
}
 80014be:	bf00      	nop
 80014c0:	3718      	adds	r7, #24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_NVIC_EnableIRQ>:
=======
 8001610:	f7ff ff3e 	bl	8001490 <__NVIC_GetPriorityGrouping>
 8001614:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	68b9      	ldr	r1, [r7, #8]
 800161a:	6978      	ldr	r0, [r7, #20]
 800161c:	f7ff ff8e 	bl	800153c <NVIC_EncodePriority>
 8001620:	4602      	mov	r2, r0
 8001622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001626:	4611      	mov	r1, r2
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff ff5d 	bl	80014e8 <__NVIC_SetPriority>
}
 800162e:	bf00      	nop
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_NVIC_EnableIRQ>:
>>>>>>> Stashed changes
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< Updated upstream
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b082      	sub	sp, #8
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	4603      	mov	r3, r0
 80014ce:	71fb      	strb	r3, [r7, #7]
=======
 8001636:	b580      	push	{r7, lr}
 8001638:	b082      	sub	sp, #8
 800163a:	af00      	add	r7, sp, #0
 800163c:	4603      	mov	r3, r0
 800163e:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< Updated upstream
 80014d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff31 	bl	800133c <__NVIC_EnableIRQ>
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_SYSTICK_Config>:
=======
 8001640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff ff31 	bl	80014ac <__NVIC_EnableIRQ>
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_SYSTICK_Config>:
>>>>>>> Stashed changes
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< Updated upstream
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff ffa2 	bl	8001434 <SysTick_Config>
 80014f0:	4603      	mov	r3, r0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_DMA_Start_IT>:
=======
 8001652:	b580      	push	{r7, lr}
 8001654:	b082      	sub	sp, #8
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff ffa2 	bl	80015a4 <SysTick_Config>
 8001660:	4603      	mov	r3, r0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001678:	f7ff feda 	bl	8001430 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d101      	bne.n	8001688 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e099      	b.n	80017bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2202      	movs	r2, #2
 8001694:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f022 0201 	bic.w	r2, r2, #1
 80016a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016a8:	e00f      	b.n	80016ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016aa:	f7ff fec1 	bl	8001430 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b05      	cmp	r3, #5
 80016b6:	d908      	bls.n	80016ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2220      	movs	r2, #32
 80016bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2203      	movs	r2, #3
 80016c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e078      	b.n	80017bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1e8      	bne.n	80016aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80016e0:	697a      	ldr	r2, [r7, #20]
 80016e2:	4b38      	ldr	r3, [pc, #224]	; (80017c4 <HAL_DMA_Init+0x158>)
 80016e4:	4013      	ands	r3, r2
 80016e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685a      	ldr	r2, [r3, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001702:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800170e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001716:	697a      	ldr	r2, [r7, #20]
 8001718:	4313      	orrs	r3, r2
 800171a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001720:	2b04      	cmp	r3, #4
 8001722:	d107      	bne.n	8001734 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172c:	4313      	orrs	r3, r2
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	4313      	orrs	r3, r2
 8001732:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	697a      	ldr	r2, [r7, #20]
 800173a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	695b      	ldr	r3, [r3, #20]
 8001742:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	f023 0307 	bic.w	r3, r3, #7
 800174a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001750:	697a      	ldr	r2, [r7, #20]
 8001752:	4313      	orrs	r3, r2
 8001754:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175a:	2b04      	cmp	r3, #4
 800175c:	d117      	bne.n	800178e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	4313      	orrs	r3, r2
 8001766:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176c:	2b00      	cmp	r3, #0
 800176e:	d00e      	beq.n	800178e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f000 fb01 	bl	8001d78 <DMA_CheckFifoParam>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d008      	beq.n	800178e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2240      	movs	r2, #64	; 0x40
 8001780:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2201      	movs	r2, #1
 8001786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800178a:	2301      	movs	r3, #1
 800178c:	e016      	b.n	80017bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	697a      	ldr	r2, [r7, #20]
 8001794:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 fab8 	bl	8001d0c <DMA_CalcBaseAndBitshift>
 800179c:	4603      	mov	r3, r0
 800179e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a4:	223f      	movs	r2, #63	; 0x3f
 80017a6:	409a      	lsls	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2201      	movs	r2, #1
 80017b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	f010803f 	.word	0xf010803f

080017c8 <HAL_DMA_Start_IT>:
>>>>>>> Stashed changes
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< Updated upstream
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b086      	sub	sp, #24
 80014fe:	af00      	add	r7, sp, #0
 8001500:	60f8      	str	r0, [r7, #12]
 8001502:	60b9      	str	r1, [r7, #8]
 8001504:	607a      	str	r2, [r7, #4]
 8001506:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001508:	2300      	movs	r3, #0
 800150a:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001510:	613b      	str	r3, [r7, #16]
=======
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
 80017d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017d6:	2300      	movs	r3, #0
 80017d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017de:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
<<<<<<< Updated upstream
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001518:	2b01      	cmp	r3, #1
 800151a:	d101      	bne.n	8001520 <HAL_DMA_Start_IT+0x26>
 800151c:	2302      	movs	r3, #2
 800151e:	e040      	b.n	80015a2 <HAL_DMA_Start_IT+0xa8>
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2201      	movs	r2, #1
 8001524:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800152e:	b2db      	uxtb	r3, r3
 8001530:	2b01      	cmp	r3, #1
 8001532:	d12f      	bne.n	8001594 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2202      	movs	r2, #2
 8001538:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2200      	movs	r2, #0
 8001540:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	68b9      	ldr	r1, [r7, #8]
 8001548:	68f8      	ldr	r0, [r7, #12]
 800154a:	f000 f82e 	bl	80015aa <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001552:	223f      	movs	r2, #63	; 0x3f
 8001554:	409a      	lsls	r2, r3
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f042 0216 	orr.w	r2, r2, #22
 8001568:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	2b00      	cmp	r3, #0
 8001570:	d007      	beq.n	8001582 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f042 0208 	orr.w	r2, r2, #8
 8001580:	601a      	str	r2, [r3, #0]
=======
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d101      	bne.n	80017ee <HAL_DMA_Start_IT+0x26>
 80017ea:	2302      	movs	r3, #2
 80017ec:	e040      	b.n	8001870 <HAL_DMA_Start_IT+0xa8>
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2201      	movs	r2, #1
 80017f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d12f      	bne.n	8001862 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2202      	movs	r2, #2
 8001806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2200      	movs	r2, #0
 800180e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	68b9      	ldr	r1, [r7, #8]
 8001816:	68f8      	ldr	r0, [r7, #12]
 8001818:	f000 fa4a 	bl	8001cb0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001820:	223f      	movs	r2, #63	; 0x3f
 8001822:	409a      	lsls	r2, r3
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f042 0216 	orr.w	r2, r2, #22
 8001836:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183c:	2b00      	cmp	r3, #0
 800183e:	d007      	beq.n	8001850 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f042 0208 	orr.w	r2, r2, #8
 800184e:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
<<<<<<< Updated upstream
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f042 0201 	orr.w	r2, r2, #1
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	e005      	b.n	80015a0 <HAL_DMA_Start_IT+0xa6>
=======
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f042 0201 	orr.w	r2, r2, #1
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	e005      	b.n	800186e <HAL_DMA_Start_IT+0xa6>
>>>>>>> Stashed changes
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
<<<<<<< Updated upstream
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2200      	movs	r2, #0
 8001598:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800159c:	2302      	movs	r3, #2
 800159e:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80015a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <DMA_SetConfig>:
=======
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800186a:	2302      	movs	r3, #2
 800186c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800186e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001884:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001886:	f7ff fdd3 	bl	8001430 <HAL_GetTick>
 800188a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001892:	b2db      	uxtb	r3, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d008      	beq.n	80018aa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2280      	movs	r2, #128	; 0x80
 800189c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e052      	b.n	8001950 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f022 0216 	bic.w	r2, r2, #22
 80018b8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	695a      	ldr	r2, [r3, #20]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018c8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d103      	bne.n	80018da <HAL_DMA_Abort+0x62>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d007      	beq.n	80018ea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f022 0208 	bic.w	r2, r2, #8
 80018e8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f022 0201 	bic.w	r2, r2, #1
 80018f8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018fa:	e013      	b.n	8001924 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018fc:	f7ff fd98 	bl	8001430 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b05      	cmp	r3, #5
 8001908:	d90c      	bls.n	8001924 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2220      	movs	r2, #32
 800190e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2203      	movs	r2, #3
 800191c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e015      	b.n	8001950 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1e4      	bne.n	80018fc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001936:	223f      	movs	r2, #63	; 0x3f
 8001938:	409a      	lsls	r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2201      	movs	r2, #1
 800194a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	3710      	adds	r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d004      	beq.n	8001976 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2280      	movs	r2, #128	; 0x80
 8001970:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e00c      	b.n	8001990 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2205      	movs	r2, #5
 800197a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 0201 	bic.w	r2, r2, #1
 800198c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800198e:	2300      	movs	r3, #0
}
 8001990:	4618      	mov	r0, r3
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80019a4:	2300      	movs	r3, #0
 80019a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80019a8:	4b92      	ldr	r3, [pc, #584]	; (8001bf4 <HAL_DMA_IRQHandler+0x258>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a92      	ldr	r2, [pc, #584]	; (8001bf8 <HAL_DMA_IRQHandler+0x25c>)
 80019ae:	fba2 2303 	umull	r2, r3, r2, r3
 80019b2:	0a9b      	lsrs	r3, r3, #10
 80019b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c6:	2208      	movs	r2, #8
 80019c8:	409a      	lsls	r2, r3
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	4013      	ands	r3, r2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d01a      	beq.n	8001a08 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d013      	beq.n	8001a08 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0204 	bic.w	r2, r2, #4
 80019ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f4:	2208      	movs	r2, #8
 80019f6:	409a      	lsls	r2, r3
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a00:	f043 0201 	orr.w	r2, r3, #1
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	409a      	lsls	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	4013      	ands	r3, r2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d012      	beq.n	8001a3e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d00b      	beq.n	8001a3e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	409a      	lsls	r2, r3
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a36:	f043 0202 	orr.w	r2, r3, #2
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a42:	2204      	movs	r2, #4
 8001a44:	409a      	lsls	r2, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d012      	beq.n	8001a74 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d00b      	beq.n	8001a74 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a60:	2204      	movs	r2, #4
 8001a62:	409a      	lsls	r2, r3
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a6c:	f043 0204 	orr.w	r2, r3, #4
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a78:	2210      	movs	r2, #16
 8001a7a:	409a      	lsls	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d043      	beq.n	8001b0c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0308 	and.w	r3, r3, #8
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d03c      	beq.n	8001b0c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a96:	2210      	movs	r2, #16
 8001a98:	409a      	lsls	r2, r3
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d018      	beq.n	8001ade <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d108      	bne.n	8001acc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d024      	beq.n	8001b0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	4798      	blx	r3
 8001aca:	e01f      	b.n	8001b0c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d01b      	beq.n	8001b0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	4798      	blx	r3
 8001adc:	e016      	b.n	8001b0c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d107      	bne.n	8001afc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 0208 	bic.w	r2, r2, #8
 8001afa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d003      	beq.n	8001b0c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b10:	2220      	movs	r2, #32
 8001b12:	409a      	lsls	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4013      	ands	r3, r2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f000 808e 	beq.w	8001c3a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0310 	and.w	r3, r3, #16
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f000 8086 	beq.w	8001c3a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b32:	2220      	movs	r2, #32
 8001b34:	409a      	lsls	r2, r3
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b05      	cmp	r3, #5
 8001b44:	d136      	bne.n	8001bb4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 0216 	bic.w	r2, r2, #22
 8001b54:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	695a      	ldr	r2, [r3, #20]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b64:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d103      	bne.n	8001b76 <HAL_DMA_IRQHandler+0x1da>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d007      	beq.n	8001b86 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f022 0208 	bic.w	r2, r2, #8
 8001b84:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b8a:	223f      	movs	r2, #63	; 0x3f
 8001b8c:	409a      	lsls	r2, r3
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d07d      	beq.n	8001ca6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	4798      	blx	r3
        }
        return;
 8001bb2:	e078      	b.n	8001ca6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d01c      	beq.n	8001bfc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d108      	bne.n	8001be2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d030      	beq.n	8001c3a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	4798      	blx	r3
 8001be0:	e02b      	b.n	8001c3a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d027      	beq.n	8001c3a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	4798      	blx	r3
 8001bf2:	e022      	b.n	8001c3a <HAL_DMA_IRQHandler+0x29e>
 8001bf4:	20000000 	.word	0x20000000
 8001bf8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d10f      	bne.n	8001c2a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 0210 	bic.w	r2, r2, #16
 8001c18:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2201      	movs	r2, #1
 8001c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d032      	beq.n	8001ca8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d022      	beq.n	8001c94 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2205      	movs	r2, #5
 8001c52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f022 0201 	bic.w	r2, r2, #1
 8001c64:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	60bb      	str	r3, [r7, #8]
 8001c6c:	697a      	ldr	r2, [r7, #20]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d307      	bcc.n	8001c82 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1f2      	bne.n	8001c66 <HAL_DMA_IRQHandler+0x2ca>
 8001c80:	e000      	b.n	8001c84 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001c82:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d005      	beq.n	8001ca8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	4798      	blx	r3
 8001ca4:	e000      	b.n	8001ca8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001ca6:	bf00      	nop
    }
  }
}
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop

08001cb0 <DMA_SetConfig>:
>>>>>>> Stashed changes
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< Updated upstream
 80015aa:	b480      	push	{r7}
 80015ac:	b085      	sub	sp, #20
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	60f8      	str	r0, [r7, #12]
 80015b2:	60b9      	str	r1, [r7, #8]
 80015b4:	607a      	str	r2, [r7, #4]
 80015b6:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80015c6:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	683a      	ldr	r2, [r7, #0]
 80015ce:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	2b40      	cmp	r3, #64	; 0x40
 80015d6:	d108      	bne.n	80015ea <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	68ba      	ldr	r2, [r7, #8]
 80015e6:	60da      	str	r2, [r3, #12]
=======
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
 8001cbc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ccc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	2b40      	cmp	r3, #64	; 0x40
 8001cdc:	d108      	bne.n	8001cf0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
<<<<<<< Updated upstream
 80015e8:	e007      	b.n	80015fa <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	68ba      	ldr	r2, [r7, #8]
 80015f0:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	60da      	str	r2, [r3, #12]
}
 80015fa:	bf00      	nop
 80015fc:	3714      	adds	r7, #20
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
	...

08001608 <HAL_GPIO_Init>:
=======
 8001cee:	e007      	b.n	8001d00 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68ba      	ldr	r2, [r7, #8]
 8001cf6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	60da      	str	r2, [r3, #12]
}
 8001d00:	bf00      	nop
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	3b10      	subs	r3, #16
 8001d1c:	4a14      	ldr	r2, [pc, #80]	; (8001d70 <DMA_CalcBaseAndBitshift+0x64>)
 8001d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d22:	091b      	lsrs	r3, r3, #4
 8001d24:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d26:	4a13      	ldr	r2, [pc, #76]	; (8001d74 <DMA_CalcBaseAndBitshift+0x68>)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2b03      	cmp	r3, #3
 8001d38:	d909      	bls.n	8001d4e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d42:	f023 0303 	bic.w	r3, r3, #3
 8001d46:	1d1a      	adds	r2, r3, #4
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	659a      	str	r2, [r3, #88]	; 0x58
 8001d4c:	e007      	b.n	8001d5e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d56:	f023 0303 	bic.w	r3, r3, #3
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	aaaaaaab 	.word	0xaaaaaaab
 8001d74:	08003d1c 	.word	0x08003d1c

08001d78 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d80:	2300      	movs	r3, #0
 8001d82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d88:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d11f      	bne.n	8001dd2 <DMA_CheckFifoParam+0x5a>
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	2b03      	cmp	r3, #3
 8001d96:	d856      	bhi.n	8001e46 <DMA_CheckFifoParam+0xce>
 8001d98:	a201      	add	r2, pc, #4	; (adr r2, 8001da0 <DMA_CheckFifoParam+0x28>)
 8001d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d9e:	bf00      	nop
 8001da0:	08001db1 	.word	0x08001db1
 8001da4:	08001dc3 	.word	0x08001dc3
 8001da8:	08001db1 	.word	0x08001db1
 8001dac:	08001e47 	.word	0x08001e47
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d046      	beq.n	8001e4a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dc0:	e043      	b.n	8001e4a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001dca:	d140      	bne.n	8001e4e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dd0:	e03d      	b.n	8001e4e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dda:	d121      	bne.n	8001e20 <DMA_CheckFifoParam+0xa8>
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	2b03      	cmp	r3, #3
 8001de0:	d837      	bhi.n	8001e52 <DMA_CheckFifoParam+0xda>
 8001de2:	a201      	add	r2, pc, #4	; (adr r2, 8001de8 <DMA_CheckFifoParam+0x70>)
 8001de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de8:	08001df9 	.word	0x08001df9
 8001dec:	08001dff 	.word	0x08001dff
 8001df0:	08001df9 	.word	0x08001df9
 8001df4:	08001e11 	.word	0x08001e11
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	73fb      	strb	r3, [r7, #15]
      break;
 8001dfc:	e030      	b.n	8001e60 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d025      	beq.n	8001e56 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e0e:	e022      	b.n	8001e56 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e14:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e18:	d11f      	bne.n	8001e5a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e1e:	e01c      	b.n	8001e5a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d903      	bls.n	8001e2e <DMA_CheckFifoParam+0xb6>
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	2b03      	cmp	r3, #3
 8001e2a:	d003      	beq.n	8001e34 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e2c:	e018      	b.n	8001e60 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	73fb      	strb	r3, [r7, #15]
      break;
 8001e32:	e015      	b.n	8001e60 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d00e      	beq.n	8001e5e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	73fb      	strb	r3, [r7, #15]
      break;
 8001e44:	e00b      	b.n	8001e5e <DMA_CheckFifoParam+0xe6>
      break;
 8001e46:	bf00      	nop
 8001e48:	e00a      	b.n	8001e60 <DMA_CheckFifoParam+0xe8>
      break;
 8001e4a:	bf00      	nop
 8001e4c:	e008      	b.n	8001e60 <DMA_CheckFifoParam+0xe8>
      break;
 8001e4e:	bf00      	nop
 8001e50:	e006      	b.n	8001e60 <DMA_CheckFifoParam+0xe8>
      break;
 8001e52:	bf00      	nop
 8001e54:	e004      	b.n	8001e60 <DMA_CheckFifoParam+0xe8>
      break;
 8001e56:	bf00      	nop
 8001e58:	e002      	b.n	8001e60 <DMA_CheckFifoParam+0xe8>
      break;   
 8001e5a:	bf00      	nop
 8001e5c:	e000      	b.n	8001e60 <DMA_CheckFifoParam+0xe8>
      break;
 8001e5e:	bf00      	nop
    }
  } 
  
  return status; 
 8001e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3714      	adds	r7, #20
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop

08001e70 <HAL_GPIO_Init>:
>>>>>>> Stashed changes
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< Updated upstream
 8001608:	b480      	push	{r7}
 800160a:	b089      	sub	sp, #36	; 0x24
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001616:	2300      	movs	r3, #0
 8001618:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800161a:	2300      	movs	r3, #0
 800161c:	61bb      	str	r3, [r7, #24]
=======
 8001e70:	b480      	push	{r7}
 8001e72:	b089      	sub	sp, #36	; 0x24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
<<<<<<< Updated upstream
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]
 8001622:	e159      	b.n	80018d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001624:	2201      	movs	r2, #1
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	697a      	ldr	r2, [r7, #20]
 8001634:	4013      	ands	r3, r2
 8001636:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	429a      	cmp	r2, r3
 800163e:	f040 8148 	bne.w	80018d2 <HAL_GPIO_Init+0x2ca>
=======
 8001e86:	2300      	movs	r3, #0
 8001e88:	61fb      	str	r3, [r7, #28]
 8001e8a:	e159      	b.n	8002140 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	f040 8148 	bne.w	800213a <HAL_GPIO_Init+0x2ca>
>>>>>>> Stashed changes
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
<<<<<<< Updated upstream
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f003 0303 	and.w	r3, r3, #3
 800164a:	2b01      	cmp	r3, #1
 800164c:	d005      	beq.n	800165a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001656:	2b02      	cmp	r3, #2
 8001658:	d130      	bne.n	80016bc <HAL_GPIO_Init+0xb4>
=======
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f003 0303 	and.w	r3, r3, #3
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d005      	beq.n	8001ec2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d130      	bne.n	8001f24 <HAL_GPIO_Init+0xb4>
>>>>>>> Stashed changes
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
<<<<<<< Updated upstream
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	2203      	movs	r2, #3
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43db      	mvns	r3, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4013      	ands	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	68da      	ldr	r2, [r3, #12]
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4313      	orrs	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001690:	2201      	movs	r2, #1
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	43db      	mvns	r3, r3
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4013      	ands	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	091b      	lsrs	r3, r3, #4
 80016a6:	f003 0201 	and.w	r2, r3, #1
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f003 0303 	and.w	r3, r3, #3
 80016c4:	2b03      	cmp	r3, #3
 80016c6:	d017      	beq.n	80016f8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	2203      	movs	r2, #3
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	60da      	str	r2, [r3, #12]
=======
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	2203      	movs	r2, #3
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	68da      	ldr	r2, [r3, #12]
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ef8:	2201      	movs	r2, #1
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	43db      	mvns	r3, r3
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4013      	ands	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	091b      	lsrs	r3, r3, #4
 8001f0e:	f003 0201 	and.w	r2, r3, #1
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 0303 	and.w	r3, r3, #3
 8001f2c:	2b03      	cmp	r3, #3
 8001f2e:	d017      	beq.n	8001f60 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	2203      	movs	r2, #3
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43db      	mvns	r3, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4013      	ands	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< Updated upstream
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f003 0303 	and.w	r3, r3, #3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d123      	bne.n	800174c <HAL_GPIO_Init+0x144>
=======
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f003 0303 	and.w	r3, r3, #3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d123      	bne.n	8001fb4 <HAL_GPIO_Init+0x144>
>>>>>>> Stashed changes
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
<<<<<<< Updated upstream
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	08da      	lsrs	r2, r3, #3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3208      	adds	r2, #8
 800170c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001710:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	f003 0307 	and.w	r3, r3, #7
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	220f      	movs	r2, #15
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4013      	ands	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	691a      	ldr	r2, [r3, #16]
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	08da      	lsrs	r2, r3, #3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	3208      	adds	r2, #8
 8001746:	69b9      	ldr	r1, [r7, #24]
 8001748:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	08da      	lsrs	r2, r3, #3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3208      	adds	r2, #8
 8001f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	220f      	movs	r2, #15
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	691a      	ldr	r2, [r3, #16]
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	08da      	lsrs	r2, r3, #3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	3208      	adds	r2, #8
 8001fae:	69b9      	ldr	r1, [r7, #24]
 8001fb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> Stashed changes
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< Updated upstream
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	2203      	movs	r2, #3
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43db      	mvns	r3, r3
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	4013      	ands	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 0203 	and.w	r2, r3, #3
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4313      	orrs	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	601a      	str	r2, [r3, #0]
=======
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	2203      	movs	r2, #3
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f003 0203 	and.w	r2, r3, #3
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
<<<<<<< Updated upstream
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001788:	2b00      	cmp	r3, #0
 800178a:	f000 80a2 	beq.w	80018d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	4b57      	ldr	r3, [pc, #348]	; (80018f0 <HAL_GPIO_Init+0x2e8>)
 8001794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001796:	4a56      	ldr	r2, [pc, #344]	; (80018f0 <HAL_GPIO_Init+0x2e8>)
 8001798:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800179c:	6453      	str	r3, [r2, #68]	; 0x44
 800179e:	4b54      	ldr	r3, [pc, #336]	; (80018f0 <HAL_GPIO_Init+0x2e8>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017aa:	4a52      	ldr	r2, [pc, #328]	; (80018f4 <HAL_GPIO_Init+0x2ec>)
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	089b      	lsrs	r3, r3, #2
 80017b0:	3302      	adds	r3, #2
 80017b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	f003 0303 	and.w	r3, r3, #3
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	220f      	movs	r2, #15
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43db      	mvns	r3, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4013      	ands	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a49      	ldr	r2, [pc, #292]	; (80018f8 <HAL_GPIO_Init+0x2f0>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d019      	beq.n	800180a <HAL_GPIO_Init+0x202>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a48      	ldr	r2, [pc, #288]	; (80018fc <HAL_GPIO_Init+0x2f4>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d013      	beq.n	8001806 <HAL_GPIO_Init+0x1fe>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a47      	ldr	r2, [pc, #284]	; (8001900 <HAL_GPIO_Init+0x2f8>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d00d      	beq.n	8001802 <HAL_GPIO_Init+0x1fa>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a46      	ldr	r2, [pc, #280]	; (8001904 <HAL_GPIO_Init+0x2fc>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d007      	beq.n	80017fe <HAL_GPIO_Init+0x1f6>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a45      	ldr	r2, [pc, #276]	; (8001908 <HAL_GPIO_Init+0x300>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d101      	bne.n	80017fa <HAL_GPIO_Init+0x1f2>
 80017f6:	2304      	movs	r3, #4
 80017f8:	e008      	b.n	800180c <HAL_GPIO_Init+0x204>
 80017fa:	2307      	movs	r3, #7
 80017fc:	e006      	b.n	800180c <HAL_GPIO_Init+0x204>
 80017fe:	2303      	movs	r3, #3
 8001800:	e004      	b.n	800180c <HAL_GPIO_Init+0x204>
 8001802:	2302      	movs	r3, #2
 8001804:	e002      	b.n	800180c <HAL_GPIO_Init+0x204>
 8001806:	2301      	movs	r3, #1
 8001808:	e000      	b.n	800180c <HAL_GPIO_Init+0x204>
 800180a:	2300      	movs	r3, #0
 800180c:	69fa      	ldr	r2, [r7, #28]
 800180e:	f002 0203 	and.w	r2, r2, #3
 8001812:	0092      	lsls	r2, r2, #2
 8001814:	4093      	lsls	r3, r2
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4313      	orrs	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800181c:	4935      	ldr	r1, [pc, #212]	; (80018f4 <HAL_GPIO_Init+0x2ec>)
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	089b      	lsrs	r3, r3, #2
 8001822:	3302      	adds	r3, #2
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800182a:	4b38      	ldr	r3, [pc, #224]	; (800190c <HAL_GPIO_Init+0x304>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	43db      	mvns	r3, r3
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4013      	ands	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800184e:	4a2f      	ldr	r2, [pc, #188]	; (800190c <HAL_GPIO_Init+0x304>)
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001854:	4b2d      	ldr	r3, [pc, #180]	; (800190c <HAL_GPIO_Init+0x304>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	43db      	mvns	r3, r3
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4013      	ands	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d003      	beq.n	8001878 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	4313      	orrs	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001878:	4a24      	ldr	r2, [pc, #144]	; (800190c <HAL_GPIO_Init+0x304>)
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800187e:	4b23      	ldr	r3, [pc, #140]	; (800190c <HAL_GPIO_Init+0x304>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	43db      	mvns	r3, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4013      	ands	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	4313      	orrs	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018a2:	4a1a      	ldr	r2, [pc, #104]	; (800190c <HAL_GPIO_Init+0x304>)
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018a8:	4b18      	ldr	r3, [pc, #96]	; (800190c <HAL_GPIO_Init+0x304>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	43db      	mvns	r3, r3
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4013      	ands	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d003      	beq.n	80018cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018cc:	4a0f      	ldr	r2, [pc, #60]	; (800190c <HAL_GPIO_Init+0x304>)
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3301      	adds	r3, #1
 80018d6:	61fb      	str	r3, [r7, #28]
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	2b0f      	cmp	r3, #15
 80018dc:	f67f aea2 	bls.w	8001624 <HAL_GPIO_Init+0x1c>
=======
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 80a2 	beq.w	800213a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	4b57      	ldr	r3, [pc, #348]	; (8002158 <HAL_GPIO_Init+0x2e8>)
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffe:	4a56      	ldr	r2, [pc, #344]	; (8002158 <HAL_GPIO_Init+0x2e8>)
 8002000:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002004:	6453      	str	r3, [r2, #68]	; 0x44
 8002006:	4b54      	ldr	r3, [pc, #336]	; (8002158 <HAL_GPIO_Init+0x2e8>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002012:	4a52      	ldr	r2, [pc, #328]	; (800215c <HAL_GPIO_Init+0x2ec>)
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	089b      	lsrs	r3, r3, #2
 8002018:	3302      	adds	r3, #2
 800201a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800201e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	f003 0303 	and.w	r3, r3, #3
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	220f      	movs	r2, #15
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43db      	mvns	r3, r3
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	4013      	ands	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a49      	ldr	r2, [pc, #292]	; (8002160 <HAL_GPIO_Init+0x2f0>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d019      	beq.n	8002072 <HAL_GPIO_Init+0x202>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a48      	ldr	r2, [pc, #288]	; (8002164 <HAL_GPIO_Init+0x2f4>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d013      	beq.n	800206e <HAL_GPIO_Init+0x1fe>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a47      	ldr	r2, [pc, #284]	; (8002168 <HAL_GPIO_Init+0x2f8>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d00d      	beq.n	800206a <HAL_GPIO_Init+0x1fa>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a46      	ldr	r2, [pc, #280]	; (800216c <HAL_GPIO_Init+0x2fc>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d007      	beq.n	8002066 <HAL_GPIO_Init+0x1f6>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a45      	ldr	r2, [pc, #276]	; (8002170 <HAL_GPIO_Init+0x300>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d101      	bne.n	8002062 <HAL_GPIO_Init+0x1f2>
 800205e:	2304      	movs	r3, #4
 8002060:	e008      	b.n	8002074 <HAL_GPIO_Init+0x204>
 8002062:	2307      	movs	r3, #7
 8002064:	e006      	b.n	8002074 <HAL_GPIO_Init+0x204>
 8002066:	2303      	movs	r3, #3
 8002068:	e004      	b.n	8002074 <HAL_GPIO_Init+0x204>
 800206a:	2302      	movs	r3, #2
 800206c:	e002      	b.n	8002074 <HAL_GPIO_Init+0x204>
 800206e:	2301      	movs	r3, #1
 8002070:	e000      	b.n	8002074 <HAL_GPIO_Init+0x204>
 8002072:	2300      	movs	r3, #0
 8002074:	69fa      	ldr	r2, [r7, #28]
 8002076:	f002 0203 	and.w	r2, r2, #3
 800207a:	0092      	lsls	r2, r2, #2
 800207c:	4093      	lsls	r3, r2
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4313      	orrs	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002084:	4935      	ldr	r1, [pc, #212]	; (800215c <HAL_GPIO_Init+0x2ec>)
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	089b      	lsrs	r3, r3, #2
 800208a:	3302      	adds	r3, #2
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002092:	4b38      	ldr	r3, [pc, #224]	; (8002174 <HAL_GPIO_Init+0x304>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	43db      	mvns	r3, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4013      	ands	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020b6:	4a2f      	ldr	r2, [pc, #188]	; (8002174 <HAL_GPIO_Init+0x304>)
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020bc:	4b2d      	ldr	r3, [pc, #180]	; (8002174 <HAL_GPIO_Init+0x304>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	43db      	mvns	r3, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4013      	ands	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d003      	beq.n	80020e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	4313      	orrs	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020e0:	4a24      	ldr	r2, [pc, #144]	; (8002174 <HAL_GPIO_Init+0x304>)
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020e6:	4b23      	ldr	r3, [pc, #140]	; (8002174 <HAL_GPIO_Init+0x304>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	43db      	mvns	r3, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4013      	ands	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	4313      	orrs	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800210a:	4a1a      	ldr	r2, [pc, #104]	; (8002174 <HAL_GPIO_Init+0x304>)
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002110:	4b18      	ldr	r3, [pc, #96]	; (8002174 <HAL_GPIO_Init+0x304>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	43db      	mvns	r3, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4013      	ands	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4313      	orrs	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002134:	4a0f      	ldr	r2, [pc, #60]	; (8002174 <HAL_GPIO_Init+0x304>)
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	3301      	adds	r3, #1
 800213e:	61fb      	str	r3, [r7, #28]
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	2b0f      	cmp	r3, #15
 8002144:	f67f aea2 	bls.w	8001e8c <HAL_GPIO_Init+0x1c>
>>>>>>> Stashed changes
      }
    }
  }
}
<<<<<<< Updated upstream
 80018e0:	bf00      	nop
 80018e2:	bf00      	nop
 80018e4:	3724      	adds	r7, #36	; 0x24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40013800 	.word	0x40013800
 80018f8:	40020000 	.word	0x40020000
 80018fc:	40020400 	.word	0x40020400
 8001900:	40020800 	.word	0x40020800
 8001904:	40020c00 	.word	0x40020c00
 8001908:	40021000 	.word	0x40021000
 800190c:	40013c00 	.word	0x40013c00

08001910 <HAL_GPIO_WritePin>:
=======
 8002148:	bf00      	nop
 800214a:	bf00      	nop
 800214c:	3724      	adds	r7, #36	; 0x24
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	40023800 	.word	0x40023800
 800215c:	40013800 	.word	0x40013800
 8002160:	40020000 	.word	0x40020000
 8002164:	40020400 	.word	0x40020400
 8002168:	40020800 	.word	0x40020800
 800216c:	40020c00 	.word	0x40020c00
 8002170:	40021000 	.word	0x40021000
 8002174:	40013c00 	.word	0x40013c00

08002178 <HAL_GPIO_WritePin>:
>>>>>>> Stashed changes
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< Updated upstream
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	460b      	mov	r3, r1
 800191a:	807b      	strh	r3, [r7, #2]
 800191c:	4613      	mov	r3, r2
 800191e:	707b      	strb	r3, [r7, #1]
=======
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	460b      	mov	r3, r1
 8002182:	807b      	strh	r3, [r7, #2]
 8002184:	4613      	mov	r3, r2
 8002186:	707b      	strb	r3, [r7, #1]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< Updated upstream
 8001920:	787b      	ldrb	r3, [r7, #1]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001926:	887a      	ldrh	r2, [r7, #2]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	619a      	str	r2, [r3, #24]
=======
 8002188:	787b      	ldrb	r3, [r7, #1]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800218e:	887a      	ldrh	r2, [r7, #2]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
<<<<<<< Updated upstream
 800192c:	e003      	b.n	8001936 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800192e:	887b      	ldrh	r3, [r7, #2]
 8001930:	041a      	lsls	r2, r3, #16
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	619a      	str	r2, [r3, #24]
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
	...

08001944 <HAL_RCC_OscConfig>:
=======
 8002194:	e003      	b.n	800219e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002196:	887b      	ldrh	r3, [r7, #2]
 8002198:	041a      	lsls	r2, r3, #16
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	619a      	str	r2, [r3, #24]
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
	...

080021ac <HAL_RCC_OscConfig>:
>>>>>>> Stashed changes
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< Updated upstream
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
=======
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
<<<<<<< Updated upstream
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e264      	b.n	8001e20 <HAL_RCC_OscConfig+0x4dc>
=======
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e264      	b.n	8002688 <HAL_RCC_OscConfig+0x4dc>
>>>>>>> Stashed changes
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< Updated upstream
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b00      	cmp	r3, #0
 8001960:	d075      	beq.n	8001a4e <HAL_RCC_OscConfig+0x10a>
=======
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d075      	beq.n	80022b6 <HAL_RCC_OscConfig+0x10a>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
<<<<<<< Updated upstream
 8001962:	4ba3      	ldr	r3, [pc, #652]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f003 030c 	and.w	r3, r3, #12
 800196a:	2b04      	cmp	r3, #4
 800196c:	d00c      	beq.n	8001988 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800196e:	4ba0      	ldr	r3, [pc, #640]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001976:	2b08      	cmp	r3, #8
 8001978:	d112      	bne.n	80019a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800197a:	4b9d      	ldr	r3, [pc, #628]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001982:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001986:	d10b      	bne.n	80019a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001988:	4b99      	ldr	r3, [pc, #612]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d05b      	beq.n	8001a4c <HAL_RCC_OscConfig+0x108>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d157      	bne.n	8001a4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e23f      	b.n	8001e20 <HAL_RCC_OscConfig+0x4dc>
=======
 80021ca:	4ba3      	ldr	r3, [pc, #652]	; (8002458 <HAL_RCC_OscConfig+0x2ac>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f003 030c 	and.w	r3, r3, #12
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	d00c      	beq.n	80021f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021d6:	4ba0      	ldr	r3, [pc, #640]	; (8002458 <HAL_RCC_OscConfig+0x2ac>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021de:	2b08      	cmp	r3, #8
 80021e0:	d112      	bne.n	8002208 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021e2:	4b9d      	ldr	r3, [pc, #628]	; (8002458 <HAL_RCC_OscConfig+0x2ac>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021ee:	d10b      	bne.n	8002208 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f0:	4b99      	ldr	r3, [pc, #612]	; (8002458 <HAL_RCC_OscConfig+0x2ac>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d05b      	beq.n	80022b4 <HAL_RCC_OscConfig+0x108>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d157      	bne.n	80022b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e23f      	b.n	8002688 <HAL_RCC_OscConfig+0x4dc>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< Updated upstream
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019a8:	d106      	bne.n	80019b8 <HAL_RCC_OscConfig+0x74>
 80019aa:	4b91      	ldr	r3, [pc, #580]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a90      	ldr	r2, [pc, #576]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 80019b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019b4:	6013      	str	r3, [r2, #0]
 80019b6:	e01d      	b.n	80019f4 <HAL_RCC_OscConfig+0xb0>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019c0:	d10c      	bne.n	80019dc <HAL_RCC_OscConfig+0x98>
 80019c2:	4b8b      	ldr	r3, [pc, #556]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a8a      	ldr	r2, [pc, #552]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 80019c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	4b88      	ldr	r3, [pc, #544]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a87      	ldr	r2, [pc, #540]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 80019d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	e00b      	b.n	80019f4 <HAL_RCC_OscConfig+0xb0>
 80019dc:	4b84      	ldr	r3, [pc, #528]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a83      	ldr	r2, [pc, #524]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 80019e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019e6:	6013      	str	r3, [r2, #0]
 80019e8:	4b81      	ldr	r3, [pc, #516]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a80      	ldr	r2, [pc, #512]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 80019ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d013      	beq.n	8001a24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fc:	f7ff fc60 	bl	80012c0 <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a04:	f7ff fc5c 	bl	80012c0 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b64      	cmp	r3, #100	; 0x64
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e204      	b.n	8001e20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a16:	4b76      	ldr	r3, [pc, #472]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d0f0      	beq.n	8001a04 <HAL_RCC_OscConfig+0xc0>
 8001a22:	e014      	b.n	8001a4e <HAL_RCC_OscConfig+0x10a>
=======
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002210:	d106      	bne.n	8002220 <HAL_RCC_OscConfig+0x74>
 8002212:	4b91      	ldr	r3, [pc, #580]	; (8002458 <HAL_RCC_OscConfig+0x2ac>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a90      	ldr	r2, [pc, #576]	; (8002458 <HAL_RCC_OscConfig+0x2ac>)
 8002218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800221c:	6013      	str	r3, [r2, #0]
 800221e:	e01d      	b.n	800225c <HAL_RCC_OscConfig+0xb0>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002228:	d10c      	bne.n	8002244 <HAL_RCC_OscConfig+0x98>
 800222a:	4b8b      	ldr	r3, [pc, #556]	; (8002458 <HAL_RCC_OscConfig+0x2ac>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a8a      	ldr	r2, [pc, #552]	; (8002458 <HAL_RCC_OscConfig+0x2ac>)
 8002230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002234:	6013      	str	r3, [r2, #0]
 8002236:	4b88      	ldr	r3, [pc, #544]	; (8002458 <HAL_RCC_OscConfig+0x2ac>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a87      	ldr	r2, [pc, #540]	; (8002458 <HAL_RCC_OscConfig+0x2ac>)
 800223c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002240:	6013      	str	r3, [r2, #0]
 8002242:	e00b      	b.n	800225c <HAL_RCC_OscConfig+0xb0>
 8002244:	4b84      	ldr	r3, [pc, #528]	; (8002458 <HAL_RCC_OscConfig+0x2ac>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a83      	ldr	r2, [pc, #524]	; (8002458 <HAL_RCC_OscConfig+0x2ac>)
 800224a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800224e:	6013      	str	r3, [r2, #0]
 8002250:	4b81      	ldr	r3, [pc, #516]	; (8002458 <HAL_RCC_OscConfig+0x2ac>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a80      	ldr	r2, [pc, #512]	; (8002458 <HAL_RCC_OscConfig+0x2ac>)
 8002256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800225a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d013      	beq.n	800228c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002264:	f7ff f8e4 	bl	8001430 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800226c:	f7ff f8e0 	bl	8001430 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b64      	cmp	r3, #100	; 0x64
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e204      	b.n	8002688 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227e:	4b76      	ldr	r3, [pc, #472]	; (8002458 <HAL_RCC_OscConfig+0x2ac>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d0f0      	beq.n	800226c <HAL_RCC_OscConfig+0xc0>
 800228a:	e014      	b.n	80022b6 <HAL_RCC_OscConfig+0x10a>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 8001a24:	f7ff fc4c 	bl	80012c0 <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a2c:	f7ff fc48 	bl	80012c0 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b64      	cmp	r3, #100	; 0x64
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e1f0      	b.n	8001e20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a3e:	4b6c      	ldr	r3, [pc, #432]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1f0      	bne.n	8001a2c <HAL_RCC_OscConfig+0xe8>
 8001a4a:	e000      	b.n	8001a4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a4c:	bf00      	nop
=======
 800228c:	f7ff f8d0 	bl	8001430 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002294:	f7ff f8cc 	bl	8001430 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b64      	cmp	r3, #100	; 0x64
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e1f0      	b.n	8002688 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022a6:	4b6c      	ldr	r3, [pc, #432]	; (8002458 <HAL_RCC_OscConfig+0x2ac>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f0      	bne.n	8002294 <HAL_RCC_OscConfig+0xe8>
 80022b2:	e000      	b.n	80022b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b4:	bf00      	nop
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< Updated upstream
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d063      	beq.n	8001b22 <HAL_RCC_OscConfig+0x1de>
=======
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d063      	beq.n	800238a <HAL_RCC_OscConfig+0x1de>
>>>>>>> Stashed changes
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
<<<<<<< Updated upstream
 8001a5a:	4b65      	ldr	r3, [pc, #404]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 030c 	and.w	r3, r3, #12
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d00b      	beq.n	8001a7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a66:	4b62      	ldr	r3, [pc, #392]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a6e:	2b08      	cmp	r3, #8
 8001a70:	d11c      	bne.n	8001aac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a72:	4b5f      	ldr	r3, [pc, #380]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d116      	bne.n	8001aac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a7e:	4b5c      	ldr	r3, [pc, #368]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d005      	beq.n	8001a96 <HAL_RCC_OscConfig+0x152>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d001      	beq.n	8001a96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e1c4      	b.n	8001e20 <HAL_RCC_OscConfig+0x4dc>
=======
 80022c2:	4b65      	ldr	r3, [pc, #404]	; (8002458 <HAL_RCC_OscConfig+0x2ac>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 030c 	and.w	r3, r3, #12
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00b      	beq.n	80022e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022ce:	4b62      	ldr	r3, [pc, #392]	; (8002458 <HAL_RCC_OscConfig+0x2ac>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022d6:	2b08      	cmp	r3, #8
 80022d8:	d11c      	bne.n	8002314 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022da:	4b5f      	ldr	r3, [pc, #380]	; (8002458 <HAL_RCC_OscConfig+0x2ac>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d116      	bne.n	8002314 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022e6:	4b5c      	ldr	r3, [pc, #368]	; (8002458 <HAL_RCC_OscConfig+0x2ac>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d005      	beq.n	80022fe <HAL_RCC_OscConfig+0x152>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d001      	beq.n	80022fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e1c4      	b.n	8002688 <HAL_RCC_OscConfig+0x4dc>
>>>>>>> Stashed changes
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< Updated upstream
 8001a96:	4b56      	ldr	r3, [pc, #344]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	4952      	ldr	r1, [pc, #328]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aaa:	e03a      	b.n	8001b22 <HAL_RCC_OscConfig+0x1de>
=======
 80022fe:	4b56      	ldr	r3, [pc, #344]	; (8002458 <HAL_RCC_OscConfig+0x2ac>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	4952      	ldr	r1, [pc, #328]	; (8002458 <HAL_RCC_OscConfig+0x2ac>)
 800230e:	4313      	orrs	r3, r2
 8002310:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002312:	e03a      	b.n	800238a <HAL_RCC_OscConfig+0x1de>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
<<<<<<< Updated upstream
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d020      	beq.n	8001af6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ab4:	4b4f      	ldr	r3, [pc, #316]	; (8001bf4 <HAL_RCC_OscConfig+0x2b0>)
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aba:	f7ff fc01 	bl	80012c0 <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ac2:	f7ff fbfd 	bl	80012c0 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e1a5      	b.n	8001e20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad4:	4b46      	ldr	r3, [pc, #280]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0f0      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x17e>
=======
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d020      	beq.n	800235e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800231c:	4b4f      	ldr	r3, [pc, #316]	; (800245c <HAL_RCC_OscConfig+0x2b0>)
 800231e:	2201      	movs	r2, #1
 8002320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002322:	f7ff f885 	bl	8001430 <HAL_GetTick>
 8002326:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002328:	e008      	b.n	800233c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800232a:	f7ff f881 	bl	8001430 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e1a5      	b.n	8002688 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800233c:	4b46      	ldr	r3, [pc, #280]	; (8002458 <HAL_RCC_OscConfig+0x2ac>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0f0      	beq.n	800232a <HAL_RCC_OscConfig+0x17e>
>>>>>>> Stashed changes
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< Updated upstream
 8001ae0:	4b43      	ldr	r3, [pc, #268]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	4940      	ldr	r1, [pc, #256]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 8001af0:	4313      	orrs	r3, r2
 8001af2:	600b      	str	r3, [r1, #0]
 8001af4:	e015      	b.n	8001b22 <HAL_RCC_OscConfig+0x1de>
=======
 8002348:	4b43      	ldr	r3, [pc, #268]	; (8002458 <HAL_RCC_OscConfig+0x2ac>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	4940      	ldr	r1, [pc, #256]	; (8002458 <HAL_RCC_OscConfig+0x2ac>)
 8002358:	4313      	orrs	r3, r2
 800235a:	600b      	str	r3, [r1, #0]
 800235c:	e015      	b.n	800238a <HAL_RCC_OscConfig+0x1de>
>>>>>>> Stashed changes
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< Updated upstream
 8001af6:	4b3f      	ldr	r3, [pc, #252]	; (8001bf4 <HAL_RCC_OscConfig+0x2b0>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afc:	f7ff fbe0 	bl	80012c0 <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b04:	f7ff fbdc 	bl	80012c0 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e184      	b.n	8001e20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b16:	4b36      	ldr	r3, [pc, #216]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1f0      	bne.n	8001b04 <HAL_RCC_OscConfig+0x1c0>
=======
 800235e:	4b3f      	ldr	r3, [pc, #252]	; (800245c <HAL_RCC_OscConfig+0x2b0>)
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002364:	f7ff f864 	bl	8001430 <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800236c:	f7ff f860 	bl	8001430 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e184      	b.n	8002688 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800237e:	4b36      	ldr	r3, [pc, #216]	; (8002458 <HAL_RCC_OscConfig+0x2ac>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1f0      	bne.n	800236c <HAL_RCC_OscConfig+0x1c0>
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< Updated upstream
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0308 	and.w	r3, r3, #8
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d030      	beq.n	8001b90 <HAL_RCC_OscConfig+0x24c>
=======
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0308 	and.w	r3, r3, #8
 8002392:	2b00      	cmp	r3, #0
 8002394:	d030      	beq.n	80023f8 <HAL_RCC_OscConfig+0x24c>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
<<<<<<< Updated upstream
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d016      	beq.n	8001b64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b36:	4b30      	ldr	r3, [pc, #192]	; (8001bf8 <HAL_RCC_OscConfig+0x2b4>)
 8001b38:	2201      	movs	r2, #1
 8001b3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b3c:	f7ff fbc0 	bl	80012c0 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b44:	f7ff fbbc 	bl	80012c0 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e164      	b.n	8001e20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b56:	4b26      	ldr	r3, [pc, #152]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 8001b58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0f0      	beq.n	8001b44 <HAL_RCC_OscConfig+0x200>
 8001b62:	e015      	b.n	8001b90 <HAL_RCC_OscConfig+0x24c>
=======
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d016      	beq.n	80023cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800239e:	4b30      	ldr	r3, [pc, #192]	; (8002460 <HAL_RCC_OscConfig+0x2b4>)
 80023a0:	2201      	movs	r2, #1
 80023a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a4:	f7ff f844 	bl	8001430 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023ac:	f7ff f840 	bl	8001430 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e164      	b.n	8002688 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023be:	4b26      	ldr	r3, [pc, #152]	; (8002458 <HAL_RCC_OscConfig+0x2ac>)
 80023c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d0f0      	beq.n	80023ac <HAL_RCC_OscConfig+0x200>
 80023ca:	e015      	b.n	80023f8 <HAL_RCC_OscConfig+0x24c>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< Updated upstream
 8001b64:	4b24      	ldr	r3, [pc, #144]	; (8001bf8 <HAL_RCC_OscConfig+0x2b4>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b6a:	f7ff fba9 	bl	80012c0 <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b72:	f7ff fba5 	bl	80012c0 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e14d      	b.n	8001e20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b84:	4b1a      	ldr	r3, [pc, #104]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 8001b86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1f0      	bne.n	8001b72 <HAL_RCC_OscConfig+0x22e>
=======
 80023cc:	4b24      	ldr	r3, [pc, #144]	; (8002460 <HAL_RCC_OscConfig+0x2b4>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d2:	f7ff f82d 	bl	8001430 <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023d8:	e008      	b.n	80023ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023da:	f7ff f829 	bl	8001430 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e14d      	b.n	8002688 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ec:	4b1a      	ldr	r3, [pc, #104]	; (8002458 <HAL_RCC_OscConfig+0x2ac>)
 80023ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1f0      	bne.n	80023da <HAL_RCC_OscConfig+0x22e>
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< Updated upstream
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f000 80a0 	beq.w	8001cde <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	75fb      	strb	r3, [r7, #23]
=======
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	2b00      	cmp	r3, #0
 8002402:	f000 80a0 	beq.w	8002546 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002406:	2300      	movs	r3, #0
 8002408:	75fb      	strb	r3, [r7, #23]
>>>>>>> Stashed changes
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< Updated upstream
 8001ba2:	4b13      	ldr	r3, [pc, #76]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d10f      	bne.n	8001bce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60bb      	str	r3, [r7, #8]
 8001bb2:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	4a0e      	ldr	r2, [pc, #56]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 8001bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bbe:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bce:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <HAL_RCC_OscConfig+0x2b8>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d121      	bne.n	8001c1e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bda:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <HAL_RCC_OscConfig+0x2b8>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a07      	ldr	r2, [pc, #28]	; (8001bfc <HAL_RCC_OscConfig+0x2b8>)
 8001be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001be6:	f7ff fb6b 	bl	80012c0 <HAL_GetTick>
 8001bea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bec:	e011      	b.n	8001c12 <HAL_RCC_OscConfig+0x2ce>
 8001bee:	bf00      	nop
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	42470000 	.word	0x42470000
 8001bf8:	42470e80 	.word	0x42470e80
 8001bfc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c00:	f7ff fb5e 	bl	80012c0 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e106      	b.n	8001e20 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c12:	4b85      	ldr	r3, [pc, #532]	; (8001e28 <HAL_RCC_OscConfig+0x4e4>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0f0      	beq.n	8001c00 <HAL_RCC_OscConfig+0x2bc>
=======
 800240a:	4b13      	ldr	r3, [pc, #76]	; (8002458 <HAL_RCC_OscConfig+0x2ac>)
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10f      	bne.n	8002436 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	4b0f      	ldr	r3, [pc, #60]	; (8002458 <HAL_RCC_OscConfig+0x2ac>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	4a0e      	ldr	r2, [pc, #56]	; (8002458 <HAL_RCC_OscConfig+0x2ac>)
 8002420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002424:	6413      	str	r3, [r2, #64]	; 0x40
 8002426:	4b0c      	ldr	r3, [pc, #48]	; (8002458 <HAL_RCC_OscConfig+0x2ac>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242e:	60bb      	str	r3, [r7, #8]
 8002430:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002432:	2301      	movs	r3, #1
 8002434:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002436:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <HAL_RCC_OscConfig+0x2b8>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243e:	2b00      	cmp	r3, #0
 8002440:	d121      	bne.n	8002486 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002442:	4b08      	ldr	r3, [pc, #32]	; (8002464 <HAL_RCC_OscConfig+0x2b8>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a07      	ldr	r2, [pc, #28]	; (8002464 <HAL_RCC_OscConfig+0x2b8>)
 8002448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800244c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800244e:	f7fe ffef 	bl	8001430 <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002454:	e011      	b.n	800247a <HAL_RCC_OscConfig+0x2ce>
 8002456:	bf00      	nop
 8002458:	40023800 	.word	0x40023800
 800245c:	42470000 	.word	0x42470000
 8002460:	42470e80 	.word	0x42470e80
 8002464:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002468:	f7fe ffe2 	bl	8001430 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e106      	b.n	8002688 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800247a:	4b85      	ldr	r3, [pc, #532]	; (8002690 <HAL_RCC_OscConfig+0x4e4>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0f0      	beq.n	8002468 <HAL_RCC_OscConfig+0x2bc>
>>>>>>> Stashed changes
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< Updated upstream
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d106      	bne.n	8001c34 <HAL_RCC_OscConfig+0x2f0>
 8001c26:	4b81      	ldr	r3, [pc, #516]	; (8001e2c <HAL_RCC_OscConfig+0x4e8>)
 8001c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c2a:	4a80      	ldr	r2, [pc, #512]	; (8001e2c <HAL_RCC_OscConfig+0x4e8>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	6713      	str	r3, [r2, #112]	; 0x70
 8001c32:	e01c      	b.n	8001c6e <HAL_RCC_OscConfig+0x32a>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	2b05      	cmp	r3, #5
 8001c3a:	d10c      	bne.n	8001c56 <HAL_RCC_OscConfig+0x312>
 8001c3c:	4b7b      	ldr	r3, [pc, #492]	; (8001e2c <HAL_RCC_OscConfig+0x4e8>)
 8001c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c40:	4a7a      	ldr	r2, [pc, #488]	; (8001e2c <HAL_RCC_OscConfig+0x4e8>)
 8001c42:	f043 0304 	orr.w	r3, r3, #4
 8001c46:	6713      	str	r3, [r2, #112]	; 0x70
 8001c48:	4b78      	ldr	r3, [pc, #480]	; (8001e2c <HAL_RCC_OscConfig+0x4e8>)
 8001c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c4c:	4a77      	ldr	r2, [pc, #476]	; (8001e2c <HAL_RCC_OscConfig+0x4e8>)
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	6713      	str	r3, [r2, #112]	; 0x70
 8001c54:	e00b      	b.n	8001c6e <HAL_RCC_OscConfig+0x32a>
 8001c56:	4b75      	ldr	r3, [pc, #468]	; (8001e2c <HAL_RCC_OscConfig+0x4e8>)
 8001c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c5a:	4a74      	ldr	r2, [pc, #464]	; (8001e2c <HAL_RCC_OscConfig+0x4e8>)
 8001c5c:	f023 0301 	bic.w	r3, r3, #1
 8001c60:	6713      	str	r3, [r2, #112]	; 0x70
 8001c62:	4b72      	ldr	r3, [pc, #456]	; (8001e2c <HAL_RCC_OscConfig+0x4e8>)
 8001c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c66:	4a71      	ldr	r2, [pc, #452]	; (8001e2c <HAL_RCC_OscConfig+0x4e8>)
 8001c68:	f023 0304 	bic.w	r3, r3, #4
 8001c6c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d015      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c76:	f7ff fb23 	bl	80012c0 <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c7c:	e00a      	b.n	8001c94 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c7e:	f7ff fb1f 	bl	80012c0 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e0c5      	b.n	8001e20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c94:	4b65      	ldr	r3, [pc, #404]	; (8001e2c <HAL_RCC_OscConfig+0x4e8>)
 8001c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d0ee      	beq.n	8001c7e <HAL_RCC_OscConfig+0x33a>
 8001ca0:	e014      	b.n	8001ccc <HAL_RCC_OscConfig+0x388>
=======
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d106      	bne.n	800249c <HAL_RCC_OscConfig+0x2f0>
 800248e:	4b81      	ldr	r3, [pc, #516]	; (8002694 <HAL_RCC_OscConfig+0x4e8>)
 8002490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002492:	4a80      	ldr	r2, [pc, #512]	; (8002694 <HAL_RCC_OscConfig+0x4e8>)
 8002494:	f043 0301 	orr.w	r3, r3, #1
 8002498:	6713      	str	r3, [r2, #112]	; 0x70
 800249a:	e01c      	b.n	80024d6 <HAL_RCC_OscConfig+0x32a>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	2b05      	cmp	r3, #5
 80024a2:	d10c      	bne.n	80024be <HAL_RCC_OscConfig+0x312>
 80024a4:	4b7b      	ldr	r3, [pc, #492]	; (8002694 <HAL_RCC_OscConfig+0x4e8>)
 80024a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a8:	4a7a      	ldr	r2, [pc, #488]	; (8002694 <HAL_RCC_OscConfig+0x4e8>)
 80024aa:	f043 0304 	orr.w	r3, r3, #4
 80024ae:	6713      	str	r3, [r2, #112]	; 0x70
 80024b0:	4b78      	ldr	r3, [pc, #480]	; (8002694 <HAL_RCC_OscConfig+0x4e8>)
 80024b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b4:	4a77      	ldr	r2, [pc, #476]	; (8002694 <HAL_RCC_OscConfig+0x4e8>)
 80024b6:	f043 0301 	orr.w	r3, r3, #1
 80024ba:	6713      	str	r3, [r2, #112]	; 0x70
 80024bc:	e00b      	b.n	80024d6 <HAL_RCC_OscConfig+0x32a>
 80024be:	4b75      	ldr	r3, [pc, #468]	; (8002694 <HAL_RCC_OscConfig+0x4e8>)
 80024c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c2:	4a74      	ldr	r2, [pc, #464]	; (8002694 <HAL_RCC_OscConfig+0x4e8>)
 80024c4:	f023 0301 	bic.w	r3, r3, #1
 80024c8:	6713      	str	r3, [r2, #112]	; 0x70
 80024ca:	4b72      	ldr	r3, [pc, #456]	; (8002694 <HAL_RCC_OscConfig+0x4e8>)
 80024cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ce:	4a71      	ldr	r2, [pc, #452]	; (8002694 <HAL_RCC_OscConfig+0x4e8>)
 80024d0:	f023 0304 	bic.w	r3, r3, #4
 80024d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d015      	beq.n	800250a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024de:	f7fe ffa7 	bl	8001430 <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024e4:	e00a      	b.n	80024fc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024e6:	f7fe ffa3 	bl	8001430 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e0c5      	b.n	8002688 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024fc:	4b65      	ldr	r3, [pc, #404]	; (8002694 <HAL_RCC_OscConfig+0x4e8>)
 80024fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0ee      	beq.n	80024e6 <HAL_RCC_OscConfig+0x33a>
 8002508:	e014      	b.n	8002534 <HAL_RCC_OscConfig+0x388>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 8001ca2:	f7ff fb0d 	bl	80012c0 <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ca8:	e00a      	b.n	8001cc0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001caa:	f7ff fb09 	bl	80012c0 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e0af      	b.n	8001e20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cc0:	4b5a      	ldr	r3, [pc, #360]	; (8001e2c <HAL_RCC_OscConfig+0x4e8>)
 8001cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1ee      	bne.n	8001caa <HAL_RCC_OscConfig+0x366>
=======
 800250a:	f7fe ff91 	bl	8001430 <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002510:	e00a      	b.n	8002528 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002512:	f7fe ff8d 	bl	8001430 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002520:	4293      	cmp	r3, r2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e0af      	b.n	8002688 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002528:	4b5a      	ldr	r3, [pc, #360]	; (8002694 <HAL_RCC_OscConfig+0x4e8>)
 800252a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1ee      	bne.n	8002512 <HAL_RCC_OscConfig+0x366>
>>>>>>> Stashed changes
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< Updated upstream
 8001ccc:	7dfb      	ldrb	r3, [r7, #23]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d105      	bne.n	8001cde <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cd2:	4b56      	ldr	r3, [pc, #344]	; (8001e2c <HAL_RCC_OscConfig+0x4e8>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	4a55      	ldr	r2, [pc, #340]	; (8001e2c <HAL_RCC_OscConfig+0x4e8>)
 8001cd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cdc:	6413      	str	r3, [r2, #64]	; 0x40
=======
 8002534:	7dfb      	ldrb	r3, [r7, #23]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d105      	bne.n	8002546 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800253a:	4b56      	ldr	r3, [pc, #344]	; (8002694 <HAL_RCC_OscConfig+0x4e8>)
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	4a55      	ldr	r2, [pc, #340]	; (8002694 <HAL_RCC_OscConfig+0x4e8>)
 8002540:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002544:	6413      	str	r3, [r2, #64]	; 0x40
>>>>>>> Stashed changes
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< Updated upstream
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f000 809b 	beq.w	8001e1e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ce8:	4b50      	ldr	r3, [pc, #320]	; (8001e2c <HAL_RCC_OscConfig+0x4e8>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f003 030c 	and.w	r3, r3, #12
 8001cf0:	2b08      	cmp	r3, #8
 8001cf2:	d05c      	beq.n	8001dae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d141      	bne.n	8001d80 <HAL_RCC_OscConfig+0x43c>
=======
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	2b00      	cmp	r3, #0
 800254c:	f000 809b 	beq.w	8002686 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002550:	4b50      	ldr	r3, [pc, #320]	; (8002694 <HAL_RCC_OscConfig+0x4e8>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 030c 	and.w	r3, r3, #12
 8002558:	2b08      	cmp	r3, #8
 800255a:	d05c      	beq.n	8002616 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	2b02      	cmp	r3, #2
 8002562:	d141      	bne.n	80025e8 <HAL_RCC_OscConfig+0x43c>
>>>>>>> Stashed changes
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< Updated upstream
 8001cfc:	4b4c      	ldr	r3, [pc, #304]	; (8001e30 <HAL_RCC_OscConfig+0x4ec>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d02:	f7ff fadd 	bl	80012c0 <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d0a:	f7ff fad9 	bl	80012c0 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e081      	b.n	8001e20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d1c:	4b43      	ldr	r3, [pc, #268]	; (8001e2c <HAL_RCC_OscConfig+0x4e8>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1f0      	bne.n	8001d0a <HAL_RCC_OscConfig+0x3c6>
=======
 8002564:	4b4c      	ldr	r3, [pc, #304]	; (8002698 <HAL_RCC_OscConfig+0x4ec>)
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256a:	f7fe ff61 	bl	8001430 <HAL_GetTick>
 800256e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002570:	e008      	b.n	8002584 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002572:	f7fe ff5d 	bl	8001430 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e081      	b.n	8002688 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002584:	4b43      	ldr	r3, [pc, #268]	; (8002694 <HAL_RCC_OscConfig+0x4e8>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d1f0      	bne.n	8002572 <HAL_RCC_OscConfig+0x3c6>
>>>>>>> Stashed changes
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
<<<<<<< Updated upstream
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	69da      	ldr	r2, [r3, #28]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	431a      	orrs	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d36:	019b      	lsls	r3, r3, #6
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d3e:	085b      	lsrs	r3, r3, #1
 8001d40:	3b01      	subs	r3, #1
 8001d42:	041b      	lsls	r3, r3, #16
 8001d44:	431a      	orrs	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4a:	061b      	lsls	r3, r3, #24
 8001d4c:	4937      	ldr	r1, [pc, #220]	; (8001e2c <HAL_RCC_OscConfig+0x4e8>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	604b      	str	r3, [r1, #4]
=======
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	69da      	ldr	r2, [r3, #28]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	431a      	orrs	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259e:	019b      	lsls	r3, r3, #6
 80025a0:	431a      	orrs	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a6:	085b      	lsrs	r3, r3, #1
 80025a8:	3b01      	subs	r3, #1
 80025aa:	041b      	lsls	r3, r3, #16
 80025ac:	431a      	orrs	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b2:	061b      	lsls	r3, r3, #24
 80025b4:	4937      	ldr	r1, [pc, #220]	; (8002694 <HAL_RCC_OscConfig+0x4e8>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	604b      	str	r3, [r1, #4]
>>>>>>> Stashed changes
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< Updated upstream
 8001d52:	4b37      	ldr	r3, [pc, #220]	; (8001e30 <HAL_RCC_OscConfig+0x4ec>)
 8001d54:	2201      	movs	r2, #1
 8001d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d58:	f7ff fab2 	bl	80012c0 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d60:	f7ff faae 	bl	80012c0 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e056      	b.n	8001e20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d72:	4b2e      	ldr	r3, [pc, #184]	; (8001e2c <HAL_RCC_OscConfig+0x4e8>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0f0      	beq.n	8001d60 <HAL_RCC_OscConfig+0x41c>
 8001d7e:	e04e      	b.n	8001e1e <HAL_RCC_OscConfig+0x4da>
=======
 80025ba:	4b37      	ldr	r3, [pc, #220]	; (8002698 <HAL_RCC_OscConfig+0x4ec>)
 80025bc:	2201      	movs	r2, #1
 80025be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c0:	f7fe ff36 	bl	8001430 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025c8:	f7fe ff32 	bl	8001430 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e056      	b.n	8002688 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025da:	4b2e      	ldr	r3, [pc, #184]	; (8002694 <HAL_RCC_OscConfig+0x4e8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0f0      	beq.n	80025c8 <HAL_RCC_OscConfig+0x41c>
 80025e6:	e04e      	b.n	8002686 <HAL_RCC_OscConfig+0x4da>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< Updated upstream
 8001d80:	4b2b      	ldr	r3, [pc, #172]	; (8001e30 <HAL_RCC_OscConfig+0x4ec>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d86:	f7ff fa9b 	bl	80012c0 <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d8e:	f7ff fa97 	bl	80012c0 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e03f      	b.n	8001e20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001da0:	4b22      	ldr	r3, [pc, #136]	; (8001e2c <HAL_RCC_OscConfig+0x4e8>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1f0      	bne.n	8001d8e <HAL_RCC_OscConfig+0x44a>
 8001dac:	e037      	b.n	8001e1e <HAL_RCC_OscConfig+0x4da>
=======
 80025e8:	4b2b      	ldr	r3, [pc, #172]	; (8002698 <HAL_RCC_OscConfig+0x4ec>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ee:	f7fe ff1f 	bl	8001430 <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025f4:	e008      	b.n	8002608 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f6:	f7fe ff1b 	bl	8001430 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e03f      	b.n	8002688 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002608:	4b22      	ldr	r3, [pc, #136]	; (8002694 <HAL_RCC_OscConfig+0x4e8>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1f0      	bne.n	80025f6 <HAL_RCC_OscConfig+0x44a>
 8002614:	e037      	b.n	8002686 <HAL_RCC_OscConfig+0x4da>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< Updated upstream
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d101      	bne.n	8001dba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e032      	b.n	8001e20 <HAL_RCC_OscConfig+0x4dc>
=======
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d101      	bne.n	8002622 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e032      	b.n	8002688 <HAL_RCC_OscConfig+0x4dc>
>>>>>>> Stashed changes
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
<<<<<<< Updated upstream
 8001dba:	4b1c      	ldr	r3, [pc, #112]	; (8001e2c <HAL_RCC_OscConfig+0x4e8>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	60fb      	str	r3, [r7, #12]
=======
 8002622:	4b1c      	ldr	r3, [pc, #112]	; (8002694 <HAL_RCC_OscConfig+0x4e8>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
<<<<<<< Updated upstream
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d028      	beq.n	8001e1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d121      	bne.n	8001e1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d11a      	bne.n	8001e1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001dea:	4013      	ands	r3, r2
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001df0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d111      	bne.n	8001e1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e00:	085b      	lsrs	r3, r3, #1
 8001e02:	3b01      	subs	r3, #1
 8001e04:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d107      	bne.n	8001e1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e14:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d001      	beq.n	8001e1e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <HAL_RCC_OscConfig+0x4dc>
=======
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d028      	beq.n	8002682 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800263a:	429a      	cmp	r2, r3
 800263c:	d121      	bne.n	8002682 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002648:	429a      	cmp	r2, r3
 800264a:	d11a      	bne.n	8002682 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002652:	4013      	ands	r3, r2
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002658:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800265a:	4293      	cmp	r3, r2
 800265c:	d111      	bne.n	8002682 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002668:	085b      	lsrs	r3, r3, #1
 800266a:	3b01      	subs	r3, #1
 800266c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800266e:	429a      	cmp	r2, r3
 8002670:	d107      	bne.n	8002682 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800267e:	429a      	cmp	r2, r3
 8002680:	d001      	beq.n	8002686 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <HAL_RCC_OscConfig+0x4dc>
>>>>>>> Stashed changes
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3718      	adds	r7, #24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40007000 	.word	0x40007000
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	42470060 	.word	0x42470060

08001e34 <HAL_RCC_ClockConfig>:
=======
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3718      	adds	r7, #24
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40007000 	.word	0x40007000
 8002694:	40023800 	.word	0x40023800
 8002698:	42470060 	.word	0x42470060

0800269c <HAL_RCC_ClockConfig>:
>>>>>>> Stashed changes
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< Updated upstream
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
=======
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
<<<<<<< Updated upstream
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d101      	bne.n	8001e48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e0cc      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1ae>
=======
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e0cc      	b.n	800284a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< Updated upstream
 8001e48:	4b68      	ldr	r3, [pc, #416]	; (8001fec <HAL_RCC_ClockConfig+0x1b8>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0307 	and.w	r3, r3, #7
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d90c      	bls.n	8001e70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e56:	4b65      	ldr	r3, [pc, #404]	; (8001fec <HAL_RCC_ClockConfig+0x1b8>)
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	701a      	strb	r2, [r3, #0]
=======
 80026b0:	4b68      	ldr	r3, [pc, #416]	; (8002854 <HAL_RCC_ClockConfig+0x1b8>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d90c      	bls.n	80026d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026be:	4b65      	ldr	r3, [pc, #404]	; (8002854 <HAL_RCC_ClockConfig+0x1b8>)
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< Updated upstream
 8001e5e:	4b63      	ldr	r3, [pc, #396]	; (8001fec <HAL_RCC_ClockConfig+0x1b8>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d001      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e0b8      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1ae>
=======
 80026c6:	4b63      	ldr	r3, [pc, #396]	; (8002854 <HAL_RCC_ClockConfig+0x1b8>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d001      	beq.n	80026d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e0b8      	b.n	800284a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< Updated upstream
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d020      	beq.n	8001ebe <HAL_RCC_ClockConfig+0x8a>
=======
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d020      	beq.n	8002726 <HAL_RCC_ClockConfig+0x8a>
>>>>>>> Stashed changes
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< Updated upstream
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0304 	and.w	r3, r3, #4
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d005      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e88:	4b59      	ldr	r3, [pc, #356]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	4a58      	ldr	r2, [pc, #352]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0308 	and.w	r3, r3, #8
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d005      	beq.n	8001eac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ea0:	4b53      	ldr	r3, [pc, #332]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	4a52      	ldr	r2, [pc, #328]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001eaa:	6093      	str	r3, [r2, #8]
=======
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d005      	beq.n	80026fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026f0:	4b59      	ldr	r3, [pc, #356]	; (8002858 <HAL_RCC_ClockConfig+0x1bc>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	4a58      	ldr	r2, [pc, #352]	; (8002858 <HAL_RCC_ClockConfig+0x1bc>)
 80026f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0308 	and.w	r3, r3, #8
 8002704:	2b00      	cmp	r3, #0
 8002706:	d005      	beq.n	8002714 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002708:	4b53      	ldr	r3, [pc, #332]	; (8002858 <HAL_RCC_ClockConfig+0x1bc>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	4a52      	ldr	r2, [pc, #328]	; (8002858 <HAL_RCC_ClockConfig+0x1bc>)
 800270e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002712:	6093      	str	r3, [r2, #8]
>>>>>>> Stashed changes
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< Updated upstream
 8001eac:	4b50      	ldr	r3, [pc, #320]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	494d      	ldr	r1, [pc, #308]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	608b      	str	r3, [r1, #8]
=======
 8002714:	4b50      	ldr	r3, [pc, #320]	; (8002858 <HAL_RCC_ClockConfig+0x1bc>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	494d      	ldr	r1, [pc, #308]	; (8002858 <HAL_RCC_ClockConfig+0x1bc>)
 8002722:	4313      	orrs	r3, r2
 8002724:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< Updated upstream
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d044      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x120>
=======
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b00      	cmp	r3, #0
 8002730:	d044      	beq.n	80027bc <HAL_RCC_ClockConfig+0x120>
>>>>>>> Stashed changes
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< Updated upstream
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d107      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed2:	4b47      	ldr	r3, [pc, #284]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d119      	bne.n	8001f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e07f      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1ae>
=======
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d107      	bne.n	800274a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273a:	4b47      	ldr	r3, [pc, #284]	; (8002858 <HAL_RCC_ClockConfig+0x1bc>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d119      	bne.n	800277a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e07f      	b.n	800284a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
<<<<<<< Updated upstream
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d003      	beq.n	8001ef2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eee:	2b03      	cmp	r3, #3
 8001ef0:	d107      	bne.n	8001f02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ef2:	4b3f      	ldr	r3, [pc, #252]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d109      	bne.n	8001f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e06f      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1ae>
=======
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2b02      	cmp	r3, #2
 8002750:	d003      	beq.n	800275a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002756:	2b03      	cmp	r3, #3
 8002758:	d107      	bne.n	800276a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800275a:	4b3f      	ldr	r3, [pc, #252]	; (8002858 <HAL_RCC_ClockConfig+0x1bc>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d109      	bne.n	800277a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e06f      	b.n	800284a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< Updated upstream
 8001f02:	4b3b      	ldr	r3, [pc, #236]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e067      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1ae>
=======
 800276a:	4b3b      	ldr	r3, [pc, #236]	; (8002858 <HAL_RCC_ClockConfig+0x1bc>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e067      	b.n	800284a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< Updated upstream
 8001f12:	4b37      	ldr	r3, [pc, #220]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f023 0203 	bic.w	r2, r3, #3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	4934      	ldr	r1, [pc, #208]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f24:	f7ff f9cc 	bl	80012c0 <HAL_GetTick>
 8001f28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f2a:	e00a      	b.n	8001f42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f2c:	f7ff f9c8 	bl	80012c0 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e04f      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f42:	4b2b      	ldr	r3, [pc, #172]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f003 020c 	and.w	r2, r3, #12
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d1eb      	bne.n	8001f2c <HAL_RCC_ClockConfig+0xf8>
=======
 800277a:	4b37      	ldr	r3, [pc, #220]	; (8002858 <HAL_RCC_ClockConfig+0x1bc>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f023 0203 	bic.w	r2, r3, #3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	4934      	ldr	r1, [pc, #208]	; (8002858 <HAL_RCC_ClockConfig+0x1bc>)
 8002788:	4313      	orrs	r3, r2
 800278a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800278c:	f7fe fe50 	bl	8001430 <HAL_GetTick>
 8002790:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002792:	e00a      	b.n	80027aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002794:	f7fe fe4c 	bl	8001430 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e04f      	b.n	800284a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027aa:	4b2b      	ldr	r3, [pc, #172]	; (8002858 <HAL_RCC_ClockConfig+0x1bc>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 020c 	and.w	r2, r3, #12
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d1eb      	bne.n	8002794 <HAL_RCC_ClockConfig+0xf8>
>>>>>>> Stashed changes
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< Updated upstream
 8001f54:	4b25      	ldr	r3, [pc, #148]	; (8001fec <HAL_RCC_ClockConfig+0x1b8>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0307 	and.w	r3, r3, #7
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d20c      	bcs.n	8001f7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f62:	4b22      	ldr	r3, [pc, #136]	; (8001fec <HAL_RCC_ClockConfig+0x1b8>)
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	701a      	strb	r2, [r3, #0]
=======
 80027bc:	4b25      	ldr	r3, [pc, #148]	; (8002854 <HAL_RCC_ClockConfig+0x1b8>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d20c      	bcs.n	80027e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ca:	4b22      	ldr	r3, [pc, #136]	; (8002854 <HAL_RCC_ClockConfig+0x1b8>)
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< Updated upstream
 8001f6a:	4b20      	ldr	r3, [pc, #128]	; (8001fec <HAL_RCC_ClockConfig+0x1b8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d001      	beq.n	8001f7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e032      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1ae>
=======
 80027d2:	4b20      	ldr	r3, [pc, #128]	; (8002854 <HAL_RCC_ClockConfig+0x1b8>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d001      	beq.n	80027e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e032      	b.n	800284a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< Updated upstream
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d008      	beq.n	8001f9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f88:	4b19      	ldr	r3, [pc, #100]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	4916      	ldr	r1, [pc, #88]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	608b      	str	r3, [r1, #8]
=======
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d008      	beq.n	8002802 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027f0:	4b19      	ldr	r3, [pc, #100]	; (8002858 <HAL_RCC_ClockConfig+0x1bc>)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	4916      	ldr	r1, [pc, #88]	; (8002858 <HAL_RCC_ClockConfig+0x1bc>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< Updated upstream
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0308 	and.w	r3, r3, #8
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d009      	beq.n	8001fba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fa6:	4b12      	ldr	r3, [pc, #72]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	490e      	ldr	r1, [pc, #56]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	608b      	str	r3, [r1, #8]
=======
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0308 	and.w	r3, r3, #8
 800280a:	2b00      	cmp	r3, #0
 800280c:	d009      	beq.n	8002822 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800280e:	4b12      	ldr	r3, [pc, #72]	; (8002858 <HAL_RCC_ClockConfig+0x1bc>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	490e      	ldr	r1, [pc, #56]	; (8002858 <HAL_RCC_ClockConfig+0x1bc>)
 800281e:	4313      	orrs	r3, r2
 8002820:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
<<<<<<< Updated upstream
 8001fba:	f000 f821 	bl	8002000 <HAL_RCC_GetSysClockFreq>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	091b      	lsrs	r3, r3, #4
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	490a      	ldr	r1, [pc, #40]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8001fcc:	5ccb      	ldrb	r3, [r1, r3]
 8001fce:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd2:	4a09      	ldr	r2, [pc, #36]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001fd6:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <HAL_RCC_ClockConfig+0x1c8>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff f92c 	bl	8001238 <HAL_InitTick>

  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40023c00 	.word	0x40023c00
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	08002f20 	.word	0x08002f20
 8001ff8:	20000000 	.word	0x20000000
 8001ffc:	20000004 	.word	0x20000004

08002000 <HAL_RCC_GetSysClockFreq>:
=======
 8002822:	f000 f821 	bl	8002868 <HAL_RCC_GetSysClockFreq>
 8002826:	4602      	mov	r2, r0
 8002828:	4b0b      	ldr	r3, [pc, #44]	; (8002858 <HAL_RCC_ClockConfig+0x1bc>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	091b      	lsrs	r3, r3, #4
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	490a      	ldr	r1, [pc, #40]	; (800285c <HAL_RCC_ClockConfig+0x1c0>)
 8002834:	5ccb      	ldrb	r3, [r1, r3]
 8002836:	fa22 f303 	lsr.w	r3, r2, r3
 800283a:	4a09      	ldr	r2, [pc, #36]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 800283c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800283e:	4b09      	ldr	r3, [pc, #36]	; (8002864 <HAL_RCC_ClockConfig+0x1c8>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f7fe fdb0 	bl	80013a8 <HAL_InitTick>

  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40023c00 	.word	0x40023c00
 8002858:	40023800 	.word	0x40023800
 800285c:	08003d04 	.word	0x08003d04
 8002860:	20000000 	.word	0x20000000
 8002864:	20000004 	.word	0x20000004

08002868 <HAL_RCC_GetSysClockFreq>:
>>>>>>> Stashed changes
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< Updated upstream
 8002000:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002004:	b084      	sub	sp, #16
 8002006:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002008:	2300      	movs	r3, #0
 800200a:	607b      	str	r3, [r7, #4]
 800200c:	2300      	movs	r3, #0
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	2300      	movs	r3, #0
 8002012:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002014:	2300      	movs	r3, #0
 8002016:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002018:	4b67      	ldr	r3, [pc, #412]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 030c 	and.w	r3, r3, #12
 8002020:	2b08      	cmp	r3, #8
 8002022:	d00d      	beq.n	8002040 <HAL_RCC_GetSysClockFreq+0x40>
 8002024:	2b08      	cmp	r3, #8
 8002026:	f200 80bd 	bhi.w	80021a4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800202a:	2b00      	cmp	r3, #0
 800202c:	d002      	beq.n	8002034 <HAL_RCC_GetSysClockFreq+0x34>
 800202e:	2b04      	cmp	r3, #4
 8002030:	d003      	beq.n	800203a <HAL_RCC_GetSysClockFreq+0x3a>
 8002032:	e0b7      	b.n	80021a4 <HAL_RCC_GetSysClockFreq+0x1a4>
=======
 8002868:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800286c:	b084      	sub	sp, #16
 800286e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002870:	2300      	movs	r3, #0
 8002872:	607b      	str	r3, [r7, #4]
 8002874:	2300      	movs	r3, #0
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	2300      	movs	r3, #0
 800287a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800287c:	2300      	movs	r3, #0
 800287e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002880:	4b67      	ldr	r3, [pc, #412]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f003 030c 	and.w	r3, r3, #12
 8002888:	2b08      	cmp	r3, #8
 800288a:	d00d      	beq.n	80028a8 <HAL_RCC_GetSysClockFreq+0x40>
 800288c:	2b08      	cmp	r3, #8
 800288e:	f200 80bd 	bhi.w	8002a0c <HAL_RCC_GetSysClockFreq+0x1a4>
 8002892:	2b00      	cmp	r3, #0
 8002894:	d002      	beq.n	800289c <HAL_RCC_GetSysClockFreq+0x34>
 8002896:	2b04      	cmp	r3, #4
 8002898:	d003      	beq.n	80028a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800289a:	e0b7      	b.n	8002a0c <HAL_RCC_GetSysClockFreq+0x1a4>
>>>>>>> Stashed changes
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< Updated upstream
 8002034:	4b61      	ldr	r3, [pc, #388]	; (80021bc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002036:	60bb      	str	r3, [r7, #8]
       break;
 8002038:	e0b7      	b.n	80021aa <HAL_RCC_GetSysClockFreq+0x1aa>
=======
 800289c:	4b61      	ldr	r3, [pc, #388]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800289e:	60bb      	str	r3, [r7, #8]
       break;
 80028a0:	e0b7      	b.n	8002a12 <HAL_RCC_GetSysClockFreq+0x1aa>
>>>>>>> Stashed changes
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< Updated upstream
 800203a:	4b61      	ldr	r3, [pc, #388]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800203c:	60bb      	str	r3, [r7, #8]
      break;
 800203e:	e0b4      	b.n	80021aa <HAL_RCC_GetSysClockFreq+0x1aa>
=======
 80028a2:	4b61      	ldr	r3, [pc, #388]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80028a4:	60bb      	str	r3, [r7, #8]
      break;
 80028a6:	e0b4      	b.n	8002a12 <HAL_RCC_GetSysClockFreq+0x1aa>
>>>>>>> Stashed changes
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
<<<<<<< Updated upstream
 8002040:	4b5d      	ldr	r3, [pc, #372]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002048:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800204a:	4b5b      	ldr	r3, [pc, #364]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d04d      	beq.n	80020f2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002056:	4b58      	ldr	r3, [pc, #352]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	099b      	lsrs	r3, r3, #6
 800205c:	461a      	mov	r2, r3
 800205e:	f04f 0300 	mov.w	r3, #0
 8002062:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002066:	f04f 0100 	mov.w	r1, #0
 800206a:	ea02 0800 	and.w	r8, r2, r0
 800206e:	ea03 0901 	and.w	r9, r3, r1
 8002072:	4640      	mov	r0, r8
 8002074:	4649      	mov	r1, r9
 8002076:	f04f 0200 	mov.w	r2, #0
 800207a:	f04f 0300 	mov.w	r3, #0
 800207e:	014b      	lsls	r3, r1, #5
 8002080:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002084:	0142      	lsls	r2, r0, #5
 8002086:	4610      	mov	r0, r2
 8002088:	4619      	mov	r1, r3
 800208a:	ebb0 0008 	subs.w	r0, r0, r8
 800208e:	eb61 0109 	sbc.w	r1, r1, r9
 8002092:	f04f 0200 	mov.w	r2, #0
 8002096:	f04f 0300 	mov.w	r3, #0
 800209a:	018b      	lsls	r3, r1, #6
 800209c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80020a0:	0182      	lsls	r2, r0, #6
 80020a2:	1a12      	subs	r2, r2, r0
 80020a4:	eb63 0301 	sbc.w	r3, r3, r1
 80020a8:	f04f 0000 	mov.w	r0, #0
 80020ac:	f04f 0100 	mov.w	r1, #0
 80020b0:	00d9      	lsls	r1, r3, #3
 80020b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80020b6:	00d0      	lsls	r0, r2, #3
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	eb12 0208 	adds.w	r2, r2, r8
 80020c0:	eb43 0309 	adc.w	r3, r3, r9
 80020c4:	f04f 0000 	mov.w	r0, #0
 80020c8:	f04f 0100 	mov.w	r1, #0
 80020cc:	0259      	lsls	r1, r3, #9
 80020ce:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80020d2:	0250      	lsls	r0, r2, #9
 80020d4:	4602      	mov	r2, r0
 80020d6:	460b      	mov	r3, r1
 80020d8:	4610      	mov	r0, r2
 80020da:	4619      	mov	r1, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	461a      	mov	r2, r3
 80020e0:	f04f 0300 	mov.w	r3, #0
 80020e4:	f7fe f878 	bl	80001d8 <__aeabi_uldivmod>
 80020e8:	4602      	mov	r2, r0
 80020ea:	460b      	mov	r3, r1
 80020ec:	4613      	mov	r3, r2
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	e04a      	b.n	8002188 <HAL_RCC_GetSysClockFreq+0x188>
=======
 80028a8:	4b5d      	ldr	r3, [pc, #372]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028b0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028b2:	4b5b      	ldr	r3, [pc, #364]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d04d      	beq.n	800295a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028be:	4b58      	ldr	r3, [pc, #352]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	099b      	lsrs	r3, r3, #6
 80028c4:	461a      	mov	r2, r3
 80028c6:	f04f 0300 	mov.w	r3, #0
 80028ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80028ce:	f04f 0100 	mov.w	r1, #0
 80028d2:	ea02 0800 	and.w	r8, r2, r0
 80028d6:	ea03 0901 	and.w	r9, r3, r1
 80028da:	4640      	mov	r0, r8
 80028dc:	4649      	mov	r1, r9
 80028de:	f04f 0200 	mov.w	r2, #0
 80028e2:	f04f 0300 	mov.w	r3, #0
 80028e6:	014b      	lsls	r3, r1, #5
 80028e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80028ec:	0142      	lsls	r2, r0, #5
 80028ee:	4610      	mov	r0, r2
 80028f0:	4619      	mov	r1, r3
 80028f2:	ebb0 0008 	subs.w	r0, r0, r8
 80028f6:	eb61 0109 	sbc.w	r1, r1, r9
 80028fa:	f04f 0200 	mov.w	r2, #0
 80028fe:	f04f 0300 	mov.w	r3, #0
 8002902:	018b      	lsls	r3, r1, #6
 8002904:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002908:	0182      	lsls	r2, r0, #6
 800290a:	1a12      	subs	r2, r2, r0
 800290c:	eb63 0301 	sbc.w	r3, r3, r1
 8002910:	f04f 0000 	mov.w	r0, #0
 8002914:	f04f 0100 	mov.w	r1, #0
 8002918:	00d9      	lsls	r1, r3, #3
 800291a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800291e:	00d0      	lsls	r0, r2, #3
 8002920:	4602      	mov	r2, r0
 8002922:	460b      	mov	r3, r1
 8002924:	eb12 0208 	adds.w	r2, r2, r8
 8002928:	eb43 0309 	adc.w	r3, r3, r9
 800292c:	f04f 0000 	mov.w	r0, #0
 8002930:	f04f 0100 	mov.w	r1, #0
 8002934:	0259      	lsls	r1, r3, #9
 8002936:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800293a:	0250      	lsls	r0, r2, #9
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	4610      	mov	r0, r2
 8002942:	4619      	mov	r1, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	461a      	mov	r2, r3
 8002948:	f04f 0300 	mov.w	r3, #0
 800294c:	f7fd fc44 	bl	80001d8 <__aeabi_uldivmod>
 8002950:	4602      	mov	r2, r0
 8002952:	460b      	mov	r3, r1
 8002954:	4613      	mov	r3, r2
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	e04a      	b.n	80029f0 <HAL_RCC_GetSysClockFreq+0x188>
>>>>>>> Stashed changes
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< Updated upstream
 80020f2:	4b31      	ldr	r3, [pc, #196]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	099b      	lsrs	r3, r3, #6
 80020f8:	461a      	mov	r2, r3
 80020fa:	f04f 0300 	mov.w	r3, #0
 80020fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002102:	f04f 0100 	mov.w	r1, #0
 8002106:	ea02 0400 	and.w	r4, r2, r0
 800210a:	ea03 0501 	and.w	r5, r3, r1
 800210e:	4620      	mov	r0, r4
 8002110:	4629      	mov	r1, r5
 8002112:	f04f 0200 	mov.w	r2, #0
 8002116:	f04f 0300 	mov.w	r3, #0
 800211a:	014b      	lsls	r3, r1, #5
 800211c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002120:	0142      	lsls	r2, r0, #5
 8002122:	4610      	mov	r0, r2
 8002124:	4619      	mov	r1, r3
 8002126:	1b00      	subs	r0, r0, r4
 8002128:	eb61 0105 	sbc.w	r1, r1, r5
 800212c:	f04f 0200 	mov.w	r2, #0
 8002130:	f04f 0300 	mov.w	r3, #0
 8002134:	018b      	lsls	r3, r1, #6
 8002136:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800213a:	0182      	lsls	r2, r0, #6
 800213c:	1a12      	subs	r2, r2, r0
 800213e:	eb63 0301 	sbc.w	r3, r3, r1
 8002142:	f04f 0000 	mov.w	r0, #0
 8002146:	f04f 0100 	mov.w	r1, #0
 800214a:	00d9      	lsls	r1, r3, #3
 800214c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002150:	00d0      	lsls	r0, r2, #3
 8002152:	4602      	mov	r2, r0
 8002154:	460b      	mov	r3, r1
 8002156:	1912      	adds	r2, r2, r4
 8002158:	eb45 0303 	adc.w	r3, r5, r3
 800215c:	f04f 0000 	mov.w	r0, #0
 8002160:	f04f 0100 	mov.w	r1, #0
 8002164:	0299      	lsls	r1, r3, #10
 8002166:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800216a:	0290      	lsls	r0, r2, #10
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	4610      	mov	r0, r2
 8002172:	4619      	mov	r1, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	461a      	mov	r2, r3
 8002178:	f04f 0300 	mov.w	r3, #0
 800217c:	f7fe f82c 	bl	80001d8 <__aeabi_uldivmod>
 8002180:	4602      	mov	r2, r0
 8002182:	460b      	mov	r3, r1
 8002184:	4613      	mov	r3, r2
 8002186:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002188:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	0c1b      	lsrs	r3, r3, #16
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	3301      	adds	r3, #1
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a0:	60bb      	str	r3, [r7, #8]
      break;
 80021a2:	e002      	b.n	80021aa <HAL_RCC_GetSysClockFreq+0x1aa>
=======
 800295a:	4b31      	ldr	r3, [pc, #196]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	099b      	lsrs	r3, r3, #6
 8002960:	461a      	mov	r2, r3
 8002962:	f04f 0300 	mov.w	r3, #0
 8002966:	f240 10ff 	movw	r0, #511	; 0x1ff
 800296a:	f04f 0100 	mov.w	r1, #0
 800296e:	ea02 0400 	and.w	r4, r2, r0
 8002972:	ea03 0501 	and.w	r5, r3, r1
 8002976:	4620      	mov	r0, r4
 8002978:	4629      	mov	r1, r5
 800297a:	f04f 0200 	mov.w	r2, #0
 800297e:	f04f 0300 	mov.w	r3, #0
 8002982:	014b      	lsls	r3, r1, #5
 8002984:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002988:	0142      	lsls	r2, r0, #5
 800298a:	4610      	mov	r0, r2
 800298c:	4619      	mov	r1, r3
 800298e:	1b00      	subs	r0, r0, r4
 8002990:	eb61 0105 	sbc.w	r1, r1, r5
 8002994:	f04f 0200 	mov.w	r2, #0
 8002998:	f04f 0300 	mov.w	r3, #0
 800299c:	018b      	lsls	r3, r1, #6
 800299e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80029a2:	0182      	lsls	r2, r0, #6
 80029a4:	1a12      	subs	r2, r2, r0
 80029a6:	eb63 0301 	sbc.w	r3, r3, r1
 80029aa:	f04f 0000 	mov.w	r0, #0
 80029ae:	f04f 0100 	mov.w	r1, #0
 80029b2:	00d9      	lsls	r1, r3, #3
 80029b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80029b8:	00d0      	lsls	r0, r2, #3
 80029ba:	4602      	mov	r2, r0
 80029bc:	460b      	mov	r3, r1
 80029be:	1912      	adds	r2, r2, r4
 80029c0:	eb45 0303 	adc.w	r3, r5, r3
 80029c4:	f04f 0000 	mov.w	r0, #0
 80029c8:	f04f 0100 	mov.w	r1, #0
 80029cc:	0299      	lsls	r1, r3, #10
 80029ce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80029d2:	0290      	lsls	r0, r2, #10
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	4610      	mov	r0, r2
 80029da:	4619      	mov	r1, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	461a      	mov	r2, r3
 80029e0:	f04f 0300 	mov.w	r3, #0
 80029e4:	f7fd fbf8 	bl	80001d8 <__aeabi_uldivmod>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	4613      	mov	r3, r2
 80029ee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029f0:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	0c1b      	lsrs	r3, r3, #16
 80029f6:	f003 0303 	and.w	r3, r3, #3
 80029fa:	3301      	adds	r3, #1
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a08:	60bb      	str	r3, [r7, #8]
      break;
 8002a0a:	e002      	b.n	8002a12 <HAL_RCC_GetSysClockFreq+0x1aa>
>>>>>>> Stashed changes
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< Updated upstream
 80021a4:	4b05      	ldr	r3, [pc, #20]	; (80021bc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80021a6:	60bb      	str	r3, [r7, #8]
      break;
 80021a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021aa:	68bb      	ldr	r3, [r7, #8]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80021b6:	bf00      	nop
 80021b8:	40023800 	.word	0x40023800
 80021bc:	00f42400 	.word	0x00f42400
 80021c0:	007a1200 	.word	0x007a1200

080021c4 <HAL_RCC_GetHCLKFreq>:
=======
 8002a0c:	4b05      	ldr	r3, [pc, #20]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002a0e:	60bb      	str	r3, [r7, #8]
      break;
 8002a10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a12:	68bb      	ldr	r3, [r7, #8]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002a1e:	bf00      	nop
 8002a20:	40023800 	.word	0x40023800
 8002a24:	00f42400 	.word	0x00f42400
 8002a28:	007a1200 	.word	0x007a1200

08002a2c <HAL_RCC_GetHCLKFreq>:
>>>>>>> Stashed changes
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< Updated upstream
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021c8:	4b03      	ldr	r3, [pc, #12]	; (80021d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80021ca:	681b      	ldr	r3, [r3, #0]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	20000000 	.word	0x20000000

080021dc <HAL_RCC_GetPCLK1Freq>:
=======
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a30:	4b03      	ldr	r3, [pc, #12]	; (8002a40 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a32:	681b      	ldr	r3, [r3, #0]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	20000000 	.word	0x20000000

08002a44 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> Stashed changes
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< Updated upstream
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80021e0:	f7ff fff0 	bl	80021c4 <HAL_RCC_GetHCLKFreq>
 80021e4:	4602      	mov	r2, r0
 80021e6:	4b05      	ldr	r3, [pc, #20]	; (80021fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	0a9b      	lsrs	r3, r3, #10
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	4903      	ldr	r1, [pc, #12]	; (8002200 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021f2:	5ccb      	ldrb	r3, [r1, r3]
 80021f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40023800 	.word	0x40023800
 8002200:	08002f30 	.word	0x08002f30

08002204 <HAL_RCC_GetPCLK2Freq>:
=======
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a48:	f7ff fff0 	bl	8002a2c <HAL_RCC_GetHCLKFreq>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	0a9b      	lsrs	r3, r3, #10
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	4903      	ldr	r1, [pc, #12]	; (8002a68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a5a:	5ccb      	ldrb	r3, [r1, r3]
 8002a5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	40023800 	.word	0x40023800
 8002a68:	08003d14 	.word	0x08003d14

08002a6c <HAL_RCC_GetPCLK2Freq>:
>>>>>>> Stashed changes
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< Updated upstream
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002208:	f7ff ffdc 	bl	80021c4 <HAL_RCC_GetHCLKFreq>
 800220c:	4602      	mov	r2, r0
 800220e:	4b05      	ldr	r3, [pc, #20]	; (8002224 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	0b5b      	lsrs	r3, r3, #13
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	4903      	ldr	r1, [pc, #12]	; (8002228 <HAL_RCC_GetPCLK2Freq+0x24>)
 800221a:	5ccb      	ldrb	r3, [r1, r3]
 800221c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002220:	4618      	mov	r0, r3
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40023800 	.word	0x40023800
 8002228:	08002f30 	.word	0x08002f30

0800222c <HAL_UART_Init>:
=======
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a70:	f7ff ffdc 	bl	8002a2c <HAL_RCC_GetHCLKFreq>
 8002a74:	4602      	mov	r2, r0
 8002a76:	4b05      	ldr	r3, [pc, #20]	; (8002a8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	0b5b      	lsrs	r3, r3, #13
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	4903      	ldr	r1, [pc, #12]	; (8002a90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a82:	5ccb      	ldrb	r3, [r1, r3]
 8002a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	08003d14 	.word	0x08003d14

08002a94 <HAL_UART_Init>:
>>>>>>> Stashed changes
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e03f      	b.n	80022be <HAL_UART_Init+0x92>
=======
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e03f      	b.n	8002b26 <HAL_UART_Init+0x92>
>>>>>>> Stashed changes
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< Updated upstream
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d106      	bne.n	8002258 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d106      	bne.n	8002ac0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> Stashed changes

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< Updated upstream
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7fe feea 	bl	800102c <HAL_UART_MspInit>
=======
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7fe fae2 	bl	8001084 <HAL_UART_MspInit>
>>>>>>> Stashed changes
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< Updated upstream
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2224      	movs	r2, #36	; 0x24
 800225c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68da      	ldr	r2, [r3, #12]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800226e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 fa93 	bl	800279c <UART_SetConfig>
=======
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2224      	movs	r2, #36	; 0x24
 8002ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ad6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 fd51 	bl	8003580 <UART_SetConfig>
>>>>>>> Stashed changes

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< Updated upstream
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	691a      	ldr	r2, [r3, #16]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002284:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	695a      	ldr	r2, [r3, #20]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002294:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68da      	ldr	r2, [r3, #12]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2220      	movs	r2, #32
 80022b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2220      	movs	r2, #32
 80022b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
	...

080022c8 <HAL_UART_Transmit_DMA>:
=======
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	691a      	ldr	r2, [r3, #16]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002aec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	695a      	ldr	r2, [r3, #20]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002afc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68da      	ldr	r2, [r3, #12]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2220      	movs	r2, #32
 8002b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
	...

08002b30 <HAL_UART_Transmit_DMA>:
>>>>>>> Stashed changes
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< Updated upstream
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	4613      	mov	r3, r2
 80022d4:	80fb      	strh	r3, [r7, #6]
=======
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	80fb      	strh	r3, [r7, #6]
>>>>>>> Stashed changes
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
<<<<<<< Updated upstream
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b20      	cmp	r3, #32
 80022e0:	d153      	bne.n	800238a <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d002      	beq.n	80022ee <HAL_UART_Transmit_DMA+0x26>
 80022e8:	88fb      	ldrh	r3, [r7, #6]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e04c      	b.n	800238c <HAL_UART_Transmit_DMA+0xc4>
=======
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b20      	cmp	r3, #32
 8002b48:	d153      	bne.n	8002bf2 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d002      	beq.n	8002b56 <HAL_UART_Transmit_DMA+0x26>
 8002b50:	88fb      	ldrh	r3, [r7, #6]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e04c      	b.n	8002bf4 <HAL_UART_Transmit_DMA+0xc4>
>>>>>>> Stashed changes
    }

    /* Process Locked */
    __HAL_LOCK(huart);
<<<<<<< Updated upstream
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d101      	bne.n	8002300 <HAL_UART_Transmit_DMA+0x38>
 80022fc:	2302      	movs	r3, #2
 80022fe:	e045      	b.n	800238c <HAL_UART_Transmit_DMA+0xc4>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002308:	68ba      	ldr	r2, [r7, #8]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	88fa      	ldrh	r2, [r7, #6]
 8002312:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	88fa      	ldrh	r2, [r7, #6]
 8002318:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2221      	movs	r2, #33	; 0x21
 8002324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800232c:	4a19      	ldr	r2, [pc, #100]	; (8002394 <HAL_UART_Transmit_DMA+0xcc>)
 800232e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002334:	4a18      	ldr	r2, [pc, #96]	; (8002398 <HAL_UART_Transmit_DMA+0xd0>)
 8002336:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800233c:	4a17      	ldr	r2, [pc, #92]	; (800239c <HAL_UART_Transmit_DMA+0xd4>)
 800233e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002344:	2200      	movs	r2, #0
 8002346:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8002348:	f107 0308 	add.w	r3, r7, #8
 800234c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	6819      	ldr	r1, [r3, #0]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	3304      	adds	r3, #4
 800235c:	461a      	mov	r2, r3
 800235e:	88fb      	ldrh	r3, [r7, #6]
 8002360:	f7ff f8cb 	bl	80014fa <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800236c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d101      	bne.n	8002b68 <HAL_UART_Transmit_DMA+0x38>
 8002b64:	2302      	movs	r3, #2
 8002b66:	e045      	b.n	8002bf4 <HAL_UART_Transmit_DMA+0xc4>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	88fa      	ldrh	r2, [r7, #6]
 8002b7a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	88fa      	ldrh	r2, [r7, #6]
 8002b80:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2221      	movs	r2, #33	; 0x21
 8002b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b94:	4a19      	ldr	r2, [pc, #100]	; (8002bfc <HAL_UART_Transmit_DMA+0xcc>)
 8002b96:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b9c:	4a18      	ldr	r2, [pc, #96]	; (8002c00 <HAL_UART_Transmit_DMA+0xd0>)
 8002b9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba4:	4a17      	ldr	r2, [pc, #92]	; (8002c04 <HAL_UART_Transmit_DMA+0xd4>)
 8002ba6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bac:	2200      	movs	r2, #0
 8002bae:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8002bb0:	f107 0308 	add.w	r3, r7, #8
 8002bb4:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	6819      	ldr	r1, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	3304      	adds	r3, #4
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	88fb      	ldrh	r3, [r7, #6]
 8002bc8:	f7fe fdfe 	bl	80017c8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bd4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> Stashed changes

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
<<<<<<< Updated upstream
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	695a      	ldr	r2, [r3, #20]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002384:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8002386:	2300      	movs	r3, #0
 8002388:	e000      	b.n	800238c <HAL_UART_Transmit_DMA+0xc4>
=======
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	695a      	ldr	r2, [r3, #20]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002bec:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	e000      	b.n	8002bf4 <HAL_UART_Transmit_DMA+0xc4>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 800238a:	2302      	movs	r3, #2
  }
}
 800238c:	4618      	mov	r0, r3
 800238e:	3718      	adds	r7, #24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	0800247d 	.word	0x0800247d
 8002398:	080024cf 	.word	0x080024cf
 800239c:	080025b7 	.word	0x080025b7

080023a0 <HAL_UART_Receive_DMA>:
=======
 8002bf2:	2302      	movs	r3, #2
  }
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3718      	adds	r7, #24
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	0800303d 	.word	0x0800303d
 8002c00:	0800308f 	.word	0x0800308f
 8002c04:	08003177 	.word	0x08003177

08002c08 <HAL_UART_Receive_DMA>:
>>>>>>> Stashed changes
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< Updated upstream
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	4613      	mov	r3, r2
 80023ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b20      	cmp	r3, #32
 80023b8:	d11d      	bne.n	80023f6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d002      	beq.n	80023c6 <HAL_UART_Receive_DMA+0x26>
 80023c0:	88fb      	ldrh	r3, [r7, #6]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e016      	b.n	80023f8 <HAL_UART_Receive_DMA+0x58>
=======
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	4613      	mov	r3, r2
 8002c14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b20      	cmp	r3, #32
 8002c20:	d11d      	bne.n	8002c5e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d002      	beq.n	8002c2e <HAL_UART_Receive_DMA+0x26>
 8002c28:	88fb      	ldrh	r3, [r7, #6]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e016      	b.n	8002c60 <HAL_UART_Receive_DMA+0x58>
>>>>>>> Stashed changes
    }

    /* Process Locked */
    __HAL_LOCK(huart);
<<<<<<< Updated upstream
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d101      	bne.n	80023d8 <HAL_UART_Receive_DMA+0x38>
 80023d4:	2302      	movs	r3, #2
 80023d6:	e00f      	b.n	80023f8 <HAL_UART_Receive_DMA+0x58>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80023e6:	88fb      	ldrh	r3, [r7, #6]
 80023e8:	461a      	mov	r2, r3
 80023ea:	68b9      	ldr	r1, [r7, #8]
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f000 f92d 	bl	800264c <UART_Start_Receive_DMA>
 80023f2:	4603      	mov	r3, r0
 80023f4:	e000      	b.n	80023f8 <HAL_UART_Receive_DMA+0x58>
=======
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d101      	bne.n	8002c40 <HAL_UART_Receive_DMA+0x38>
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	e00f      	b.n	8002c60 <HAL_UART_Receive_DMA+0x58>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8002c4e:	88fb      	ldrh	r3, [r7, #6]
 8002c50:	461a      	mov	r2, r3
 8002c52:	68b9      	ldr	r1, [r7, #8]
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f000 fad9 	bl	800320c <UART_Start_Receive_DMA>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	e000      	b.n	8002c60 <HAL_UART_Receive_DMA+0x58>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 80023f6:	2302      	movs	r3, #2
  }
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <HAL_UART_TxCpltCallback>:
=======
 8002c5e:	2302      	movs	r3, #2
  }
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b08a      	sub	sp, #40	; 0x28
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10d      	bne.n	8002cba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca0:	f003 0320 	and.w	r3, r3, #32
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d008      	beq.n	8002cba <HAL_UART_IRQHandler+0x52>
 8002ca8:	6a3b      	ldr	r3, [r7, #32]
 8002caa:	f003 0320 	and.w	r3, r3, #32
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fbcd 	bl	8003452 <UART_Receive_IT>
      return;
 8002cb8:	e17c      	b.n	8002fb4 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 80b1 	beq.w	8002e24 <HAL_UART_IRQHandler+0x1bc>
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d105      	bne.n	8002cd8 <HAL_UART_IRQHandler+0x70>
 8002ccc:	6a3b      	ldr	r3, [r7, #32]
 8002cce:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 80a6 	beq.w	8002e24 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00a      	beq.n	8002cf8 <HAL_UART_IRQHandler+0x90>
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d005      	beq.n	8002cf8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	f043 0201 	orr.w	r2, r3, #1
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfa:	f003 0304 	and.w	r3, r3, #4
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00a      	beq.n	8002d18 <HAL_UART_IRQHandler+0xb0>
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d005      	beq.n	8002d18 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d10:	f043 0202 	orr.w	r2, r3, #2
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00a      	beq.n	8002d38 <HAL_UART_IRQHandler+0xd0>
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d005      	beq.n	8002d38 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d30:	f043 0204 	orr.w	r2, r3, #4
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3a:	f003 0308 	and.w	r3, r3, #8
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00f      	beq.n	8002d62 <HAL_UART_IRQHandler+0xfa>
 8002d42:	6a3b      	ldr	r3, [r7, #32]
 8002d44:	f003 0320 	and.w	r3, r3, #32
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d104      	bne.n	8002d56 <HAL_UART_IRQHandler+0xee>
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d005      	beq.n	8002d62 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	f043 0208 	orr.w	r2, r3, #8
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f000 811f 	beq.w	8002faa <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6e:	f003 0320 	and.w	r3, r3, #32
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d007      	beq.n	8002d86 <HAL_UART_IRQHandler+0x11e>
 8002d76:	6a3b      	ldr	r3, [r7, #32]
 8002d78:	f003 0320 	and.w	r3, r3, #32
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d002      	beq.n	8002d86 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 fb66 	bl	8003452 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d90:	2b40      	cmp	r3, #64	; 0x40
 8002d92:	bf0c      	ite	eq
 8002d94:	2301      	moveq	r3, #1
 8002d96:	2300      	movne	r3, #0
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	f003 0308 	and.w	r3, r3, #8
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d102      	bne.n	8002dae <HAL_UART_IRQHandler+0x146>
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d031      	beq.n	8002e12 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 faa6 	bl	8003300 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dbe:	2b40      	cmp	r3, #64	; 0x40
 8002dc0:	d123      	bne.n	8002e0a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	695a      	ldr	r2, [r3, #20]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dd0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d013      	beq.n	8002e02 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dde:	4a77      	ldr	r2, [pc, #476]	; (8002fbc <HAL_UART_IRQHandler+0x354>)
 8002de0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7fe fdb6 	bl	8001958 <HAL_DMA_Abort_IT>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d016      	beq.n	8002e20 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002dfc:	4610      	mov	r0, r2
 8002dfe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e00:	e00e      	b.n	8002e20 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 f904 	bl	8003010 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e08:	e00a      	b.n	8002e20 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 f900 	bl	8003010 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e10:	e006      	b.n	8002e20 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f8fc 	bl	8003010 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002e1e:	e0c4      	b.n	8002faa <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e20:	bf00      	nop
    return;
 8002e22:	e0c2      	b.n	8002faa <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	f040 80a2 	bne.w	8002f72 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e30:	f003 0310 	and.w	r3, r3, #16
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 809c 	beq.w	8002f72 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002e3a:	6a3b      	ldr	r3, [r7, #32]
 8002e3c:	f003 0310 	and.w	r3, r3, #16
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 8096 	beq.w	8002f72 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e46:	2300      	movs	r3, #0
 8002e48:	60fb      	str	r3, [r7, #12]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	60fb      	str	r3, [r7, #12]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	60fb      	str	r3, [r7, #12]
 8002e5a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e66:	2b40      	cmp	r3, #64	; 0x40
 8002e68:	d14f      	bne.n	8002f0a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002e74:	8a3b      	ldrh	r3, [r7, #16]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f000 8099 	beq.w	8002fae <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e80:	8a3a      	ldrh	r2, [r7, #16]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	f080 8093 	bcs.w	8002fae <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	8a3a      	ldrh	r2, [r7, #16]
 8002e8c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e92:	69db      	ldr	r3, [r3, #28]
 8002e94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e98:	d02b      	beq.n	8002ef2 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68da      	ldr	r2, [r3, #12]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ea8:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	695a      	ldr	r2, [r3, #20]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 0201 	bic.w	r2, r2, #1
 8002eb8:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	695a      	ldr	r2, [r3, #20]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ec8:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2220      	movs	r2, #32
 8002ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68da      	ldr	r2, [r3, #12]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 0210 	bic.w	r2, r2, #16
 8002ee6:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7fe fcc3 	bl	8001878 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	4619      	mov	r1, r3
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f88e 	bl	8003024 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002f08:	e051      	b.n	8002fae <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d047      	beq.n	8002fb2 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8002f22:	8a7b      	ldrh	r3, [r7, #18]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d044      	beq.n	8002fb2 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68da      	ldr	r2, [r3, #12]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002f36:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695a      	ldr	r2, [r3, #20]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0201 	bic.w	r2, r2, #1
 8002f46:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68da      	ldr	r2, [r3, #12]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 0210 	bic.w	r2, r2, #16
 8002f64:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f66:	8a7b      	ldrh	r3, [r7, #18]
 8002f68:	4619      	mov	r1, r3
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f85a 	bl	8003024 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002f70:	e01f      	b.n	8002fb2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d008      	beq.n	8002f8e <HAL_UART_IRQHandler+0x326>
 8002f7c:	6a3b      	ldr	r3, [r7, #32]
 8002f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f9fb 	bl	8003382 <UART_Transmit_IT>
    return;
 8002f8c:	e012      	b.n	8002fb4 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00d      	beq.n	8002fb4 <HAL_UART_IRQHandler+0x34c>
 8002f98:	6a3b      	ldr	r3, [r7, #32]
 8002f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d008      	beq.n	8002fb4 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 fa3d 	bl	8003422 <UART_EndTransmit_IT>
    return;
 8002fa8:	e004      	b.n	8002fb4 <HAL_UART_IRQHandler+0x34c>
    return;
 8002faa:	bf00      	nop
 8002fac:	e002      	b.n	8002fb4 <HAL_UART_IRQHandler+0x34c>
      return;
 8002fae:	bf00      	nop
 8002fb0:	e000      	b.n	8002fb4 <HAL_UART_IRQHandler+0x34c>
      return;
 8002fb2:	bf00      	nop
  }
}
 8002fb4:	3728      	adds	r7, #40	; 0x28
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	0800335b 	.word	0x0800335b

08002fc0 <HAL_UART_TxCpltCallback>:
>>>>>>> Stashed changes
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
=======
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <HAL_UART_TxHalfCpltCallback>:
=======
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_UART_TxHalfCpltCallback>:
>>>>>>> Stashed changes
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
=======
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <HAL_UART_RxCpltCallback>:
=======
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_UART_RxCpltCallback>:
>>>>>>> Stashed changes
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
=======
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <HAL_UART_RxHalfCpltCallback>:
=======
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <HAL_UART_RxHalfCpltCallback>:
>>>>>>> Stashed changes
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
=======
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <HAL_UART_ErrorCallback>:
=======
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <HAL_UART_ErrorCallback>:
>>>>>>> Stashed changes
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
=======
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <HAL_UARTEx_RxEventCallback>:
=======
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_UARTEx_RxEventCallback>:
>>>>>>> Stashed changes
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
<<<<<<< Updated upstream
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	460b      	mov	r3, r1
 800246e:	807b      	strh	r3, [r7, #2]
=======
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	460b      	mov	r3, r1
 800302e:	807b      	strh	r3, [r7, #2]
>>>>>>> Stashed changes
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
<<<<<<< Updated upstream
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <UART_DMATransmitCplt>:
=======
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <UART_DMATransmitCplt>:
>>>>>>> Stashed changes
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002488:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002494:	2b00      	cmp	r3, #0
 8002496:	d113      	bne.n	80024c0 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	84da      	strh	r2, [r3, #38]	; 0x26
=======
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003048:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003054:	2b00      	cmp	r3, #0
 8003056:	d113      	bne.n	8003080 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	84da      	strh	r2, [r3, #38]	; 0x26
>>>>>>> Stashed changes

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
<<<<<<< Updated upstream
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	695a      	ldr	r2, [r3, #20]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024ac:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68da      	ldr	r2, [r3, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024bc:	60da      	str	r2, [r3, #12]
=======
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	695a      	ldr	r2, [r3, #20]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800306c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68da      	ldr	r2, [r3, #12]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800307c:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
<<<<<<< Updated upstream
 80024be:	e002      	b.n	80024c6 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	f7ff ff9d 	bl	8002400 <HAL_UART_TxCpltCallback>
}
 80024c6:	bf00      	nop
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <UART_DMATxHalfCplt>:
=======
 800307e:	e002      	b.n	8003086 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f7ff ff9d 	bl	8002fc0 <HAL_UART_TxCpltCallback>
}
 8003086:	bf00      	nop
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <UART_DMATxHalfCplt>:
>>>>>>> Stashed changes
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b084      	sub	sp, #16
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024da:	60fb      	str	r3, [r7, #12]
=======
 800308e:	b580      	push	{r7, lr}
 8003090:	b084      	sub	sp, #16
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309a:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
<<<<<<< Updated upstream
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f7ff ff99 	bl	8002414 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80024e2:	bf00      	nop
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <UART_DMAReceiveCplt>:
=======
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f7ff ff99 	bl	8002fd4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030a2:	bf00      	nop
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <UART_DMAReceiveCplt>:
>>>>>>> Stashed changes
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b084      	sub	sp, #16
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f6:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002502:	2b00      	cmp	r3, #0
 8002504:	d12a      	bne.n	800255c <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68da      	ldr	r2, [r3, #12]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800251a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	695a      	ldr	r2, [r3, #20]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f022 0201 	bic.w	r2, r2, #1
 800252a:	615a      	str	r2, [r3, #20]
=======
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b084      	sub	sp, #16
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b6:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d12a      	bne.n	800311c <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68da      	ldr	r2, [r3, #12]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030da:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	695a      	ldr	r2, [r3, #20]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 0201 	bic.w	r2, r2, #1
 80030ea:	615a      	str	r2, [r3, #20]
>>>>>>> Stashed changes

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< Updated upstream
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	695a      	ldr	r2, [r3, #20]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800253a:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2220      	movs	r2, #32
 8002540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002548:	2b01      	cmp	r3, #1
 800254a:	d107      	bne.n	800255c <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68da      	ldr	r2, [r3, #12]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 0210 	bic.w	r2, r2, #16
 800255a:	60da      	str	r2, [r3, #12]
=======
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	695a      	ldr	r2, [r3, #20]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030fa:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2220      	movs	r2, #32
 8003100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003108:	2b01      	cmp	r3, #1
 800310a:	d107      	bne.n	800311c <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68da      	ldr	r2, [r3, #12]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 0210 	bic.w	r2, r2, #16
 800311a:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< Updated upstream
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002560:	2b01      	cmp	r3, #1
 8002562:	d106      	bne.n	8002572 <UART_DMAReceiveCplt+0x88>
=======
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003120:	2b01      	cmp	r3, #1
 8003122:	d106      	bne.n	8003132 <UART_DMAReceiveCplt+0x88>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< Updated upstream
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002568:	4619      	mov	r1, r3
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f7ff ff7a 	bl	8002464 <HAL_UARTEx_RxEventCallback>
=======
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003128:	4619      	mov	r1, r3
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f7ff ff7a 	bl	8003024 <HAL_UARTEx_RxEventCallback>
>>>>>>> Stashed changes
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
<<<<<<< Updated upstream
 8002570:	e002      	b.n	8002578 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f7ff ff58 	bl	8002428 <HAL_UART_RxCpltCallback>
}
 8002578:	bf00      	nop
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <UART_DMARxHalfCplt>:
=======
 8003130:	e002      	b.n	8003138 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f7ff ff58 	bl	8002fe8 <HAL_UART_RxCpltCallback>
}
 8003138:	bf00      	nop
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <UART_DMARxHalfCplt>:
>>>>>>> Stashed changes
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800258c:	60fb      	str	r3, [r7, #12]
=======
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314c:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< Updated upstream
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	2b01      	cmp	r3, #1
 8002594:	d108      	bne.n	80025a8 <UART_DMARxHalfCplt+0x28>
=======
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	2b01      	cmp	r3, #1
 8003154:	d108      	bne.n	8003168 <UART_DMARxHalfCplt+0x28>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
<<<<<<< Updated upstream
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800259a:	085b      	lsrs	r3, r3, #1
 800259c:	b29b      	uxth	r3, r3
 800259e:	4619      	mov	r1, r3
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f7ff ff5f 	bl	8002464 <HAL_UARTEx_RxEventCallback>
=======
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800315a:	085b      	lsrs	r3, r3, #1
 800315c:	b29b      	uxth	r3, r3
 800315e:	4619      	mov	r1, r3
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f7ff ff5f 	bl	8003024 <HAL_UARTEx_RxEventCallback>
>>>>>>> Stashed changes
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
<<<<<<< Updated upstream
 80025a6:	e002      	b.n	80025ae <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f7ff ff47 	bl	800243c <HAL_UART_RxHalfCpltCallback>
}
 80025ae:	bf00      	nop
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <UART_DMAError>:
=======
 8003166:	e002      	b.n	800316e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f7ff ff47 	bl	8002ffc <HAL_UART_RxHalfCpltCallback>
}
 800316e:	bf00      	nop
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <UART_DMAError>:
>>>>>>> Stashed changes
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b084      	sub	sp, #16
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80025be:	2300      	movs	r3, #0
 80025c0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d2:	2b80      	cmp	r3, #128	; 0x80
 80025d4:	bf0c      	ite	eq
 80025d6:	2301      	moveq	r3, #1
 80025d8:	2300      	movne	r3, #0
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b21      	cmp	r3, #33	; 0x21
 80025e8:	d108      	bne.n	80025fc <UART_DMAError+0x46>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d005      	beq.n	80025fc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	2200      	movs	r2, #0
 80025f4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80025f6:	68b8      	ldr	r0, [r7, #8]
 80025f8:	f000 f88c 	bl	8002714 <UART_EndTxTransfer>
=======
 8003176:	b580      	push	{r7, lr}
 8003178:	b084      	sub	sp, #16
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800317e:	2300      	movs	r3, #0
 8003180:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003186:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003192:	2b80      	cmp	r3, #128	; 0x80
 8003194:	bf0c      	ite	eq
 8003196:	2301      	moveq	r3, #1
 8003198:	2300      	movne	r3, #0
 800319a:	b2db      	uxtb	r3, r3
 800319c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b21      	cmp	r3, #33	; 0x21
 80031a8:	d108      	bne.n	80031bc <UART_DMAError+0x46>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d005      	beq.n	80031bc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	2200      	movs	r2, #0
 80031b4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80031b6:	68b8      	ldr	r0, [r7, #8]
 80031b8:	f000 f88c 	bl	80032d4 <UART_EndTxTransfer>
>>>>>>> Stashed changes
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< Updated upstream
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002606:	2b40      	cmp	r3, #64	; 0x40
 8002608:	bf0c      	ite	eq
 800260a:	2301      	moveq	r3, #1
 800260c:	2300      	movne	r3, #0
 800260e:	b2db      	uxtb	r3, r3
 8002610:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b22      	cmp	r3, #34	; 0x22
 800261c:	d108      	bne.n	8002630 <UART_DMAError+0x7a>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d005      	beq.n	8002630 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	2200      	movs	r2, #0
 8002628:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800262a:	68b8      	ldr	r0, [r7, #8]
 800262c:	f000 f888 	bl	8002740 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002634:	f043 0210 	orr.w	r2, r3, #16
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	641a      	str	r2, [r3, #64]	; 0x40
=======
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c6:	2b40      	cmp	r3, #64	; 0x40
 80031c8:	bf0c      	ite	eq
 80031ca:	2301      	moveq	r3, #1
 80031cc:	2300      	movne	r3, #0
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b22      	cmp	r3, #34	; 0x22
 80031dc:	d108      	bne.n	80031f0 <UART_DMAError+0x7a>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d005      	beq.n	80031f0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	2200      	movs	r2, #0
 80031e8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80031ea:	68b8      	ldr	r0, [r7, #8]
 80031ec:	f000 f888 	bl	8003300 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f4:	f043 0210 	orr.w	r2, r3, #16
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
<<<<<<< Updated upstream
 800263c:	68b8      	ldr	r0, [r7, #8]
 800263e:	f7ff ff07 	bl	8002450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002642:	bf00      	nop
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
	...

0800264c <UART_Start_Receive_DMA>:
=======
 80031fc:	68b8      	ldr	r0, [r7, #8]
 80031fe:	f7ff ff07 	bl	8003010 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003202:	bf00      	nop
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
	...

0800320c <UART_Start_Receive_DMA>:
>>>>>>> Stashed changes
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< Updated upstream
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	4613      	mov	r3, r2
 8002658:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800265a:	68ba      	ldr	r2, [r7, #8]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	88fa      	ldrh	r2, [r7, #6]
 8002664:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2222      	movs	r2, #34	; 0x22
 8002670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002678:	4a23      	ldr	r2, [pc, #140]	; (8002708 <UART_Start_Receive_DMA+0xbc>)
 800267a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002680:	4a22      	ldr	r2, [pc, #136]	; (800270c <UART_Start_Receive_DMA+0xc0>)
 8002682:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002688:	4a21      	ldr	r2, [pc, #132]	; (8002710 <UART_Start_Receive_DMA+0xc4>)
 800268a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002690:	2200      	movs	r2, #0
 8002692:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002694:	f107 0308 	add.w	r3, r7, #8
 8002698:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	3304      	adds	r3, #4
 80026a4:	4619      	mov	r1, r3
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	88fb      	ldrh	r3, [r7, #6]
 80026ac:	f7fe ff25 	bl	80014fa <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80026b0:	2300      	movs	r3, #0
 80026b2:	613b      	str	r3, [r7, #16]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	613b      	str	r3, [r7, #16]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	613b      	str	r3, [r7, #16]
 80026c4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68da      	ldr	r2, [r3, #12]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026dc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	695a      	ldr	r2, [r3, #20]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f042 0201 	orr.w	r2, r2, #1
 80026ec:	615a      	str	r2, [r3, #20]
=======
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	4613      	mov	r3, r2
 8003218:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	88fa      	ldrh	r2, [r7, #6]
 8003224:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2222      	movs	r2, #34	; 0x22
 8003230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003238:	4a23      	ldr	r2, [pc, #140]	; (80032c8 <UART_Start_Receive_DMA+0xbc>)
 800323a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003240:	4a22      	ldr	r2, [pc, #136]	; (80032cc <UART_Start_Receive_DMA+0xc0>)
 8003242:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003248:	4a21      	ldr	r2, [pc, #132]	; (80032d0 <UART_Start_Receive_DMA+0xc4>)
 800324a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003250:	2200      	movs	r2, #0
 8003252:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003254:	f107 0308 	add.w	r3, r7, #8
 8003258:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	3304      	adds	r3, #4
 8003264:	4619      	mov	r1, r3
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	88fb      	ldrh	r3, [r7, #6]
 800326c:	f7fe faac 	bl	80017c8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003270:	2300      	movs	r3, #0
 8003272:	613b      	str	r3, [r7, #16]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	613b      	str	r3, [r7, #16]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	613b      	str	r3, [r7, #16]
 8003284:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68da      	ldr	r2, [r3, #12]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800329c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	695a      	ldr	r2, [r3, #20]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f042 0201 	orr.w	r2, r2, #1
 80032ac:	615a      	str	r2, [r3, #20]
>>>>>>> Stashed changes

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< Updated upstream
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	695a      	ldr	r2, [r3, #20]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026fc:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3718      	adds	r7, #24
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	080024eb 	.word	0x080024eb
 800270c:	08002581 	.word	0x08002581
 8002710:	080025b7 	.word	0x080025b7

08002714 <UART_EndTxTransfer>:
=======
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	695a      	ldr	r2, [r3, #20]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032bc:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3718      	adds	r7, #24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	080030ab 	.word	0x080030ab
 80032cc:	08003141 	.word	0x08003141
 80032d0:	08003177 	.word	0x08003177

080032d4 <UART_EndTxTransfer>:
>>>>>>> Stashed changes
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68da      	ldr	r2, [r3, #12]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800272a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2220      	movs	r2, #32
 8002730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <UART_EndRxTransfer>:
=======
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68da      	ldr	r2, [r3, #12]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80032ea:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2220      	movs	r2, #32
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <UART_EndRxTransfer>:
>>>>>>> Stashed changes
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68da      	ldr	r2, [r3, #12]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002756:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	695a      	ldr	r2, [r3, #20]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 0201 	bic.w	r2, r2, #1
 8002766:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276c:	2b01      	cmp	r3, #1
 800276e:	d107      	bne.n	8002780 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68da      	ldr	r2, [r3, #12]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0210 	bic.w	r2, r2, #16
 800277e:	60da      	str	r2, [r3, #12]
=======
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68da      	ldr	r2, [r3, #12]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003316:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	695a      	ldr	r2, [r3, #20]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 0201 	bic.w	r2, r2, #1
 8003326:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332c:	2b01      	cmp	r3, #1
 800332e:	d107      	bne.n	8003340 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68da      	ldr	r2, [r3, #12]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 0210 	bic.w	r2, r2, #16
 800333e:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
<<<<<<< Updated upstream
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2220      	movs	r2, #32
 8002784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
	...

0800279c <UART_SetConfig>:
=======
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2220      	movs	r2, #32
 8003344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b084      	sub	sp, #16
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003366:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	f7ff fe4b 	bl	8003010 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800337a:	bf00      	nop
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003382:	b480      	push	{r7}
 8003384:	b085      	sub	sp, #20
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b21      	cmp	r3, #33	; 0x21
 8003394:	d13e      	bne.n	8003414 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800339e:	d114      	bne.n	80033ca <UART_Transmit_IT+0x48>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d110      	bne.n	80033ca <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	881b      	ldrh	r3, [r3, #0]
 80033b2:	461a      	mov	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	1c9a      	adds	r2, r3, #2
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	621a      	str	r2, [r3, #32]
 80033c8:	e008      	b.n	80033dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	1c59      	adds	r1, r3, #1
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	6211      	str	r1, [r2, #32]
 80033d4:	781a      	ldrb	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	3b01      	subs	r3, #1
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	4619      	mov	r1, r3
 80033ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10f      	bne.n	8003410 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68da      	ldr	r2, [r3, #12]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68da      	ldr	r2, [r3, #12]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800340e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003410:	2300      	movs	r3, #0
 8003412:	e000      	b.n	8003416 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003414:	2302      	movs	r3, #2
  }
}
 8003416:	4618      	mov	r0, r3
 8003418:	3714      	adds	r7, #20
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr

08003422 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b082      	sub	sp, #8
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68da      	ldr	r2, [r3, #12]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003438:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2220      	movs	r2, #32
 800343e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7ff fdbc 	bl	8002fc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b084      	sub	sp, #16
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b22      	cmp	r3, #34	; 0x22
 8003464:	f040 8087 	bne.w	8003576 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003470:	d117      	bne.n	80034a2 <UART_Receive_IT+0x50>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d113      	bne.n	80034a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800347a:	2300      	movs	r3, #0
 800347c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003482:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	b29b      	uxth	r3, r3
 800348c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003490:	b29a      	uxth	r2, r3
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349a:	1c9a      	adds	r2, r3, #2
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	629a      	str	r2, [r3, #40]	; 0x28
 80034a0:	e026      	b.n	80034f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a6:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80034a8:	2300      	movs	r3, #0
 80034aa:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034b4:	d007      	beq.n	80034c6 <UART_Receive_IT+0x74>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10a      	bne.n	80034d4 <UART_Receive_IT+0x82>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d106      	bne.n	80034d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	b2da      	uxtb	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	701a      	strb	r2, [r3, #0]
 80034d2:	e008      	b.n	80034e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034e0:	b2da      	uxtb	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ea:	1c5a      	adds	r2, r3, #1
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	3b01      	subs	r3, #1
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	4619      	mov	r1, r3
 80034fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003500:	2b00      	cmp	r3, #0
 8003502:	d136      	bne.n	8003572 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 0220 	bic.w	r2, r2, #32
 8003512:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68da      	ldr	r2, [r3, #12]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003522:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	695a      	ldr	r2, [r3, #20]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 0201 	bic.w	r2, r2, #1
 8003532:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2220      	movs	r2, #32
 8003538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003540:	2b01      	cmp	r3, #1
 8003542:	d10e      	bne.n	8003562 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68da      	ldr	r2, [r3, #12]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f022 0210 	bic.w	r2, r2, #16
 8003552:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003558:	4619      	mov	r1, r3
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7ff fd62 	bl	8003024 <HAL_UARTEx_RxEventCallback>
 8003560:	e002      	b.n	8003568 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f7ff fd40 	bl	8002fe8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800356e:	2300      	movs	r3, #0
 8003570:	e002      	b.n	8003578 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8003572:	2300      	movs	r3, #0
 8003574:	e000      	b.n	8003578 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003576:	2302      	movs	r3, #2
  }
}
 8003578:	4618      	mov	r0, r3
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <UART_SetConfig>:
>>>>>>> Stashed changes
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 800279c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027a0:	b09f      	sub	sp, #124	; 0x7c
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	66f8      	str	r0, [r7, #108]	; 0x6c
=======
 8003580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003584:	b09f      	sub	sp, #124	; 0x7c
 8003586:	af00      	add	r7, sp, #0
 8003588:	66f8      	str	r0, [r7, #108]	; 0x6c
>>>>>>> Stashed changes
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< Updated upstream
 80027a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80027b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027b2:	68d9      	ldr	r1, [r3, #12]
 80027b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	ea40 0301 	orr.w	r3, r0, r1
 80027bc:	6113      	str	r3, [r2, #16]
=======
 800358a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003594:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003596:	68d9      	ldr	r1, [r3, #12]
 8003598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	ea40 0301 	orr.w	r3, r0, r1
 80035a0:	6113      	str	r3, [r2, #16]
>>>>>>> Stashed changes
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
<<<<<<< Updated upstream
 80027be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	431a      	orrs	r2, r3
 80027c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	431a      	orrs	r2, r3
 80027ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80027d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80027e0:	f021 010c 	bic.w	r1, r1, #12
 80027e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027ea:	430b      	orrs	r3, r1
 80027ec:	60d3      	str	r3, [r2, #12]
=======
 80035a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035a4:	689a      	ldr	r2, [r3, #8]
 80035a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	431a      	orrs	r2, r3
 80035ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	431a      	orrs	r2, r3
 80035b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80035ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80035c4:	f021 010c 	bic.w	r1, r1, #12
 80035c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035ce:	430b      	orrs	r3, r1
 80035d0:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
<<<<<<< Updated upstream
 80027ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80027f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027fa:	6999      	ldr	r1, [r3, #24]
 80027fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	ea40 0301 	orr.w	r3, r0, r1
 8002804:	6153      	str	r3, [r2, #20]
=======
 80035d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80035dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035de:	6999      	ldr	r1, [r3, #24]
 80035e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	ea40 0301 	orr.w	r3, r0, r1
 80035e8:	6153      	str	r3, [r2, #20]
>>>>>>> Stashed changes
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
<<<<<<< Updated upstream
 8002806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	4bc5      	ldr	r3, [pc, #788]	; (8002b20 <UART_SetConfig+0x384>)
 800280c:	429a      	cmp	r2, r3
 800280e:	d004      	beq.n	800281a <UART_SetConfig+0x7e>
 8002810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	4bc3      	ldr	r3, [pc, #780]	; (8002b24 <UART_SetConfig+0x388>)
 8002816:	429a      	cmp	r2, r3
 8002818:	d103      	bne.n	8002822 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800281a:	f7ff fcf3 	bl	8002204 <HAL_RCC_GetPCLK2Freq>
 800281e:	6778      	str	r0, [r7, #116]	; 0x74
 8002820:	e002      	b.n	8002828 <UART_SetConfig+0x8c>
=======
 80035ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	4bc5      	ldr	r3, [pc, #788]	; (8003904 <UART_SetConfig+0x384>)
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d004      	beq.n	80035fe <UART_SetConfig+0x7e>
 80035f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	4bc3      	ldr	r3, [pc, #780]	; (8003908 <UART_SetConfig+0x388>)
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d103      	bne.n	8003606 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80035fe:	f7ff fa35 	bl	8002a6c <HAL_RCC_GetPCLK2Freq>
 8003602:	6778      	str	r0, [r7, #116]	; 0x74
 8003604:	e002      	b.n	800360c <UART_SetConfig+0x8c>
>>>>>>> Stashed changes
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
<<<<<<< Updated upstream
 8002822:	f7ff fcdb 	bl	80021dc <HAL_RCC_GetPCLK1Freq>
 8002826:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800282a:	69db      	ldr	r3, [r3, #28]
 800282c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002830:	f040 80b6 	bne.w	80029a0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002834:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002836:	461c      	mov	r4, r3
 8002838:	f04f 0500 	mov.w	r5, #0
 800283c:	4622      	mov	r2, r4
 800283e:	462b      	mov	r3, r5
 8002840:	1891      	adds	r1, r2, r2
 8002842:	6439      	str	r1, [r7, #64]	; 0x40
 8002844:	415b      	adcs	r3, r3
 8002846:	647b      	str	r3, [r7, #68]	; 0x44
 8002848:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800284c:	1912      	adds	r2, r2, r4
 800284e:	eb45 0303 	adc.w	r3, r5, r3
 8002852:	f04f 0000 	mov.w	r0, #0
 8002856:	f04f 0100 	mov.w	r1, #0
 800285a:	00d9      	lsls	r1, r3, #3
 800285c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002860:	00d0      	lsls	r0, r2, #3
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	1911      	adds	r1, r2, r4
 8002868:	6639      	str	r1, [r7, #96]	; 0x60
 800286a:	416b      	adcs	r3, r5
 800286c:	667b      	str	r3, [r7, #100]	; 0x64
 800286e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	461a      	mov	r2, r3
 8002874:	f04f 0300 	mov.w	r3, #0
 8002878:	1891      	adds	r1, r2, r2
 800287a:	63b9      	str	r1, [r7, #56]	; 0x38
 800287c:	415b      	adcs	r3, r3
 800287e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002880:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002884:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002888:	f7fd fca6 	bl	80001d8 <__aeabi_uldivmod>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	4ba5      	ldr	r3, [pc, #660]	; (8002b28 <UART_SetConfig+0x38c>)
 8002892:	fba3 2302 	umull	r2, r3, r3, r2
 8002896:	095b      	lsrs	r3, r3, #5
 8002898:	011e      	lsls	r6, r3, #4
 800289a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800289c:	461c      	mov	r4, r3
 800289e:	f04f 0500 	mov.w	r5, #0
 80028a2:	4622      	mov	r2, r4
 80028a4:	462b      	mov	r3, r5
 80028a6:	1891      	adds	r1, r2, r2
 80028a8:	6339      	str	r1, [r7, #48]	; 0x30
 80028aa:	415b      	adcs	r3, r3
 80028ac:	637b      	str	r3, [r7, #52]	; 0x34
 80028ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80028b2:	1912      	adds	r2, r2, r4
 80028b4:	eb45 0303 	adc.w	r3, r5, r3
 80028b8:	f04f 0000 	mov.w	r0, #0
 80028bc:	f04f 0100 	mov.w	r1, #0
 80028c0:	00d9      	lsls	r1, r3, #3
 80028c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028c6:	00d0      	lsls	r0, r2, #3
 80028c8:	4602      	mov	r2, r0
 80028ca:	460b      	mov	r3, r1
 80028cc:	1911      	adds	r1, r2, r4
 80028ce:	65b9      	str	r1, [r7, #88]	; 0x58
 80028d0:	416b      	adcs	r3, r5
 80028d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	461a      	mov	r2, r3
 80028da:	f04f 0300 	mov.w	r3, #0
 80028de:	1891      	adds	r1, r2, r2
 80028e0:	62b9      	str	r1, [r7, #40]	; 0x28
 80028e2:	415b      	adcs	r3, r3
 80028e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80028ea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80028ee:	f7fd fc73 	bl	80001d8 <__aeabi_uldivmod>
 80028f2:	4602      	mov	r2, r0
 80028f4:	460b      	mov	r3, r1
 80028f6:	4b8c      	ldr	r3, [pc, #560]	; (8002b28 <UART_SetConfig+0x38c>)
 80028f8:	fba3 1302 	umull	r1, r3, r3, r2
 80028fc:	095b      	lsrs	r3, r3, #5
 80028fe:	2164      	movs	r1, #100	; 0x64
 8002900:	fb01 f303 	mul.w	r3, r1, r3
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	3332      	adds	r3, #50	; 0x32
 800290a:	4a87      	ldr	r2, [pc, #540]	; (8002b28 <UART_SetConfig+0x38c>)
 800290c:	fba2 2303 	umull	r2, r3, r2, r3
 8002910:	095b      	lsrs	r3, r3, #5
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002918:	441e      	add	r6, r3
 800291a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800291c:	4618      	mov	r0, r3
 800291e:	f04f 0100 	mov.w	r1, #0
 8002922:	4602      	mov	r2, r0
 8002924:	460b      	mov	r3, r1
 8002926:	1894      	adds	r4, r2, r2
 8002928:	623c      	str	r4, [r7, #32]
 800292a:	415b      	adcs	r3, r3
 800292c:	627b      	str	r3, [r7, #36]	; 0x24
 800292e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002932:	1812      	adds	r2, r2, r0
 8002934:	eb41 0303 	adc.w	r3, r1, r3
 8002938:	f04f 0400 	mov.w	r4, #0
 800293c:	f04f 0500 	mov.w	r5, #0
 8002940:	00dd      	lsls	r5, r3, #3
 8002942:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002946:	00d4      	lsls	r4, r2, #3
 8002948:	4622      	mov	r2, r4
 800294a:	462b      	mov	r3, r5
 800294c:	1814      	adds	r4, r2, r0
 800294e:	653c      	str	r4, [r7, #80]	; 0x50
 8002950:	414b      	adcs	r3, r1
 8002952:	657b      	str	r3, [r7, #84]	; 0x54
 8002954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	461a      	mov	r2, r3
 800295a:	f04f 0300 	mov.w	r3, #0
 800295e:	1891      	adds	r1, r2, r2
 8002960:	61b9      	str	r1, [r7, #24]
 8002962:	415b      	adcs	r3, r3
 8002964:	61fb      	str	r3, [r7, #28]
 8002966:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800296a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800296e:	f7fd fc33 	bl	80001d8 <__aeabi_uldivmod>
 8002972:	4602      	mov	r2, r0
 8002974:	460b      	mov	r3, r1
 8002976:	4b6c      	ldr	r3, [pc, #432]	; (8002b28 <UART_SetConfig+0x38c>)
 8002978:	fba3 1302 	umull	r1, r3, r3, r2
 800297c:	095b      	lsrs	r3, r3, #5
 800297e:	2164      	movs	r1, #100	; 0x64
 8002980:	fb01 f303 	mul.w	r3, r1, r3
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	3332      	adds	r3, #50	; 0x32
 800298a:	4a67      	ldr	r2, [pc, #412]	; (8002b28 <UART_SetConfig+0x38c>)
 800298c:	fba2 2303 	umull	r2, r3, r2, r3
 8002990:	095b      	lsrs	r3, r3, #5
 8002992:	f003 0207 	and.w	r2, r3, #7
 8002996:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4432      	add	r2, r6
 800299c:	609a      	str	r2, [r3, #8]
=======
 8003606:	f7ff fa1d 	bl	8002a44 <HAL_RCC_GetPCLK1Freq>
 800360a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800360c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800360e:	69db      	ldr	r3, [r3, #28]
 8003610:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003614:	f040 80b6 	bne.w	8003784 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003618:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800361a:	461c      	mov	r4, r3
 800361c:	f04f 0500 	mov.w	r5, #0
 8003620:	4622      	mov	r2, r4
 8003622:	462b      	mov	r3, r5
 8003624:	1891      	adds	r1, r2, r2
 8003626:	6439      	str	r1, [r7, #64]	; 0x40
 8003628:	415b      	adcs	r3, r3
 800362a:	647b      	str	r3, [r7, #68]	; 0x44
 800362c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003630:	1912      	adds	r2, r2, r4
 8003632:	eb45 0303 	adc.w	r3, r5, r3
 8003636:	f04f 0000 	mov.w	r0, #0
 800363a:	f04f 0100 	mov.w	r1, #0
 800363e:	00d9      	lsls	r1, r3, #3
 8003640:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003644:	00d0      	lsls	r0, r2, #3
 8003646:	4602      	mov	r2, r0
 8003648:	460b      	mov	r3, r1
 800364a:	1911      	adds	r1, r2, r4
 800364c:	6639      	str	r1, [r7, #96]	; 0x60
 800364e:	416b      	adcs	r3, r5
 8003650:	667b      	str	r3, [r7, #100]	; 0x64
 8003652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	461a      	mov	r2, r3
 8003658:	f04f 0300 	mov.w	r3, #0
 800365c:	1891      	adds	r1, r2, r2
 800365e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003660:	415b      	adcs	r3, r3
 8003662:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003664:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003668:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800366c:	f7fc fdb4 	bl	80001d8 <__aeabi_uldivmod>
 8003670:	4602      	mov	r2, r0
 8003672:	460b      	mov	r3, r1
 8003674:	4ba5      	ldr	r3, [pc, #660]	; (800390c <UART_SetConfig+0x38c>)
 8003676:	fba3 2302 	umull	r2, r3, r3, r2
 800367a:	095b      	lsrs	r3, r3, #5
 800367c:	011e      	lsls	r6, r3, #4
 800367e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003680:	461c      	mov	r4, r3
 8003682:	f04f 0500 	mov.w	r5, #0
 8003686:	4622      	mov	r2, r4
 8003688:	462b      	mov	r3, r5
 800368a:	1891      	adds	r1, r2, r2
 800368c:	6339      	str	r1, [r7, #48]	; 0x30
 800368e:	415b      	adcs	r3, r3
 8003690:	637b      	str	r3, [r7, #52]	; 0x34
 8003692:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003696:	1912      	adds	r2, r2, r4
 8003698:	eb45 0303 	adc.w	r3, r5, r3
 800369c:	f04f 0000 	mov.w	r0, #0
 80036a0:	f04f 0100 	mov.w	r1, #0
 80036a4:	00d9      	lsls	r1, r3, #3
 80036a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036aa:	00d0      	lsls	r0, r2, #3
 80036ac:	4602      	mov	r2, r0
 80036ae:	460b      	mov	r3, r1
 80036b0:	1911      	adds	r1, r2, r4
 80036b2:	65b9      	str	r1, [r7, #88]	; 0x58
 80036b4:	416b      	adcs	r3, r5
 80036b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	461a      	mov	r2, r3
 80036be:	f04f 0300 	mov.w	r3, #0
 80036c2:	1891      	adds	r1, r2, r2
 80036c4:	62b9      	str	r1, [r7, #40]	; 0x28
 80036c6:	415b      	adcs	r3, r3
 80036c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036ce:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80036d2:	f7fc fd81 	bl	80001d8 <__aeabi_uldivmod>
 80036d6:	4602      	mov	r2, r0
 80036d8:	460b      	mov	r3, r1
 80036da:	4b8c      	ldr	r3, [pc, #560]	; (800390c <UART_SetConfig+0x38c>)
 80036dc:	fba3 1302 	umull	r1, r3, r3, r2
 80036e0:	095b      	lsrs	r3, r3, #5
 80036e2:	2164      	movs	r1, #100	; 0x64
 80036e4:	fb01 f303 	mul.w	r3, r1, r3
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	00db      	lsls	r3, r3, #3
 80036ec:	3332      	adds	r3, #50	; 0x32
 80036ee:	4a87      	ldr	r2, [pc, #540]	; (800390c <UART_SetConfig+0x38c>)
 80036f0:	fba2 2303 	umull	r2, r3, r2, r3
 80036f4:	095b      	lsrs	r3, r3, #5
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80036fc:	441e      	add	r6, r3
 80036fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003700:	4618      	mov	r0, r3
 8003702:	f04f 0100 	mov.w	r1, #0
 8003706:	4602      	mov	r2, r0
 8003708:	460b      	mov	r3, r1
 800370a:	1894      	adds	r4, r2, r2
 800370c:	623c      	str	r4, [r7, #32]
 800370e:	415b      	adcs	r3, r3
 8003710:	627b      	str	r3, [r7, #36]	; 0x24
 8003712:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003716:	1812      	adds	r2, r2, r0
 8003718:	eb41 0303 	adc.w	r3, r1, r3
 800371c:	f04f 0400 	mov.w	r4, #0
 8003720:	f04f 0500 	mov.w	r5, #0
 8003724:	00dd      	lsls	r5, r3, #3
 8003726:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800372a:	00d4      	lsls	r4, r2, #3
 800372c:	4622      	mov	r2, r4
 800372e:	462b      	mov	r3, r5
 8003730:	1814      	adds	r4, r2, r0
 8003732:	653c      	str	r4, [r7, #80]	; 0x50
 8003734:	414b      	adcs	r3, r1
 8003736:	657b      	str	r3, [r7, #84]	; 0x54
 8003738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	461a      	mov	r2, r3
 800373e:	f04f 0300 	mov.w	r3, #0
 8003742:	1891      	adds	r1, r2, r2
 8003744:	61b9      	str	r1, [r7, #24]
 8003746:	415b      	adcs	r3, r3
 8003748:	61fb      	str	r3, [r7, #28]
 800374a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800374e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003752:	f7fc fd41 	bl	80001d8 <__aeabi_uldivmod>
 8003756:	4602      	mov	r2, r0
 8003758:	460b      	mov	r3, r1
 800375a:	4b6c      	ldr	r3, [pc, #432]	; (800390c <UART_SetConfig+0x38c>)
 800375c:	fba3 1302 	umull	r1, r3, r3, r2
 8003760:	095b      	lsrs	r3, r3, #5
 8003762:	2164      	movs	r1, #100	; 0x64
 8003764:	fb01 f303 	mul.w	r3, r1, r3
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	3332      	adds	r3, #50	; 0x32
 800376e:	4a67      	ldr	r2, [pc, #412]	; (800390c <UART_SetConfig+0x38c>)
 8003770:	fba2 2303 	umull	r2, r3, r2, r3
 8003774:	095b      	lsrs	r3, r3, #5
 8003776:	f003 0207 	and.w	r2, r3, #7
 800377a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4432      	add	r2, r6
 8003780:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
<<<<<<< Updated upstream
 800299e:	e0b9      	b.n	8002b14 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029a2:	461c      	mov	r4, r3
 80029a4:	f04f 0500 	mov.w	r5, #0
 80029a8:	4622      	mov	r2, r4
 80029aa:	462b      	mov	r3, r5
 80029ac:	1891      	adds	r1, r2, r2
 80029ae:	6139      	str	r1, [r7, #16]
 80029b0:	415b      	adcs	r3, r3
 80029b2:	617b      	str	r3, [r7, #20]
 80029b4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80029b8:	1912      	adds	r2, r2, r4
 80029ba:	eb45 0303 	adc.w	r3, r5, r3
 80029be:	f04f 0000 	mov.w	r0, #0
 80029c2:	f04f 0100 	mov.w	r1, #0
 80029c6:	00d9      	lsls	r1, r3, #3
 80029c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80029cc:	00d0      	lsls	r0, r2, #3
 80029ce:	4602      	mov	r2, r0
 80029d0:	460b      	mov	r3, r1
 80029d2:	eb12 0804 	adds.w	r8, r2, r4
 80029d6:	eb43 0905 	adc.w	r9, r3, r5
 80029da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	4618      	mov	r0, r3
 80029e0:	f04f 0100 	mov.w	r1, #0
 80029e4:	f04f 0200 	mov.w	r2, #0
 80029e8:	f04f 0300 	mov.w	r3, #0
 80029ec:	008b      	lsls	r3, r1, #2
 80029ee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80029f2:	0082      	lsls	r2, r0, #2
 80029f4:	4640      	mov	r0, r8
 80029f6:	4649      	mov	r1, r9
 80029f8:	f7fd fbee 	bl	80001d8 <__aeabi_uldivmod>
 80029fc:	4602      	mov	r2, r0
 80029fe:	460b      	mov	r3, r1
 8002a00:	4b49      	ldr	r3, [pc, #292]	; (8002b28 <UART_SetConfig+0x38c>)
 8002a02:	fba3 2302 	umull	r2, r3, r3, r2
 8002a06:	095b      	lsrs	r3, r3, #5
 8002a08:	011e      	lsls	r6, r3, #4
 8002a0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f04f 0100 	mov.w	r1, #0
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	1894      	adds	r4, r2, r2
 8002a18:	60bc      	str	r4, [r7, #8]
 8002a1a:	415b      	adcs	r3, r3
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a22:	1812      	adds	r2, r2, r0
 8002a24:	eb41 0303 	adc.w	r3, r1, r3
 8002a28:	f04f 0400 	mov.w	r4, #0
 8002a2c:	f04f 0500 	mov.w	r5, #0
 8002a30:	00dd      	lsls	r5, r3, #3
 8002a32:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002a36:	00d4      	lsls	r4, r2, #3
 8002a38:	4622      	mov	r2, r4
 8002a3a:	462b      	mov	r3, r5
 8002a3c:	1814      	adds	r4, r2, r0
 8002a3e:	64bc      	str	r4, [r7, #72]	; 0x48
 8002a40:	414b      	adcs	r3, r1
 8002a42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f04f 0100 	mov.w	r1, #0
 8002a4e:	f04f 0200 	mov.w	r2, #0
 8002a52:	f04f 0300 	mov.w	r3, #0
 8002a56:	008b      	lsls	r3, r1, #2
 8002a58:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002a5c:	0082      	lsls	r2, r0, #2
 8002a5e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002a62:	f7fd fbb9 	bl	80001d8 <__aeabi_uldivmod>
 8002a66:	4602      	mov	r2, r0
 8002a68:	460b      	mov	r3, r1
 8002a6a:	4b2f      	ldr	r3, [pc, #188]	; (8002b28 <UART_SetConfig+0x38c>)
 8002a6c:	fba3 1302 	umull	r1, r3, r3, r2
 8002a70:	095b      	lsrs	r3, r3, #5
 8002a72:	2164      	movs	r1, #100	; 0x64
 8002a74:	fb01 f303 	mul.w	r3, r1, r3
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	3332      	adds	r3, #50	; 0x32
 8002a7e:	4a2a      	ldr	r2, [pc, #168]	; (8002b28 <UART_SetConfig+0x38c>)
 8002a80:	fba2 2303 	umull	r2, r3, r2, r3
 8002a84:	095b      	lsrs	r3, r3, #5
 8002a86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a8a:	441e      	add	r6, r3
 8002a8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f04f 0100 	mov.w	r1, #0
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	1894      	adds	r4, r2, r2
 8002a9a:	603c      	str	r4, [r7, #0]
 8002a9c:	415b      	adcs	r3, r3
 8002a9e:	607b      	str	r3, [r7, #4]
 8002aa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002aa4:	1812      	adds	r2, r2, r0
 8002aa6:	eb41 0303 	adc.w	r3, r1, r3
 8002aaa:	f04f 0400 	mov.w	r4, #0
 8002aae:	f04f 0500 	mov.w	r5, #0
 8002ab2:	00dd      	lsls	r5, r3, #3
 8002ab4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002ab8:	00d4      	lsls	r4, r2, #3
 8002aba:	4622      	mov	r2, r4
 8002abc:	462b      	mov	r3, r5
 8002abe:	eb12 0a00 	adds.w	sl, r2, r0
 8002ac2:	eb43 0b01 	adc.w	fp, r3, r1
 8002ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f04f 0100 	mov.w	r1, #0
 8002ad0:	f04f 0200 	mov.w	r2, #0
 8002ad4:	f04f 0300 	mov.w	r3, #0
 8002ad8:	008b      	lsls	r3, r1, #2
 8002ada:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002ade:	0082      	lsls	r2, r0, #2
 8002ae0:	4650      	mov	r0, sl
 8002ae2:	4659      	mov	r1, fp
 8002ae4:	f7fd fb78 	bl	80001d8 <__aeabi_uldivmod>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	460b      	mov	r3, r1
 8002aec:	4b0e      	ldr	r3, [pc, #56]	; (8002b28 <UART_SetConfig+0x38c>)
 8002aee:	fba3 1302 	umull	r1, r3, r3, r2
 8002af2:	095b      	lsrs	r3, r3, #5
 8002af4:	2164      	movs	r1, #100	; 0x64
 8002af6:	fb01 f303 	mul.w	r3, r1, r3
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	011b      	lsls	r3, r3, #4
 8002afe:	3332      	adds	r3, #50	; 0x32
 8002b00:	4a09      	ldr	r2, [pc, #36]	; (8002b28 <UART_SetConfig+0x38c>)
 8002b02:	fba2 2303 	umull	r2, r3, r2, r3
 8002b06:	095b      	lsrs	r3, r3, #5
 8002b08:	f003 020f 	and.w	r2, r3, #15
 8002b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4432      	add	r2, r6
 8002b12:	609a      	str	r2, [r3, #8]
}
 8002b14:	bf00      	nop
 8002b16:	377c      	adds	r7, #124	; 0x7c
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b1e:	bf00      	nop
 8002b20:	40011000 	.word	0x40011000
 8002b24:	40011400 	.word	0x40011400
 8002b28:	51eb851f 	.word	0x51eb851f

08002b2c <calloc>:
 8002b2c:	4b02      	ldr	r3, [pc, #8]	; (8002b38 <calloc+0xc>)
 8002b2e:	460a      	mov	r2, r1
 8002b30:	4601      	mov	r1, r0
 8002b32:	6818      	ldr	r0, [r3, #0]
 8002b34:	f000 b842 	b.w	8002bbc <_calloc_r>
 8002b38:	2000000c 	.word	0x2000000c

08002b3c <__errno>:
 8002b3c:	4b01      	ldr	r3, [pc, #4]	; (8002b44 <__errno+0x8>)
 8002b3e:	6818      	ldr	r0, [r3, #0]
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	2000000c 	.word	0x2000000c

08002b48 <__libc_init_array>:
 8002b48:	b570      	push	{r4, r5, r6, lr}
 8002b4a:	4d0d      	ldr	r5, [pc, #52]	; (8002b80 <__libc_init_array+0x38>)
 8002b4c:	4c0d      	ldr	r4, [pc, #52]	; (8002b84 <__libc_init_array+0x3c>)
 8002b4e:	1b64      	subs	r4, r4, r5
 8002b50:	10a4      	asrs	r4, r4, #2
 8002b52:	2600      	movs	r6, #0
 8002b54:	42a6      	cmp	r6, r4
 8002b56:	d109      	bne.n	8002b6c <__libc_init_array+0x24>
 8002b58:	4d0b      	ldr	r5, [pc, #44]	; (8002b88 <__libc_init_array+0x40>)
 8002b5a:	4c0c      	ldr	r4, [pc, #48]	; (8002b8c <__libc_init_array+0x44>)
 8002b5c:	f000 f8b6 	bl	8002ccc <_init>
 8002b60:	1b64      	subs	r4, r4, r5
 8002b62:	10a4      	asrs	r4, r4, #2
 8002b64:	2600      	movs	r6, #0
 8002b66:	42a6      	cmp	r6, r4
 8002b68:	d105      	bne.n	8002b76 <__libc_init_array+0x2e>
 8002b6a:	bd70      	pop	{r4, r5, r6, pc}
 8002b6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b70:	4798      	blx	r3
 8002b72:	3601      	adds	r6, #1
 8002b74:	e7ee      	b.n	8002b54 <__libc_init_array+0xc>
 8002b76:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b7a:	4798      	blx	r3
 8002b7c:	3601      	adds	r6, #1
 8002b7e:	e7f2      	b.n	8002b66 <__libc_init_array+0x1e>
 8002b80:	08002f40 	.word	0x08002f40
 8002b84:	08002f40 	.word	0x08002f40
 8002b88:	08002f40 	.word	0x08002f40
 8002b8c:	08002f44 	.word	0x08002f44

08002b90 <memcpy>:
 8002b90:	440a      	add	r2, r1
 8002b92:	4291      	cmp	r1, r2
 8002b94:	f100 33ff 	add.w	r3, r0, #4294967295
 8002b98:	d100      	bne.n	8002b9c <memcpy+0xc>
 8002b9a:	4770      	bx	lr
 8002b9c:	b510      	push	{r4, lr}
 8002b9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002ba2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002ba6:	4291      	cmp	r1, r2
 8002ba8:	d1f9      	bne.n	8002b9e <memcpy+0xe>
 8002baa:	bd10      	pop	{r4, pc}

08002bac <memset>:
 8002bac:	4402      	add	r2, r0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d100      	bne.n	8002bb6 <memset+0xa>
 8002bb4:	4770      	bx	lr
 8002bb6:	f803 1b01 	strb.w	r1, [r3], #1
 8002bba:	e7f9      	b.n	8002bb0 <memset+0x4>

08002bbc <_calloc_r>:
 8002bbc:	b513      	push	{r0, r1, r4, lr}
 8002bbe:	434a      	muls	r2, r1
 8002bc0:	4611      	mov	r1, r2
 8002bc2:	9201      	str	r2, [sp, #4]
 8002bc4:	f000 f80a 	bl	8002bdc <_malloc_r>
 8002bc8:	4604      	mov	r4, r0
 8002bca:	b118      	cbz	r0, 8002bd4 <_calloc_r+0x18>
 8002bcc:	9a01      	ldr	r2, [sp, #4]
 8002bce:	2100      	movs	r1, #0
 8002bd0:	f7ff ffec 	bl	8002bac <memset>
 8002bd4:	4620      	mov	r0, r4
 8002bd6:	b002      	add	sp, #8
 8002bd8:	bd10      	pop	{r4, pc}
	...

08002bdc <_malloc_r>:
 8002bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bde:	1ccd      	adds	r5, r1, #3
 8002be0:	f025 0503 	bic.w	r5, r5, #3
 8002be4:	3508      	adds	r5, #8
 8002be6:	2d0c      	cmp	r5, #12
 8002be8:	bf38      	it	cc
 8002bea:	250c      	movcc	r5, #12
 8002bec:	2d00      	cmp	r5, #0
 8002bee:	4606      	mov	r6, r0
 8002bf0:	db01      	blt.n	8002bf6 <_malloc_r+0x1a>
 8002bf2:	42a9      	cmp	r1, r5
 8002bf4:	d903      	bls.n	8002bfe <_malloc_r+0x22>
 8002bf6:	230c      	movs	r3, #12
 8002bf8:	6033      	str	r3, [r6, #0]
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bfe:	f000 f857 	bl	8002cb0 <__malloc_lock>
 8002c02:	4921      	ldr	r1, [pc, #132]	; (8002c88 <_malloc_r+0xac>)
 8002c04:	680a      	ldr	r2, [r1, #0]
 8002c06:	4614      	mov	r4, r2
 8002c08:	b99c      	cbnz	r4, 8002c32 <_malloc_r+0x56>
 8002c0a:	4f20      	ldr	r7, [pc, #128]	; (8002c8c <_malloc_r+0xb0>)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	b923      	cbnz	r3, 8002c1a <_malloc_r+0x3e>
 8002c10:	4621      	mov	r1, r4
 8002c12:	4630      	mov	r0, r6
 8002c14:	f000 f83c 	bl	8002c90 <_sbrk_r>
 8002c18:	6038      	str	r0, [r7, #0]
 8002c1a:	4629      	mov	r1, r5
 8002c1c:	4630      	mov	r0, r6
 8002c1e:	f000 f837 	bl	8002c90 <_sbrk_r>
 8002c22:	1c43      	adds	r3, r0, #1
 8002c24:	d123      	bne.n	8002c6e <_malloc_r+0x92>
 8002c26:	230c      	movs	r3, #12
 8002c28:	6033      	str	r3, [r6, #0]
 8002c2a:	4630      	mov	r0, r6
 8002c2c:	f000 f846 	bl	8002cbc <__malloc_unlock>
 8002c30:	e7e3      	b.n	8002bfa <_malloc_r+0x1e>
 8002c32:	6823      	ldr	r3, [r4, #0]
 8002c34:	1b5b      	subs	r3, r3, r5
 8002c36:	d417      	bmi.n	8002c68 <_malloc_r+0x8c>
 8002c38:	2b0b      	cmp	r3, #11
 8002c3a:	d903      	bls.n	8002c44 <_malloc_r+0x68>
 8002c3c:	6023      	str	r3, [r4, #0]
 8002c3e:	441c      	add	r4, r3
 8002c40:	6025      	str	r5, [r4, #0]
 8002c42:	e004      	b.n	8002c4e <_malloc_r+0x72>
 8002c44:	6863      	ldr	r3, [r4, #4]
 8002c46:	42a2      	cmp	r2, r4
 8002c48:	bf0c      	ite	eq
 8002c4a:	600b      	streq	r3, [r1, #0]
 8002c4c:	6053      	strne	r3, [r2, #4]
 8002c4e:	4630      	mov	r0, r6
 8002c50:	f000 f834 	bl	8002cbc <__malloc_unlock>
 8002c54:	f104 000b 	add.w	r0, r4, #11
 8002c58:	1d23      	adds	r3, r4, #4
 8002c5a:	f020 0007 	bic.w	r0, r0, #7
 8002c5e:	1ac2      	subs	r2, r0, r3
 8002c60:	d0cc      	beq.n	8002bfc <_malloc_r+0x20>
 8002c62:	1a1b      	subs	r3, r3, r0
 8002c64:	50a3      	str	r3, [r4, r2]
 8002c66:	e7c9      	b.n	8002bfc <_malloc_r+0x20>
 8002c68:	4622      	mov	r2, r4
 8002c6a:	6864      	ldr	r4, [r4, #4]
 8002c6c:	e7cc      	b.n	8002c08 <_malloc_r+0x2c>
 8002c6e:	1cc4      	adds	r4, r0, #3
 8002c70:	f024 0403 	bic.w	r4, r4, #3
 8002c74:	42a0      	cmp	r0, r4
 8002c76:	d0e3      	beq.n	8002c40 <_malloc_r+0x64>
 8002c78:	1a21      	subs	r1, r4, r0
 8002c7a:	4630      	mov	r0, r6
 8002c7c:	f000 f808 	bl	8002c90 <_sbrk_r>
 8002c80:	3001      	adds	r0, #1
 8002c82:	d1dd      	bne.n	8002c40 <_malloc_r+0x64>
 8002c84:	e7cf      	b.n	8002c26 <_malloc_r+0x4a>
 8002c86:	bf00      	nop
 8002c88:	200002c4 	.word	0x200002c4
 8002c8c:	200002c8 	.word	0x200002c8

08002c90 <_sbrk_r>:
 8002c90:	b538      	push	{r3, r4, r5, lr}
 8002c92:	4d06      	ldr	r5, [pc, #24]	; (8002cac <_sbrk_r+0x1c>)
 8002c94:	2300      	movs	r3, #0
 8002c96:	4604      	mov	r4, r0
 8002c98:	4608      	mov	r0, r1
 8002c9a:	602b      	str	r3, [r5, #0]
 8002c9c:	f7fe fa38 	bl	8001110 <_sbrk>
 8002ca0:	1c43      	adds	r3, r0, #1
 8002ca2:	d102      	bne.n	8002caa <_sbrk_r+0x1a>
 8002ca4:	682b      	ldr	r3, [r5, #0]
 8002ca6:	b103      	cbz	r3, 8002caa <_sbrk_r+0x1a>
 8002ca8:	6023      	str	r3, [r4, #0]
 8002caa:	bd38      	pop	{r3, r4, r5, pc}
 8002cac:	200003d4 	.word	0x200003d4

08002cb0 <__malloc_lock>:
 8002cb0:	4801      	ldr	r0, [pc, #4]	; (8002cb8 <__malloc_lock+0x8>)
 8002cb2:	f000 b809 	b.w	8002cc8 <__retarget_lock_acquire_recursive>
 8002cb6:	bf00      	nop
 8002cb8:	200003dc 	.word	0x200003dc

08002cbc <__malloc_unlock>:
 8002cbc:	4801      	ldr	r0, [pc, #4]	; (8002cc4 <__malloc_unlock+0x8>)
 8002cbe:	f000 b804 	b.w	8002cca <__retarget_lock_release_recursive>
 8002cc2:	bf00      	nop
 8002cc4:	200003dc 	.word	0x200003dc

08002cc8 <__retarget_lock_acquire_recursive>:
 8002cc8:	4770      	bx	lr

08002cca <__retarget_lock_release_recursive>:
 8002cca:	4770      	bx	lr

08002ccc <_init>:
 8002ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cce:	bf00      	nop
 8002cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cd2:	bc08      	pop	{r3}
 8002cd4:	469e      	mov	lr, r3
 8002cd6:	4770      	bx	lr

08002cd8 <_fini>:
 8002cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cda:	bf00      	nop
 8002cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cde:	bc08      	pop	{r3}
 8002ce0:	469e      	mov	lr, r3
 8002ce2:	4770      	bx	lr
=======
 8003782:	e0b9      	b.n	80038f8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003784:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003786:	461c      	mov	r4, r3
 8003788:	f04f 0500 	mov.w	r5, #0
 800378c:	4622      	mov	r2, r4
 800378e:	462b      	mov	r3, r5
 8003790:	1891      	adds	r1, r2, r2
 8003792:	6139      	str	r1, [r7, #16]
 8003794:	415b      	adcs	r3, r3
 8003796:	617b      	str	r3, [r7, #20]
 8003798:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800379c:	1912      	adds	r2, r2, r4
 800379e:	eb45 0303 	adc.w	r3, r5, r3
 80037a2:	f04f 0000 	mov.w	r0, #0
 80037a6:	f04f 0100 	mov.w	r1, #0
 80037aa:	00d9      	lsls	r1, r3, #3
 80037ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037b0:	00d0      	lsls	r0, r2, #3
 80037b2:	4602      	mov	r2, r0
 80037b4:	460b      	mov	r3, r1
 80037b6:	eb12 0804 	adds.w	r8, r2, r4
 80037ba:	eb43 0905 	adc.w	r9, r3, r5
 80037be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f04f 0100 	mov.w	r1, #0
 80037c8:	f04f 0200 	mov.w	r2, #0
 80037cc:	f04f 0300 	mov.w	r3, #0
 80037d0:	008b      	lsls	r3, r1, #2
 80037d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80037d6:	0082      	lsls	r2, r0, #2
 80037d8:	4640      	mov	r0, r8
 80037da:	4649      	mov	r1, r9
 80037dc:	f7fc fcfc 	bl	80001d8 <__aeabi_uldivmod>
 80037e0:	4602      	mov	r2, r0
 80037e2:	460b      	mov	r3, r1
 80037e4:	4b49      	ldr	r3, [pc, #292]	; (800390c <UART_SetConfig+0x38c>)
 80037e6:	fba3 2302 	umull	r2, r3, r3, r2
 80037ea:	095b      	lsrs	r3, r3, #5
 80037ec:	011e      	lsls	r6, r3, #4
 80037ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037f0:	4618      	mov	r0, r3
 80037f2:	f04f 0100 	mov.w	r1, #0
 80037f6:	4602      	mov	r2, r0
 80037f8:	460b      	mov	r3, r1
 80037fa:	1894      	adds	r4, r2, r2
 80037fc:	60bc      	str	r4, [r7, #8]
 80037fe:	415b      	adcs	r3, r3
 8003800:	60fb      	str	r3, [r7, #12]
 8003802:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003806:	1812      	adds	r2, r2, r0
 8003808:	eb41 0303 	adc.w	r3, r1, r3
 800380c:	f04f 0400 	mov.w	r4, #0
 8003810:	f04f 0500 	mov.w	r5, #0
 8003814:	00dd      	lsls	r5, r3, #3
 8003816:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800381a:	00d4      	lsls	r4, r2, #3
 800381c:	4622      	mov	r2, r4
 800381e:	462b      	mov	r3, r5
 8003820:	1814      	adds	r4, r2, r0
 8003822:	64bc      	str	r4, [r7, #72]	; 0x48
 8003824:	414b      	adcs	r3, r1
 8003826:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	4618      	mov	r0, r3
 800382e:	f04f 0100 	mov.w	r1, #0
 8003832:	f04f 0200 	mov.w	r2, #0
 8003836:	f04f 0300 	mov.w	r3, #0
 800383a:	008b      	lsls	r3, r1, #2
 800383c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003840:	0082      	lsls	r2, r0, #2
 8003842:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003846:	f7fc fcc7 	bl	80001d8 <__aeabi_uldivmod>
 800384a:	4602      	mov	r2, r0
 800384c:	460b      	mov	r3, r1
 800384e:	4b2f      	ldr	r3, [pc, #188]	; (800390c <UART_SetConfig+0x38c>)
 8003850:	fba3 1302 	umull	r1, r3, r3, r2
 8003854:	095b      	lsrs	r3, r3, #5
 8003856:	2164      	movs	r1, #100	; 0x64
 8003858:	fb01 f303 	mul.w	r3, r1, r3
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	011b      	lsls	r3, r3, #4
 8003860:	3332      	adds	r3, #50	; 0x32
 8003862:	4a2a      	ldr	r2, [pc, #168]	; (800390c <UART_SetConfig+0x38c>)
 8003864:	fba2 2303 	umull	r2, r3, r2, r3
 8003868:	095b      	lsrs	r3, r3, #5
 800386a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800386e:	441e      	add	r6, r3
 8003870:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003872:	4618      	mov	r0, r3
 8003874:	f04f 0100 	mov.w	r1, #0
 8003878:	4602      	mov	r2, r0
 800387a:	460b      	mov	r3, r1
 800387c:	1894      	adds	r4, r2, r2
 800387e:	603c      	str	r4, [r7, #0]
 8003880:	415b      	adcs	r3, r3
 8003882:	607b      	str	r3, [r7, #4]
 8003884:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003888:	1812      	adds	r2, r2, r0
 800388a:	eb41 0303 	adc.w	r3, r1, r3
 800388e:	f04f 0400 	mov.w	r4, #0
 8003892:	f04f 0500 	mov.w	r5, #0
 8003896:	00dd      	lsls	r5, r3, #3
 8003898:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800389c:	00d4      	lsls	r4, r2, #3
 800389e:	4622      	mov	r2, r4
 80038a0:	462b      	mov	r3, r5
 80038a2:	eb12 0a00 	adds.w	sl, r2, r0
 80038a6:	eb43 0b01 	adc.w	fp, r3, r1
 80038aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f04f 0100 	mov.w	r1, #0
 80038b4:	f04f 0200 	mov.w	r2, #0
 80038b8:	f04f 0300 	mov.w	r3, #0
 80038bc:	008b      	lsls	r3, r1, #2
 80038be:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80038c2:	0082      	lsls	r2, r0, #2
 80038c4:	4650      	mov	r0, sl
 80038c6:	4659      	mov	r1, fp
 80038c8:	f7fc fc86 	bl	80001d8 <__aeabi_uldivmod>
 80038cc:	4602      	mov	r2, r0
 80038ce:	460b      	mov	r3, r1
 80038d0:	4b0e      	ldr	r3, [pc, #56]	; (800390c <UART_SetConfig+0x38c>)
 80038d2:	fba3 1302 	umull	r1, r3, r3, r2
 80038d6:	095b      	lsrs	r3, r3, #5
 80038d8:	2164      	movs	r1, #100	; 0x64
 80038da:	fb01 f303 	mul.w	r3, r1, r3
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	011b      	lsls	r3, r3, #4
 80038e2:	3332      	adds	r3, #50	; 0x32
 80038e4:	4a09      	ldr	r2, [pc, #36]	; (800390c <UART_SetConfig+0x38c>)
 80038e6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ea:	095b      	lsrs	r3, r3, #5
 80038ec:	f003 020f 	and.w	r2, r3, #15
 80038f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4432      	add	r2, r6
 80038f6:	609a      	str	r2, [r3, #8]
}
 80038f8:	bf00      	nop
 80038fa:	377c      	adds	r7, #124	; 0x7c
 80038fc:	46bd      	mov	sp, r7
 80038fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003902:	bf00      	nop
 8003904:	40011000 	.word	0x40011000
 8003908:	40011400 	.word	0x40011400
 800390c:	51eb851f 	.word	0x51eb851f

08003910 <calloc>:
 8003910:	4b02      	ldr	r3, [pc, #8]	; (800391c <calloc+0xc>)
 8003912:	460a      	mov	r2, r1
 8003914:	4601      	mov	r1, r0
 8003916:	6818      	ldr	r0, [r3, #0]
 8003918:	f000 b842 	b.w	80039a0 <_calloc_r>
 800391c:	2000000c 	.word	0x2000000c

08003920 <__errno>:
 8003920:	4b01      	ldr	r3, [pc, #4]	; (8003928 <__errno+0x8>)
 8003922:	6818      	ldr	r0, [r3, #0]
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	2000000c 	.word	0x2000000c

0800392c <__libc_init_array>:
 800392c:	b570      	push	{r4, r5, r6, lr}
 800392e:	4d0d      	ldr	r5, [pc, #52]	; (8003964 <__libc_init_array+0x38>)
 8003930:	4c0d      	ldr	r4, [pc, #52]	; (8003968 <__libc_init_array+0x3c>)
 8003932:	1b64      	subs	r4, r4, r5
 8003934:	10a4      	asrs	r4, r4, #2
 8003936:	2600      	movs	r6, #0
 8003938:	42a6      	cmp	r6, r4
 800393a:	d109      	bne.n	8003950 <__libc_init_array+0x24>
 800393c:	4d0b      	ldr	r5, [pc, #44]	; (800396c <__libc_init_array+0x40>)
 800393e:	4c0c      	ldr	r4, [pc, #48]	; (8003970 <__libc_init_array+0x44>)
 8003940:	f000 f8b6 	bl	8003ab0 <_init>
 8003944:	1b64      	subs	r4, r4, r5
 8003946:	10a4      	asrs	r4, r4, #2
 8003948:	2600      	movs	r6, #0
 800394a:	42a6      	cmp	r6, r4
 800394c:	d105      	bne.n	800395a <__libc_init_array+0x2e>
 800394e:	bd70      	pop	{r4, r5, r6, pc}
 8003950:	f855 3b04 	ldr.w	r3, [r5], #4
 8003954:	4798      	blx	r3
 8003956:	3601      	adds	r6, #1
 8003958:	e7ee      	b.n	8003938 <__libc_init_array+0xc>
 800395a:	f855 3b04 	ldr.w	r3, [r5], #4
 800395e:	4798      	blx	r3
 8003960:	3601      	adds	r6, #1
 8003962:	e7f2      	b.n	800394a <__libc_init_array+0x1e>
 8003964:	08003d2c 	.word	0x08003d2c
 8003968:	08003d2c 	.word	0x08003d2c
 800396c:	08003d2c 	.word	0x08003d2c
 8003970:	08003d30 	.word	0x08003d30

08003974 <memcpy>:
 8003974:	440a      	add	r2, r1
 8003976:	4291      	cmp	r1, r2
 8003978:	f100 33ff 	add.w	r3, r0, #4294967295
 800397c:	d100      	bne.n	8003980 <memcpy+0xc>
 800397e:	4770      	bx	lr
 8003980:	b510      	push	{r4, lr}
 8003982:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003986:	f803 4f01 	strb.w	r4, [r3, #1]!
 800398a:	4291      	cmp	r1, r2
 800398c:	d1f9      	bne.n	8003982 <memcpy+0xe>
 800398e:	bd10      	pop	{r4, pc}

08003990 <memset>:
 8003990:	4402      	add	r2, r0
 8003992:	4603      	mov	r3, r0
 8003994:	4293      	cmp	r3, r2
 8003996:	d100      	bne.n	800399a <memset+0xa>
 8003998:	4770      	bx	lr
 800399a:	f803 1b01 	strb.w	r1, [r3], #1
 800399e:	e7f9      	b.n	8003994 <memset+0x4>

080039a0 <_calloc_r>:
 80039a0:	b513      	push	{r0, r1, r4, lr}
 80039a2:	434a      	muls	r2, r1
 80039a4:	4611      	mov	r1, r2
 80039a6:	9201      	str	r2, [sp, #4]
 80039a8:	f000 f80a 	bl	80039c0 <_malloc_r>
 80039ac:	4604      	mov	r4, r0
 80039ae:	b118      	cbz	r0, 80039b8 <_calloc_r+0x18>
 80039b0:	9a01      	ldr	r2, [sp, #4]
 80039b2:	2100      	movs	r1, #0
 80039b4:	f7ff ffec 	bl	8003990 <memset>
 80039b8:	4620      	mov	r0, r4
 80039ba:	b002      	add	sp, #8
 80039bc:	bd10      	pop	{r4, pc}
	...

080039c0 <_malloc_r>:
 80039c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039c2:	1ccd      	adds	r5, r1, #3
 80039c4:	f025 0503 	bic.w	r5, r5, #3
 80039c8:	3508      	adds	r5, #8
 80039ca:	2d0c      	cmp	r5, #12
 80039cc:	bf38      	it	cc
 80039ce:	250c      	movcc	r5, #12
 80039d0:	2d00      	cmp	r5, #0
 80039d2:	4606      	mov	r6, r0
 80039d4:	db01      	blt.n	80039da <_malloc_r+0x1a>
 80039d6:	42a9      	cmp	r1, r5
 80039d8:	d903      	bls.n	80039e2 <_malloc_r+0x22>
 80039da:	230c      	movs	r3, #12
 80039dc:	6033      	str	r3, [r6, #0]
 80039de:	2000      	movs	r0, #0
 80039e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039e2:	f000 f857 	bl	8003a94 <__malloc_lock>
 80039e6:	4921      	ldr	r1, [pc, #132]	; (8003a6c <_malloc_r+0xac>)
 80039e8:	680a      	ldr	r2, [r1, #0]
 80039ea:	4614      	mov	r4, r2
 80039ec:	b99c      	cbnz	r4, 8003a16 <_malloc_r+0x56>
 80039ee:	4f20      	ldr	r7, [pc, #128]	; (8003a70 <_malloc_r+0xb0>)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	b923      	cbnz	r3, 80039fe <_malloc_r+0x3e>
 80039f4:	4621      	mov	r1, r4
 80039f6:	4630      	mov	r0, r6
 80039f8:	f000 f83c 	bl	8003a74 <_sbrk_r>
 80039fc:	6038      	str	r0, [r7, #0]
 80039fe:	4629      	mov	r1, r5
 8003a00:	4630      	mov	r0, r6
 8003a02:	f000 f837 	bl	8003a74 <_sbrk_r>
 8003a06:	1c43      	adds	r3, r0, #1
 8003a08:	d123      	bne.n	8003a52 <_malloc_r+0x92>
 8003a0a:	230c      	movs	r3, #12
 8003a0c:	6033      	str	r3, [r6, #0]
 8003a0e:	4630      	mov	r0, r6
 8003a10:	f000 f846 	bl	8003aa0 <__malloc_unlock>
 8003a14:	e7e3      	b.n	80039de <_malloc_r+0x1e>
 8003a16:	6823      	ldr	r3, [r4, #0]
 8003a18:	1b5b      	subs	r3, r3, r5
 8003a1a:	d417      	bmi.n	8003a4c <_malloc_r+0x8c>
 8003a1c:	2b0b      	cmp	r3, #11
 8003a1e:	d903      	bls.n	8003a28 <_malloc_r+0x68>
 8003a20:	6023      	str	r3, [r4, #0]
 8003a22:	441c      	add	r4, r3
 8003a24:	6025      	str	r5, [r4, #0]
 8003a26:	e004      	b.n	8003a32 <_malloc_r+0x72>
 8003a28:	6863      	ldr	r3, [r4, #4]
 8003a2a:	42a2      	cmp	r2, r4
 8003a2c:	bf0c      	ite	eq
 8003a2e:	600b      	streq	r3, [r1, #0]
 8003a30:	6053      	strne	r3, [r2, #4]
 8003a32:	4630      	mov	r0, r6
 8003a34:	f000 f834 	bl	8003aa0 <__malloc_unlock>
 8003a38:	f104 000b 	add.w	r0, r4, #11
 8003a3c:	1d23      	adds	r3, r4, #4
 8003a3e:	f020 0007 	bic.w	r0, r0, #7
 8003a42:	1ac2      	subs	r2, r0, r3
 8003a44:	d0cc      	beq.n	80039e0 <_malloc_r+0x20>
 8003a46:	1a1b      	subs	r3, r3, r0
 8003a48:	50a3      	str	r3, [r4, r2]
 8003a4a:	e7c9      	b.n	80039e0 <_malloc_r+0x20>
 8003a4c:	4622      	mov	r2, r4
 8003a4e:	6864      	ldr	r4, [r4, #4]
 8003a50:	e7cc      	b.n	80039ec <_malloc_r+0x2c>
 8003a52:	1cc4      	adds	r4, r0, #3
 8003a54:	f024 0403 	bic.w	r4, r4, #3
 8003a58:	42a0      	cmp	r0, r4
 8003a5a:	d0e3      	beq.n	8003a24 <_malloc_r+0x64>
 8003a5c:	1a21      	subs	r1, r4, r0
 8003a5e:	4630      	mov	r0, r6
 8003a60:	f000 f808 	bl	8003a74 <_sbrk_r>
 8003a64:	3001      	adds	r0, #1
 8003a66:	d1dd      	bne.n	8003a24 <_malloc_r+0x64>
 8003a68:	e7cf      	b.n	8003a0a <_malloc_r+0x4a>
 8003a6a:	bf00      	nop
 8003a6c:	200002c4 	.word	0x200002c4
 8003a70:	200002c8 	.word	0x200002c8

08003a74 <_sbrk_r>:
 8003a74:	b538      	push	{r3, r4, r5, lr}
 8003a76:	4d06      	ldr	r5, [pc, #24]	; (8003a90 <_sbrk_r+0x1c>)
 8003a78:	2300      	movs	r3, #0
 8003a7a:	4604      	mov	r4, r0
 8003a7c:	4608      	mov	r0, r1
 8003a7e:	602b      	str	r3, [r5, #0]
 8003a80:	f7fd fbfe 	bl	8001280 <_sbrk>
 8003a84:	1c43      	adds	r3, r0, #1
 8003a86:	d102      	bne.n	8003a8e <_sbrk_r+0x1a>
 8003a88:	682b      	ldr	r3, [r5, #0]
 8003a8a:	b103      	cbz	r3, 8003a8e <_sbrk_r+0x1a>
 8003a8c:	6023      	str	r3, [r4, #0]
 8003a8e:	bd38      	pop	{r3, r4, r5, pc}
 8003a90:	200003d4 	.word	0x200003d4

08003a94 <__malloc_lock>:
 8003a94:	4801      	ldr	r0, [pc, #4]	; (8003a9c <__malloc_lock+0x8>)
 8003a96:	f000 b809 	b.w	8003aac <__retarget_lock_acquire_recursive>
 8003a9a:	bf00      	nop
 8003a9c:	200003dc 	.word	0x200003dc

08003aa0 <__malloc_unlock>:
 8003aa0:	4801      	ldr	r0, [pc, #4]	; (8003aa8 <__malloc_unlock+0x8>)
 8003aa2:	f000 b804 	b.w	8003aae <__retarget_lock_release_recursive>
 8003aa6:	bf00      	nop
 8003aa8:	200003dc 	.word	0x200003dc

08003aac <__retarget_lock_acquire_recursive>:
 8003aac:	4770      	bx	lr

08003aae <__retarget_lock_release_recursive>:
 8003aae:	4770      	bx	lr

08003ab0 <_init>:
 8003ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ab2:	bf00      	nop
 8003ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ab6:	bc08      	pop	{r3}
 8003ab8:	469e      	mov	lr, r3
 8003aba:	4770      	bx	lr

08003abc <_fini>:
 8003abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003abe:	bf00      	nop
 8003ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ac2:	bc08      	pop	{r3}
 8003ac4:	469e      	mov	lr, r3
 8003ac6:	4770      	bx	lr
>>>>>>> Stashed changes
